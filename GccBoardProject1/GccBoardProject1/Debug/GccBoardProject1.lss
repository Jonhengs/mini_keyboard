
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004908  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000dc  20000000  00004908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000200dc  2**0
                  CONTENTS
  3 .bss          000005ac  200000dc  000049e4  000200dc  2**2
                  ALLOC
  4 .stack        00000800  20000688  00004f90  000200dc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  7 .debug_info   00029917  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000046ab  00000000  00000000  00049a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006e93  00000000  00000000  0004e11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000780  00000000  00000000  00054fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000850  00000000  00000000  00055732  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000204f7  00000000  00000000  00055f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011a64  00000000  00000000  00076479  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009d593  00000000  00000000  00087edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000126c  00000000  00000000  00125470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 0e 00 20 65 42 00 00 61 42 00 00 61 42 00 00     ... eB..aB..aB..
	...
      2c:	61 42 00 00 00 00 00 00 00 00 00 00 61 42 00 00     aB..........aB..
      3c:	79 11 00 00 61 42 00 00 61 42 00 00 61 42 00 00     y...aB..aB..aB..
      4c:	01 1d 00 00 61 42 00 00 61 42 00 00 91 39 00 00     ....aB..aB...9..
      5c:	61 42 00 00 61 42 00 00 61 42 00 00 61 42 00 00     aB..aB..aB..aB..
      6c:	61 42 00 00 61 42 00 00 61 42 00 00 61 42 00 00     aB..aB..aB..aB..
      7c:	61 42 00 00 61 42 00 00 61 42 00 00 61 42 00 00     aB..aB..aB..aB..
      8c:	61 42 00 00 61 42 00 00 61 42 00 00 61 42 00 00     aB..aB..aB..aB..
      9c:	61 42 00 00 61 42 00 00 61 42 00 00 61 42 00 00     aB..aB..aB..aB..
      ac:	61 42 00 00 00 00 00 00                             aB......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000dc 	.word	0x200000dc
      d4:	00000000 	.word	0x00000000
      d8:	00004908 	.word	0x00004908

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e0 	.word	0x200000e0
     108:	00004908 	.word	0x00004908
     10c:	00004908 	.word	0x00004908
     110:	00000000 	.word	0x00000000

00000114 <usb_set_kbd_modifier>:
		udi_hid_kbd_up(key);
	}
	
	return true;
}
static bool usb_set_kbd_modifier(uint8_t key, bool down) {
     114:	b570      	push	{r4, r5, r6, lr}
     116:	000d      	movs	r5, r1
	if (!main_b_kbd_enable) {
     118:	4b07      	ldr	r3, [pc, #28]	; (138 <usb_set_kbd_modifier+0x24>)
     11a:	781c      	ldrb	r4, [r3, #0]
     11c:	b2e4      	uxtb	r4, r4
     11e:	2c00      	cmp	r4, #0
     120:	d003      	beq.n	12a <usb_set_kbd_modifier+0x16>
		return false;
	}
	
	if (down) {
     122:	2900      	cmp	r1, #0
     124:	d103      	bne.n	12e <usb_set_kbd_modifier+0x1a>
		udi_hid_kbd_modifier_down(key);
	}
	else {
		udi_hid_kbd_modifier_up(key);
     126:	4b05      	ldr	r3, [pc, #20]	; (13c <usb_set_kbd_modifier+0x28>)
     128:	4798      	blx	r3
	}
	
	return true;
}
     12a:	0020      	movs	r0, r4
     12c:	bd70      	pop	{r4, r5, r6, pc}
		udi_hid_kbd_modifier_down(key);
     12e:	4b04      	ldr	r3, [pc, #16]	; (140 <usb_set_kbd_modifier+0x2c>)
     130:	4798      	blx	r3
	return true;
     132:	002c      	movs	r4, r5
     134:	e7f9      	b.n	12a <usb_set_kbd_modifier+0x16>
     136:	46c0      	nop			; (mov r8, r8)
     138:	200000f9 	.word	0x200000f9
     13c:	00001371 	.word	0x00001371
     140:	000013c5 	.word	0x000013c5

00000144 <usb_set_kbd_key>:
static bool usb_set_kbd_key(uint8_t key, bool down) {
     144:	b570      	push	{r4, r5, r6, lr}
     146:	000d      	movs	r5, r1
	if (!main_b_kbd_enable) {
     148:	4b07      	ldr	r3, [pc, #28]	; (168 <usb_set_kbd_key+0x24>)
     14a:	781c      	ldrb	r4, [r3, #0]
     14c:	b2e4      	uxtb	r4, r4
     14e:	2c00      	cmp	r4, #0
     150:	d003      	beq.n	15a <usb_set_kbd_key+0x16>
	if (down) {
     152:	2900      	cmp	r1, #0
     154:	d103      	bne.n	15e <usb_set_kbd_key+0x1a>
		udi_hid_kbd_up(key);
     156:	4b05      	ldr	r3, [pc, #20]	; (16c <usb_set_kbd_key+0x28>)
     158:	4798      	blx	r3
}
     15a:	0020      	movs	r0, r4
     15c:	bd70      	pop	{r4, r5, r6, pc}
		udi_hid_kbd_down(key);
     15e:	4b04      	ldr	r3, [pc, #16]	; (170 <usb_set_kbd_key+0x2c>)
     160:	4798      	blx	r3
	return true;
     162:	002c      	movs	r4, r5
     164:	e7f9      	b.n	15a <usb_set_kbd_key+0x16>
     166:	46c0      	nop			; (mov r8, r8)
     168:	200000f9 	.word	0x200000f9
     16c:	00001419 	.word	0x00001419
     170:	000014d9 	.word	0x000014d9

00000174 <interpret_special_key>:
static void interpret_special_key(
bool state,
uint8_t normal,
uint8_t fn,
uint8_t alt
) {
     174:	b570      	push	{r4, r5, r6, lr}
     176:	000e      	movs	r6, r1
     178:	0015      	movs	r5, r2
     17a:	001c      	movs	r4, r3
	if (state) {
     17c:	2800      	cmp	r0, #0
     17e:	d01c      	beq.n	1ba <interpret_special_key+0x46>
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     180:	2380      	movs	r3, #128	; 0x80
     182:	4a17      	ldr	r2, [pc, #92]	; (1e0 <interpret_special_key+0x6c>)
     184:	189a      	adds	r2, r3, r2
     186:	6a12      	ldr	r2, [r2, #32]
		if (read_special_key_press(PIN_FN) && (fn != 0)) {
     188:	4213      	tst	r3, r2
     18a:	d101      	bne.n	190 <interpret_special_key+0x1c>
     18c:	2d00      	cmp	r5, #0
     18e:	d10a      	bne.n	1a6 <interpret_special_key+0x32>
     190:	4b14      	ldr	r3, [pc, #80]	; (1e4 <interpret_special_key+0x70>)
     192:	6a1b      	ldr	r3, [r3, #32]
			usb_set_kbd_key(fn, state);
		}
		else if (read_special_key_press(PIN_ALT) && (alt != 0)) {
     194:	05db      	lsls	r3, r3, #23
     196:	d401      	bmi.n	19c <interpret_special_key+0x28>
     198:	2c00      	cmp	r4, #0
     19a:	d109      	bne.n	1b0 <interpret_special_key+0x3c>
			usb_set_kbd_key(alt, state);
		}
		else {
			usb_set_kbd_key(normal, state);
     19c:	2101      	movs	r1, #1
     19e:	0030      	movs	r0, r6
     1a0:	4b11      	ldr	r3, [pc, #68]	; (1e8 <interpret_special_key+0x74>)
     1a2:	4798      	blx	r3
		}
		if (alt != 0) {
			usb_set_kbd_key(alt, state);
		}
	}
}
     1a4:	bd70      	pop	{r4, r5, r6, pc}
			usb_set_kbd_key(fn, state);
     1a6:	2101      	movs	r1, #1
     1a8:	0028      	movs	r0, r5
     1aa:	4b0f      	ldr	r3, [pc, #60]	; (1e8 <interpret_special_key+0x74>)
     1ac:	4798      	blx	r3
     1ae:	e7f9      	b.n	1a4 <interpret_special_key+0x30>
			usb_set_kbd_key(alt, state);
     1b0:	2101      	movs	r1, #1
     1b2:	0020      	movs	r0, r4
     1b4:	4b0c      	ldr	r3, [pc, #48]	; (1e8 <interpret_special_key+0x74>)
     1b6:	4798      	blx	r3
     1b8:	e7f4      	b.n	1a4 <interpret_special_key+0x30>
		usb_set_kbd_key(normal, state);
     1ba:	2100      	movs	r1, #0
     1bc:	0030      	movs	r0, r6
     1be:	4b0a      	ldr	r3, [pc, #40]	; (1e8 <interpret_special_key+0x74>)
     1c0:	4798      	blx	r3
		if (fn != 0) {
     1c2:	2d00      	cmp	r5, #0
     1c4:	d106      	bne.n	1d4 <interpret_special_key+0x60>
		if (alt != 0) {
     1c6:	2c00      	cmp	r4, #0
     1c8:	d0ec      	beq.n	1a4 <interpret_special_key+0x30>
			usb_set_kbd_key(alt, state);
     1ca:	2100      	movs	r1, #0
     1cc:	0020      	movs	r0, r4
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <interpret_special_key+0x74>)
     1d0:	4798      	blx	r3
}
     1d2:	e7e7      	b.n	1a4 <interpret_special_key+0x30>
			usb_set_kbd_key(fn, state);
     1d4:	2100      	movs	r1, #0
     1d6:	0028      	movs	r0, r5
     1d8:	4b03      	ldr	r3, [pc, #12]	; (1e8 <interpret_special_key+0x74>)
     1da:	4798      	blx	r3
     1dc:	e7f3      	b.n	1c6 <interpret_special_key+0x52>
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	40002800 	.word	0x40002800
     1e4:	40002880 	.word	0x40002880
     1e8:	00000145 	.word	0x00000145

000001ec <keyboard_init>:
/* Pupblic functions													*/
/************************************************************************/
/************************************************************************/
/* Init function														*/
/************************************************************************/
void keyboard_init(void) {
     1ec:	b530      	push	{r4, r5, lr}
     1ee:	b083      	sub	sp, #12
	matrix_setup();
     1f0:	4b0c      	ldr	r3, [pc, #48]	; (224 <keyboard_init+0x38>)
     1f2:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2300      	movs	r3, #0
     1f8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1fa:	2201      	movs	r2, #1
     1fc:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     1fe:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(PIN_SHIFT,	&config_port_pin);
     200:	0021      	movs	r1, r4
     202:	2004      	movs	r0, #4
     204:	4d08      	ldr	r5, [pc, #32]	; (228 <keyboard_init+0x3c>)
     206:	47a8      	blx	r5
	port_pin_set_config(PIN_SUP,	&config_port_pin);
     208:	0021      	movs	r1, r4
     20a:	2026      	movs	r0, #38	; 0x26
     20c:	47a8      	blx	r5
	port_pin_set_config(PIN_FN,		&config_port_pin);
     20e:	0021      	movs	r1, r4
     210:	2027      	movs	r0, #39	; 0x27
     212:	47a8      	blx	r5
	port_pin_set_config(PIN_ALT,	&config_port_pin);
     214:	0021      	movs	r1, r4
     216:	2028      	movs	r0, #40	; 0x28
     218:	47a8      	blx	r5
	port_pin_set_config(PIN_CTRL,	&config_port_pin);
     21a:	0021      	movs	r1, r4
     21c:	2029      	movs	r0, #41	; 0x29
     21e:	47a8      	blx	r5
	setup_gpio_pins();
}
     220:	b003      	add	sp, #12
     222:	bd30      	pop	{r4, r5, pc}
     224:	00000f7d 	.word	0x00000f7d
     228:	00001df5 	.word	0x00001df5

0000022c <keyboard_update>:

/************************************************************************/
/* keyboard update function, periodically called						*/
/************************************************************************/
void keyboard_update(void) {
     22c:	b570      	push	{r4, r5, r6, lr}
	
	matrix_update_states();
     22e:	4bd1      	ldr	r3, [pc, #836]	; (574 <keyboard_update+0x348>)
     230:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
     232:	4bd1      	ldr	r3, [pc, #836]	; (578 <keyboard_update+0x34c>)
     234:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_SHIFT);
     236:	091b      	lsrs	r3, r3, #4
     238:	2201      	movs	r2, #1
     23a:	4053      	eors	r3, r2
     23c:	2401      	movs	r4, #1
     23e:	401c      	ands	r4, r3
	if (state != shift_key_pressed) {
     240:	4bce      	ldr	r3, [pc, #824]	; (57c <keyboard_update+0x350>)
     242:	781b      	ldrb	r3, [r3, #0]
     244:	42a3      	cmp	r3, r4
     246:	d005      	beq.n	254 <keyboard_update+0x28>
		usb_set_kbd_modifier(HID_MODIFIER_LEFT_SHIFT, state);
     248:	0021      	movs	r1, r4
     24a:	2002      	movs	r0, #2
     24c:	4bcc      	ldr	r3, [pc, #816]	; (580 <keyboard_update+0x354>)
     24e:	4798      	blx	r3
		shift_key_pressed = state;
     250:	4bca      	ldr	r3, [pc, #808]	; (57c <keyboard_update+0x350>)
     252:	701c      	strb	r4, [r3, #0]
     254:	4bcb      	ldr	r3, [pc, #812]	; (584 <keyboard_update+0x358>)
     256:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_CTRL);
     258:	0a5b      	lsrs	r3, r3, #9
     25a:	2201      	movs	r2, #1
     25c:	4053      	eors	r3, r2
     25e:	2401      	movs	r4, #1
     260:	401c      	ands	r4, r3
	if (state != ctrl_key_pressed) {
     262:	4bc9      	ldr	r3, [pc, #804]	; (588 <keyboard_update+0x35c>)
     264:	781b      	ldrb	r3, [r3, #0]
     266:	42a3      	cmp	r3, r4
     268:	d005      	beq.n	276 <keyboard_update+0x4a>
		usb_set_kbd_modifier(HID_MODIFIER_LEFT_CTRL, state);
     26a:	0021      	movs	r1, r4
     26c:	2001      	movs	r0, #1
     26e:	4bc4      	ldr	r3, [pc, #784]	; (580 <keyboard_update+0x354>)
     270:	4798      	blx	r3
		ctrl_key_pressed = state;
     272:	4bc5      	ldr	r3, [pc, #788]	; (588 <keyboard_update+0x35c>)
     274:	701c      	strb	r4, [r3, #0]
     276:	4bc3      	ldr	r3, [pc, #780]	; (584 <keyboard_update+0x358>)
     278:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_SUP);
     27a:	099b      	lsrs	r3, r3, #6
     27c:	2201      	movs	r2, #1
     27e:	4053      	eors	r3, r2
     280:	2401      	movs	r4, #1
     282:	401c      	ands	r4, r3
	if (state != super_key_pressed) {
     284:	4bc1      	ldr	r3, [pc, #772]	; (58c <keyboard_update+0x360>)
     286:	781b      	ldrb	r3, [r3, #0]
     288:	42a3      	cmp	r3, r4
     28a:	d005      	beq.n	298 <keyboard_update+0x6c>
		usb_set_kbd_modifier(HID_MODIFIER_LEFT_UI, state);
     28c:	0021      	movs	r1, r4
     28e:	2008      	movs	r0, #8
     290:	4bbb      	ldr	r3, [pc, #748]	; (580 <keyboard_update+0x354>)
     292:	4798      	blx	r3
		super_key_pressed = state;
     294:	4bbd      	ldr	r3, [pc, #756]	; (58c <keyboard_update+0x360>)
     296:	701c      	strb	r4, [r3, #0]

void press_matrix_keys(void) {
	bool state = false;
	
	// key_1
	state = matrix_get_state(key_1, true);
     298:	4bbd      	ldr	r3, [pc, #756]	; (590 <keyboard_update+0x364>)
     29a:	2201      	movs	r2, #1
     29c:	6818      	ldr	r0, [r3, #0]
     29e:	6859      	ldr	r1, [r3, #4]
     2a0:	4bbc      	ldr	r3, [pc, #752]	; (594 <keyboard_update+0x368>)
     2a2:	4798      	blx	r3
     2a4:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     2a6:	4bbc      	ldr	r3, [pc, #752]	; (598 <keyboard_update+0x36c>)
	if (state != get_matrix_key_pressed(key_1)) {
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	4283      	cmp	r3, r0
     2ac:	d006      	beq.n	2bc <keyboard_update+0x90>
		interpret_special_key(state, HID_1, HID_F1, 0);
     2ae:	2300      	movs	r3, #0
     2b0:	223a      	movs	r2, #58	; 0x3a
     2b2:	211e      	movs	r1, #30
     2b4:	4db9      	ldr	r5, [pc, #740]	; (59c <keyboard_update+0x370>)
     2b6:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     2b8:	4bb7      	ldr	r3, [pc, #732]	; (598 <keyboard_update+0x36c>)
     2ba:	701c      	strb	r4, [r3, #0]
		set_matrix_key_pressed(key_1, state);
	}
	
	// key_2
	state = matrix_get_state(key_2, true);
     2bc:	4bb8      	ldr	r3, [pc, #736]	; (5a0 <keyboard_update+0x374>)
     2be:	2201      	movs	r2, #1
     2c0:	6818      	ldr	r0, [r3, #0]
     2c2:	6859      	ldr	r1, [r3, #4]
     2c4:	4bb3      	ldr	r3, [pc, #716]	; (594 <keyboard_update+0x368>)
     2c6:	4798      	blx	r3
     2c8:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     2ca:	4bb3      	ldr	r3, [pc, #716]	; (598 <keyboard_update+0x36c>)
	if (state != get_matrix_key_pressed(key_2)) {
     2cc:	799b      	ldrb	r3, [r3, #6]
     2ce:	4283      	cmp	r3, r0
     2d0:	d006      	beq.n	2e0 <keyboard_update+0xb4>
		interpret_special_key(state, HID_2, HID_F2, 0);
     2d2:	2300      	movs	r3, #0
     2d4:	223b      	movs	r2, #59	; 0x3b
     2d6:	211f      	movs	r1, #31
     2d8:	4db0      	ldr	r5, [pc, #704]	; (59c <keyboard_update+0x370>)
     2da:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     2dc:	4bae      	ldr	r3, [pc, #696]	; (598 <keyboard_update+0x36c>)
     2de:	719c      	strb	r4, [r3, #6]
		set_matrix_key_pressed(key_2, state);
	}
	
	// key_3
	state = matrix_get_state(key_3, true);
     2e0:	4bb0      	ldr	r3, [pc, #704]	; (5a4 <keyboard_update+0x378>)
     2e2:	2201      	movs	r2, #1
     2e4:	6818      	ldr	r0, [r3, #0]
     2e6:	6859      	ldr	r1, [r3, #4]
     2e8:	4baa      	ldr	r3, [pc, #680]	; (594 <keyboard_update+0x368>)
     2ea:	4798      	blx	r3
     2ec:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     2ee:	4baa      	ldr	r3, [pc, #680]	; (598 <keyboard_update+0x36c>)
	if (state != get_matrix_key_pressed(key_3)) {
     2f0:	7b1b      	ldrb	r3, [r3, #12]
     2f2:	4283      	cmp	r3, r0
     2f4:	d006      	beq.n	304 <keyboard_update+0xd8>
		interpret_special_key(state, HID_3, HID_F3, 0);
     2f6:	2300      	movs	r3, #0
     2f8:	223c      	movs	r2, #60	; 0x3c
     2fa:	2120      	movs	r1, #32
     2fc:	4da7      	ldr	r5, [pc, #668]	; (59c <keyboard_update+0x370>)
     2fe:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     300:	4ba5      	ldr	r3, [pc, #660]	; (598 <keyboard_update+0x36c>)
     302:	731c      	strb	r4, [r3, #12]
		set_matrix_key_pressed(key_3, state);
	}
	
	// key_4
	state = matrix_get_state(key_4, true);
     304:	4ba8      	ldr	r3, [pc, #672]	; (5a8 <keyboard_update+0x37c>)
     306:	2201      	movs	r2, #1
     308:	6818      	ldr	r0, [r3, #0]
     30a:	6859      	ldr	r1, [r3, #4]
     30c:	4ba1      	ldr	r3, [pc, #644]	; (594 <keyboard_update+0x368>)
     30e:	4798      	blx	r3
     310:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     312:	4ba1      	ldr	r3, [pc, #644]	; (598 <keyboard_update+0x36c>)
	if (state != get_matrix_key_pressed(key_4)) {
     314:	7c9b      	ldrb	r3, [r3, #18]
     316:	4283      	cmp	r3, r0
     318:	d006      	beq.n	328 <keyboard_update+0xfc>
		interpret_special_key(state, HID_4, HID_F4, 0);
     31a:	2300      	movs	r3, #0
     31c:	223d      	movs	r2, #61	; 0x3d
     31e:	2121      	movs	r1, #33	; 0x21
     320:	4d9e      	ldr	r5, [pc, #632]	; (59c <keyboard_update+0x370>)
     322:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     324:	4b9c      	ldr	r3, [pc, #624]	; (598 <keyboard_update+0x36c>)
     326:	749c      	strb	r4, [r3, #18]
		set_matrix_key_pressed(key_4, state);
	}
	
	// key_5
	state = matrix_get_state(key_5, true);
     328:	4ba0      	ldr	r3, [pc, #640]	; (5ac <keyboard_update+0x380>)
     32a:	2201      	movs	r2, #1
     32c:	6818      	ldr	r0, [r3, #0]
     32e:	6859      	ldr	r1, [r3, #4]
     330:	4b98      	ldr	r3, [pc, #608]	; (594 <keyboard_update+0x368>)
     332:	4798      	blx	r3
     334:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     336:	4b98      	ldr	r3, [pc, #608]	; (598 <keyboard_update+0x36c>)
	if (state != get_matrix_key_pressed(key_5)) {
     338:	7e1b      	ldrb	r3, [r3, #24]
     33a:	4283      	cmp	r3, r0
     33c:	d006      	beq.n	34c <keyboard_update+0x120>
		interpret_special_key(state, HID_5, HID_F5, 0);
     33e:	2300      	movs	r3, #0
     340:	223e      	movs	r2, #62	; 0x3e
     342:	2122      	movs	r1, #34	; 0x22
     344:	4d95      	ldr	r5, [pc, #596]	; (59c <keyboard_update+0x370>)
     346:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     348:	4b93      	ldr	r3, [pc, #588]	; (598 <keyboard_update+0x36c>)
     34a:	761c      	strb	r4, [r3, #24]
		set_matrix_key_pressed(key_5, state);
	}
	
	// key_6
	state = matrix_get_state(key_6, true);
     34c:	4b98      	ldr	r3, [pc, #608]	; (5b0 <keyboard_update+0x384>)
     34e:	2201      	movs	r2, #1
     350:	6818      	ldr	r0, [r3, #0]
     352:	6859      	ldr	r1, [r3, #4]
     354:	4b8f      	ldr	r3, [pc, #572]	; (594 <keyboard_update+0x368>)
     356:	4798      	blx	r3
     358:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     35a:	4a8f      	ldr	r2, [pc, #572]	; (598 <keyboard_update+0x36c>)
	if (state != get_matrix_key_pressed(key_6)) {
     35c:	7f92      	ldrb	r2, [r2, #30]
     35e:	4282      	cmp	r2, r0
     360:	d031      	beq.n	3c6 <keyboard_update+0x19a>
		if (state) {
     362:	2800      	cmp	r0, #0
     364:	d026      	beq.n	3b4 <keyboard_update+0x188>
     366:	2380      	movs	r3, #128	; 0x80
     368:	4a83      	ldr	r2, [pc, #524]	; (578 <keyboard_update+0x34c>)
     36a:	189a      	adds	r2, r3, r2
     36c:	6a12      	ldr	r2, [r2, #32]
			if (read_special_key_press(PIN_FN)) {
     36e:	4213      	tst	r3, r2
     370:	d104      	bne.n	37c <keyboard_update+0x150>
				usb_set_kbd_key(HID_F6, state);
     372:	2101      	movs	r1, #1
     374:	203f      	movs	r0, #63	; 0x3f
     376:	4b8f      	ldr	r3, [pc, #572]	; (5b4 <keyboard_update+0x388>)
     378:	4798      	blx	r3
     37a:	e022      	b.n	3c2 <keyboard_update+0x196>
     37c:	4b81      	ldr	r3, [pc, #516]	; (584 <keyboard_update+0x358>)
     37e:	6a1b      	ldr	r3, [r3, #32]
			}
			else if (read_special_key_press(PIN_ALT)) {
     380:	05db      	lsls	r3, r3, #23
     382:	d412      	bmi.n	3aa <keyboard_update+0x17e>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, true);
     384:	2101      	movs	r1, #1
     386:	2040      	movs	r0, #64	; 0x40
     388:	4d7d      	ldr	r5, [pc, #500]	; (580 <keyboard_update+0x354>)
     38a:	47a8      	blx	r5
				usb_set_kbd_key(HID_UNDERSCORE, true);
     38c:	2101      	movs	r1, #1
     38e:	202d      	movs	r0, #45	; 0x2d
     390:	4e88      	ldr	r6, [pc, #544]	; (5b4 <keyboard_update+0x388>)
     392:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     394:	2096      	movs	r0, #150	; 0x96
     396:	0040      	lsls	r0, r0, #1
     398:	4b87      	ldr	r3, [pc, #540]	; (5b8 <keyboard_update+0x38c>)
     39a:	4798      	blx	r3
				usb_set_kbd_key(HID_UNDERSCORE, false);
     39c:	2100      	movs	r1, #0
     39e:	202d      	movs	r0, #45	; 0x2d
     3a0:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, false);
     3a2:	2100      	movs	r1, #0
     3a4:	2040      	movs	r0, #64	; 0x40
     3a6:	47a8      	blx	r5
     3a8:	e00b      	b.n	3c2 <keyboard_update+0x196>
			}
			else {
				usb_set_kbd_key(HID_6, state);
     3aa:	2101      	movs	r1, #1
     3ac:	2023      	movs	r0, #35	; 0x23
     3ae:	4b81      	ldr	r3, [pc, #516]	; (5b4 <keyboard_update+0x388>)
     3b0:	4798      	blx	r3
     3b2:	e006      	b.n	3c2 <keyboard_update+0x196>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_6, state);
     3b4:	2100      	movs	r1, #0
     3b6:	2023      	movs	r0, #35	; 0x23
     3b8:	4d7e      	ldr	r5, [pc, #504]	; (5b4 <keyboard_update+0x388>)
     3ba:	47a8      	blx	r5
			usb_set_kbd_key(HID_F6, state);
     3bc:	2100      	movs	r1, #0
     3be:	203f      	movs	r0, #63	; 0x3f
     3c0:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     3c2:	4b75      	ldr	r3, [pc, #468]	; (598 <keyboard_update+0x36c>)
     3c4:	779c      	strb	r4, [r3, #30]
		}
		set_matrix_key_pressed(key_6, state);
	}

	// key_7
	state = matrix_get_state(key_7, true);
     3c6:	4b7d      	ldr	r3, [pc, #500]	; (5bc <keyboard_update+0x390>)
     3c8:	2201      	movs	r2, #1
     3ca:	6818      	ldr	r0, [r3, #0]
     3cc:	6859      	ldr	r1, [r3, #4]
     3ce:	4b71      	ldr	r3, [pc, #452]	; (594 <keyboard_update+0x368>)
     3d0:	4798      	blx	r3
     3d2:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     3d4:	2224      	movs	r2, #36	; 0x24
	if (state != get_matrix_key_pressed(key_7)) {
     3d6:	4970      	ldr	r1, [pc, #448]	; (598 <keyboard_update+0x36c>)
     3d8:	5c8a      	ldrb	r2, [r1, r2]
     3da:	4282      	cmp	r2, r0
     3dc:	d032      	beq.n	444 <keyboard_update+0x218>
		if (state) {
     3de:	2800      	cmp	r0, #0
     3e0:	d026      	beq.n	430 <keyboard_update+0x204>
     3e2:	2380      	movs	r3, #128	; 0x80
     3e4:	4a64      	ldr	r2, [pc, #400]	; (578 <keyboard_update+0x34c>)
     3e6:	189a      	adds	r2, r3, r2
     3e8:	6a12      	ldr	r2, [r2, #32]
			if (read_special_key_press(PIN_FN)) {
     3ea:	4213      	tst	r3, r2
     3ec:	d104      	bne.n	3f8 <keyboard_update+0x1cc>
				usb_set_kbd_key(HID_F7, state);
     3ee:	2101      	movs	r1, #1
     3f0:	2040      	movs	r0, #64	; 0x40
     3f2:	4b70      	ldr	r3, [pc, #448]	; (5b4 <keyboard_update+0x388>)
     3f4:	4798      	blx	r3
     3f6:	e022      	b.n	43e <keyboard_update+0x212>
     3f8:	4b62      	ldr	r3, [pc, #392]	; (584 <keyboard_update+0x358>)
     3fa:	6a1b      	ldr	r3, [r3, #32]
			}
			else if (read_special_key_press(PIN_ALT)) {
     3fc:	05db      	lsls	r3, r3, #23
     3fe:	d412      	bmi.n	426 <keyboard_update+0x1fa>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, true);
     400:	2101      	movs	r1, #1
     402:	2040      	movs	r0, #64	; 0x40
     404:	4d5e      	ldr	r5, [pc, #376]	; (580 <keyboard_update+0x354>)
     406:	47a8      	blx	r5
				usb_set_kbd_key(HID_7, true);
     408:	2101      	movs	r1, #1
     40a:	2024      	movs	r0, #36	; 0x24
     40c:	4e69      	ldr	r6, [pc, #420]	; (5b4 <keyboard_update+0x388>)
     40e:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     410:	2096      	movs	r0, #150	; 0x96
     412:	0040      	lsls	r0, r0, #1
     414:	4b68      	ldr	r3, [pc, #416]	; (5b8 <keyboard_update+0x38c>)
     416:	4798      	blx	r3
				usb_set_kbd_key(HID_7, false);
     418:	2100      	movs	r1, #0
     41a:	2024      	movs	r0, #36	; 0x24
     41c:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, false);
     41e:	2100      	movs	r1, #0
     420:	2040      	movs	r0, #64	; 0x40
     422:	47a8      	blx	r5
     424:	e00b      	b.n	43e <keyboard_update+0x212>
			}
			else {
				usb_set_kbd_key(HID_7, state);
     426:	2101      	movs	r1, #1
     428:	2024      	movs	r0, #36	; 0x24
     42a:	4b62      	ldr	r3, [pc, #392]	; (5b4 <keyboard_update+0x388>)
     42c:	4798      	blx	r3
     42e:	e006      	b.n	43e <keyboard_update+0x212>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_7, state);
     430:	2100      	movs	r1, #0
     432:	2024      	movs	r0, #36	; 0x24
     434:	4d5f      	ldr	r5, [pc, #380]	; (5b4 <keyboard_update+0x388>)
     436:	47a8      	blx	r5
			usb_set_kbd_key(HID_F7, state);
     438:	2100      	movs	r1, #0
     43a:	2040      	movs	r0, #64	; 0x40
     43c:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     43e:	2324      	movs	r3, #36	; 0x24
     440:	4a55      	ldr	r2, [pc, #340]	; (598 <keyboard_update+0x36c>)
     442:	54d4      	strb	r4, [r2, r3]
		}
		set_matrix_key_pressed(key_7, state);
	}
	
	// key_8
	state = matrix_get_state(key_8, true);
     444:	4b5e      	ldr	r3, [pc, #376]	; (5c0 <keyboard_update+0x394>)
     446:	2201      	movs	r2, #1
     448:	6818      	ldr	r0, [r3, #0]
     44a:	6859      	ldr	r1, [r3, #4]
     44c:	4b51      	ldr	r3, [pc, #324]	; (594 <keyboard_update+0x368>)
     44e:	4798      	blx	r3
     450:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     452:	222a      	movs	r2, #42	; 0x2a
	if (state != get_matrix_key_pressed(key_8)) {
     454:	4950      	ldr	r1, [pc, #320]	; (598 <keyboard_update+0x36c>)
     456:	5c8a      	ldrb	r2, [r1, r2]
     458:	4282      	cmp	r2, r0
     45a:	d032      	beq.n	4c2 <keyboard_update+0x296>
		if (state) {
     45c:	2800      	cmp	r0, #0
     45e:	d026      	beq.n	4ae <keyboard_update+0x282>
     460:	2380      	movs	r3, #128	; 0x80
     462:	4a45      	ldr	r2, [pc, #276]	; (578 <keyboard_update+0x34c>)
     464:	189a      	adds	r2, r3, r2
     466:	6a12      	ldr	r2, [r2, #32]
			if (read_special_key_press(PIN_FN)) {
     468:	4213      	tst	r3, r2
     46a:	d104      	bne.n	476 <keyboard_update+0x24a>
				usb_set_kbd_key(HID_F8, state);
     46c:	2101      	movs	r1, #1
     46e:	2041      	movs	r0, #65	; 0x41
     470:	4b50      	ldr	r3, [pc, #320]	; (5b4 <keyboard_update+0x388>)
     472:	4798      	blx	r3
     474:	e022      	b.n	4bc <keyboard_update+0x290>
     476:	4b43      	ldr	r3, [pc, #268]	; (584 <keyboard_update+0x358>)
     478:	6a1b      	ldr	r3, [r3, #32]
			}
			else if (read_special_key_press(PIN_ALT)) {
     47a:	05db      	lsls	r3, r3, #23
     47c:	d412      	bmi.n	4a4 <keyboard_update+0x278>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, true);
     47e:	2101      	movs	r1, #1
     480:	2040      	movs	r0, #64	; 0x40
     482:	4d3f      	ldr	r5, [pc, #252]	; (580 <keyboard_update+0x354>)
     484:	47a8      	blx	r5
				usb_set_kbd_key(HID_8, true);
     486:	2101      	movs	r1, #1
     488:	2025      	movs	r0, #37	; 0x25
     48a:	4e4a      	ldr	r6, [pc, #296]	; (5b4 <keyboard_update+0x388>)
     48c:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     48e:	2096      	movs	r0, #150	; 0x96
     490:	0040      	lsls	r0, r0, #1
     492:	4b49      	ldr	r3, [pc, #292]	; (5b8 <keyboard_update+0x38c>)
     494:	4798      	blx	r3
				usb_set_kbd_key(HID_8, false);
     496:	2100      	movs	r1, #0
     498:	2025      	movs	r0, #37	; 0x25
     49a:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, false);
     49c:	2100      	movs	r1, #0
     49e:	2040      	movs	r0, #64	; 0x40
     4a0:	47a8      	blx	r5
     4a2:	e00b      	b.n	4bc <keyboard_update+0x290>
			}
			else {
				usb_set_kbd_key(HID_8, state);
     4a4:	2101      	movs	r1, #1
     4a6:	2025      	movs	r0, #37	; 0x25
     4a8:	4b42      	ldr	r3, [pc, #264]	; (5b4 <keyboard_update+0x388>)
     4aa:	4798      	blx	r3
     4ac:	e006      	b.n	4bc <keyboard_update+0x290>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_8, state);
     4ae:	2100      	movs	r1, #0
     4b0:	2025      	movs	r0, #37	; 0x25
     4b2:	4d40      	ldr	r5, [pc, #256]	; (5b4 <keyboard_update+0x388>)
     4b4:	47a8      	blx	r5
			usb_set_kbd_key(HID_F8, state);
     4b6:	2100      	movs	r1, #0
     4b8:	2041      	movs	r0, #65	; 0x41
     4ba:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     4bc:	232a      	movs	r3, #42	; 0x2a
     4be:	4a36      	ldr	r2, [pc, #216]	; (598 <keyboard_update+0x36c>)
     4c0:	54d4      	strb	r4, [r2, r3]
		}
		set_matrix_key_pressed(key_8, state);
	}
	
	// key_9
	state = matrix_get_state(key_9, true);
     4c2:	4b40      	ldr	r3, [pc, #256]	; (5c4 <keyboard_update+0x398>)
     4c4:	2201      	movs	r2, #1
     4c6:	6818      	ldr	r0, [r3, #0]
     4c8:	6859      	ldr	r1, [r3, #4]
     4ca:	4b32      	ldr	r3, [pc, #200]	; (594 <keyboard_update+0x368>)
     4cc:	4798      	blx	r3
     4ce:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     4d0:	2230      	movs	r2, #48	; 0x30
	if (state != get_matrix_key_pressed(key_9)) {
     4d2:	4931      	ldr	r1, [pc, #196]	; (598 <keyboard_update+0x36c>)
     4d4:	5c8a      	ldrb	r2, [r1, r2]
     4d6:	4282      	cmp	r2, r0
     4d8:	d032      	beq.n	540 <keyboard_update+0x314>
		if (state) {
     4da:	2800      	cmp	r0, #0
     4dc:	d026      	beq.n	52c <keyboard_update+0x300>
     4de:	2380      	movs	r3, #128	; 0x80
     4e0:	4a25      	ldr	r2, [pc, #148]	; (578 <keyboard_update+0x34c>)
     4e2:	189a      	adds	r2, r3, r2
     4e4:	6a12      	ldr	r2, [r2, #32]
			if (read_special_key_press(PIN_FN)) {
     4e6:	4213      	tst	r3, r2
     4e8:	d104      	bne.n	4f4 <keyboard_update+0x2c8>
				usb_set_kbd_key(HID_F9, state);
     4ea:	2101      	movs	r1, #1
     4ec:	2042      	movs	r0, #66	; 0x42
     4ee:	4b31      	ldr	r3, [pc, #196]	; (5b4 <keyboard_update+0x388>)
     4f0:	4798      	blx	r3
     4f2:	e022      	b.n	53a <keyboard_update+0x30e>
     4f4:	4b23      	ldr	r3, [pc, #140]	; (584 <keyboard_update+0x358>)
     4f6:	6a1b      	ldr	r3, [r3, #32]
			}
			else if (read_special_key_press(PIN_ALT)) {
     4f8:	05db      	lsls	r3, r3, #23
     4fa:	d412      	bmi.n	522 <keyboard_update+0x2f6>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, true);
     4fc:	2101      	movs	r1, #1
     4fe:	2040      	movs	r0, #64	; 0x40
     500:	4d1f      	ldr	r5, [pc, #124]	; (580 <keyboard_update+0x354>)
     502:	47a8      	blx	r5
				usb_set_kbd_key(HID_9, true);
     504:	2101      	movs	r1, #1
     506:	2026      	movs	r0, #38	; 0x26
     508:	4e2a      	ldr	r6, [pc, #168]	; (5b4 <keyboard_update+0x388>)
     50a:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     50c:	2096      	movs	r0, #150	; 0x96
     50e:	0040      	lsls	r0, r0, #1
     510:	4b29      	ldr	r3, [pc, #164]	; (5b8 <keyboard_update+0x38c>)
     512:	4798      	blx	r3
				usb_set_kbd_key(HID_9, false);
     514:	2100      	movs	r1, #0
     516:	2026      	movs	r0, #38	; 0x26
     518:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, false);
     51a:	2100      	movs	r1, #0
     51c:	2040      	movs	r0, #64	; 0x40
     51e:	47a8      	blx	r5
     520:	e00b      	b.n	53a <keyboard_update+0x30e>
			}
			else {
				usb_set_kbd_key(HID_9, state);
     522:	2101      	movs	r1, #1
     524:	2026      	movs	r0, #38	; 0x26
     526:	4b23      	ldr	r3, [pc, #140]	; (5b4 <keyboard_update+0x388>)
     528:	4798      	blx	r3
     52a:	e006      	b.n	53a <keyboard_update+0x30e>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_9, state);
     52c:	2100      	movs	r1, #0
     52e:	2026      	movs	r0, #38	; 0x26
     530:	4d20      	ldr	r5, [pc, #128]	; (5b4 <keyboard_update+0x388>)
     532:	47a8      	blx	r5
			usb_set_kbd_key(HID_F9, state);
     534:	2100      	movs	r1, #0
     536:	2042      	movs	r0, #66	; 0x42
     538:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     53a:	2330      	movs	r3, #48	; 0x30
     53c:	4a16      	ldr	r2, [pc, #88]	; (598 <keyboard_update+0x36c>)
     53e:	54d4      	strb	r4, [r2, r3]
		}
		set_matrix_key_pressed(key_9, state);
	}

	// key_0
	state = matrix_get_state(key_0, true);
     540:	4b21      	ldr	r3, [pc, #132]	; (5c8 <keyboard_update+0x39c>)
     542:	2201      	movs	r2, #1
     544:	6818      	ldr	r0, [r3, #0]
     546:	6859      	ldr	r1, [r3, #4]
     548:	4b12      	ldr	r3, [pc, #72]	; (594 <keyboard_update+0x368>)
     54a:	4798      	blx	r3
     54c:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     54e:	2236      	movs	r2, #54	; 0x36
	if (state != get_matrix_key_pressed(key_0)) {
     550:	4911      	ldr	r1, [pc, #68]	; (598 <keyboard_update+0x36c>)
     552:	5c8a      	ldrb	r2, [r1, r2]
     554:	4282      	cmp	r2, r0
     556:	d05f      	beq.n	618 <keyboard_update+0x3ec>
		if (state) {
     558:	2800      	cmp	r0, #0
     55a:	d053      	beq.n	604 <keyboard_update+0x3d8>
     55c:	2380      	movs	r3, #128	; 0x80
     55e:	4a06      	ldr	r2, [pc, #24]	; (578 <keyboard_update+0x34c>)
     560:	189a      	adds	r2, r3, r2
     562:	6a12      	ldr	r2, [r2, #32]
			if (read_special_key_press(PIN_FN)) {
     564:	4213      	tst	r3, r2
     566:	d131      	bne.n	5cc <keyboard_update+0x3a0>
				usb_set_kbd_key(HID_F10, state);
     568:	2101      	movs	r1, #1
     56a:	2043      	movs	r0, #67	; 0x43
     56c:	4b11      	ldr	r3, [pc, #68]	; (5b4 <keyboard_update+0x388>)
     56e:	4798      	blx	r3
     570:	e04f      	b.n	612 <keyboard_update+0x3e6>
     572:	46c0      	nop			; (mov r8, r8)
     574:	00001079 	.word	0x00001079
     578:	40002800 	.word	0x40002800
     57c:	200000fa 	.word	0x200000fa
     580:	00000115 	.word	0x00000115
     584:	40002880 	.word	0x40002880
     588:	200000f8 	.word	0x200000f8
     58c:	200000fb 	.word	0x200000fb
     590:	00004700 	.word	0x00004700
     594:	0000113d 	.word	0x0000113d
     598:	200001a4 	.word	0x200001a4
     59c:	00000175 	.word	0x00000175
     5a0:	00004708 	.word	0x00004708
     5a4:	00004710 	.word	0x00004710
     5a8:	00004718 	.word	0x00004718
     5ac:	00004720 	.word	0x00004720
     5b0:	00004728 	.word	0x00004728
     5b4:	00000145 	.word	0x00000145
     5b8:	00001221 	.word	0x00001221
     5bc:	00004730 	.word	0x00004730
     5c0:	00004738 	.word	0x00004738
     5c4:	00004740 	.word	0x00004740
     5c8:	000046f8 	.word	0x000046f8
     5cc:	4b50      	ldr	r3, [pc, #320]	; (710 <keyboard_update+0x4e4>)
     5ce:	6a1b      	ldr	r3, [r3, #32]
			}
			else if (read_special_key_press(PIN_ALT)) {
     5d0:	05db      	lsls	r3, r3, #23
     5d2:	d412      	bmi.n	5fa <keyboard_update+0x3ce>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, true);
     5d4:	2101      	movs	r1, #1
     5d6:	2040      	movs	r0, #64	; 0x40
     5d8:	4d4e      	ldr	r5, [pc, #312]	; (714 <keyboard_update+0x4e8>)
     5da:	47a8      	blx	r5
				usb_set_kbd_key(HID_0, true);
     5dc:	2101      	movs	r1, #1
     5de:	2027      	movs	r0, #39	; 0x27
     5e0:	4e4d      	ldr	r6, [pc, #308]	; (718 <keyboard_update+0x4ec>)
     5e2:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     5e4:	2096      	movs	r0, #150	; 0x96
     5e6:	0040      	lsls	r0, r0, #1
     5e8:	4b4c      	ldr	r3, [pc, #304]	; (71c <keyboard_update+0x4f0>)
     5ea:	4798      	blx	r3
				usb_set_kbd_key(HID_0, false);
     5ec:	2100      	movs	r1, #0
     5ee:	2027      	movs	r0, #39	; 0x27
     5f0:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, false);
     5f2:	2100      	movs	r1, #0
     5f4:	2040      	movs	r0, #64	; 0x40
     5f6:	47a8      	blx	r5
     5f8:	e00b      	b.n	612 <keyboard_update+0x3e6>
			}
			else {
				usb_set_kbd_key(HID_0, state);
     5fa:	2101      	movs	r1, #1
     5fc:	2027      	movs	r0, #39	; 0x27
     5fe:	4b46      	ldr	r3, [pc, #280]	; (718 <keyboard_update+0x4ec>)
     600:	4798      	blx	r3
     602:	e006      	b.n	612 <keyboard_update+0x3e6>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_0, state);
     604:	2100      	movs	r1, #0
     606:	2027      	movs	r0, #39	; 0x27
     608:	4d43      	ldr	r5, [pc, #268]	; (718 <keyboard_update+0x4ec>)
     60a:	47a8      	blx	r5
			usb_set_kbd_key(HID_F10, state);
     60c:	2100      	movs	r1, #0
     60e:	2043      	movs	r0, #67	; 0x43
     610:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     612:	2336      	movs	r3, #54	; 0x36
     614:	4a42      	ldr	r2, [pc, #264]	; (720 <keyboard_update+0x4f4>)
     616:	54d4      	strb	r4, [r2, r3]
		}
		set_matrix_key_pressed(key_0, state);
	}
	
	// key_TAB
	state = matrix_get_state(key_TAB, true);
     618:	4b42      	ldr	r3, [pc, #264]	; (724 <keyboard_update+0x4f8>)
     61a:	2201      	movs	r2, #1
     61c:	6818      	ldr	r0, [r3, #0]
     61e:	6859      	ldr	r1, [r3, #4]
     620:	4b41      	ldr	r3, [pc, #260]	; (728 <keyboard_update+0x4fc>)
     622:	4798      	blx	r3
     624:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     626:	4b3e      	ldr	r3, [pc, #248]	; (720 <keyboard_update+0x4f4>)
	if (state != get_matrix_key_pressed(key_TAB)) {
     628:	785b      	ldrb	r3, [r3, #1]
     62a:	4283      	cmp	r3, r0
     62c:	d006      	beq.n	63c <keyboard_update+0x410>
		interpret_special_key(state, HID_TAB, 0, 0);
     62e:	2300      	movs	r3, #0
     630:	2200      	movs	r2, #0
     632:	212b      	movs	r1, #43	; 0x2b
     634:	4d3d      	ldr	r5, [pc, #244]	; (72c <keyboard_update+0x500>)
     636:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     638:	4b39      	ldr	r3, [pc, #228]	; (720 <keyboard_update+0x4f4>)
     63a:	705c      	strb	r4, [r3, #1]
		set_matrix_key_pressed(key_TAB, state);
	}
	
	// key_Q
	state = matrix_get_state(key_Q, true);
     63c:	4b3c      	ldr	r3, [pc, #240]	; (730 <keyboard_update+0x504>)
     63e:	2201      	movs	r2, #1
     640:	6818      	ldr	r0, [r3, #0]
     642:	6859      	ldr	r1, [r3, #4]
     644:	4b38      	ldr	r3, [pc, #224]	; (728 <keyboard_update+0x4fc>)
     646:	4798      	blx	r3
     648:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     64a:	4a35      	ldr	r2, [pc, #212]	; (720 <keyboard_update+0x4f4>)
	if (state != get_matrix_key_pressed(key_Q)) {
     64c:	79d2      	ldrb	r2, [r2, #7]
     64e:	4282      	cmp	r2, r0
     650:	d023      	beq.n	69a <keyboard_update+0x46e>
		if (state) {
     652:	2800      	cmp	r0, #0
     654:	d01b      	beq.n	68e <keyboard_update+0x462>
     656:	4b2e      	ldr	r3, [pc, #184]	; (710 <keyboard_update+0x4e4>)
     658:	6a1b      	ldr	r3, [r3, #32]
			if (read_special_key_press(PIN_ALT)) {
     65a:	05db      	lsls	r3, r3, #23
     65c:	d412      	bmi.n	684 <keyboard_update+0x458>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, true);
     65e:	2101      	movs	r1, #1
     660:	2040      	movs	r0, #64	; 0x40
     662:	4d2c      	ldr	r5, [pc, #176]	; (714 <keyboard_update+0x4e8>)
     664:	47a8      	blx	r5
				usb_set_kbd_key(HID_Q, true);
     666:	2101      	movs	r1, #1
     668:	2014      	movs	r0, #20
     66a:	4e2b      	ldr	r6, [pc, #172]	; (718 <keyboard_update+0x4ec>)
     66c:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     66e:	2096      	movs	r0, #150	; 0x96
     670:	0040      	lsls	r0, r0, #1
     672:	4b2a      	ldr	r3, [pc, #168]	; (71c <keyboard_update+0x4f0>)
     674:	4798      	blx	r3
				usb_set_kbd_key(HID_Q, false);
     676:	2100      	movs	r1, #0
     678:	2014      	movs	r0, #20
     67a:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, false);
     67c:	2100      	movs	r1, #0
     67e:	2040      	movs	r0, #64	; 0x40
     680:	47a8      	blx	r5
     682:	e008      	b.n	696 <keyboard_update+0x46a>
			}
			else {
				usb_set_kbd_key(HID_Q, state);
     684:	2101      	movs	r1, #1
     686:	2014      	movs	r0, #20
     688:	4b23      	ldr	r3, [pc, #140]	; (718 <keyboard_update+0x4ec>)
     68a:	4798      	blx	r3
     68c:	e003      	b.n	696 <keyboard_update+0x46a>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_Q, state);
     68e:	2100      	movs	r1, #0
     690:	2014      	movs	r0, #20
     692:	4b21      	ldr	r3, [pc, #132]	; (718 <keyboard_update+0x4ec>)
     694:	4798      	blx	r3
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     696:	4b22      	ldr	r3, [pc, #136]	; (720 <keyboard_update+0x4f4>)
     698:	71dc      	strb	r4, [r3, #7]
		}
		set_matrix_key_pressed(key_Q, state);
	}

	// key_W
	state = matrix_get_state(key_W, true);
     69a:	4b26      	ldr	r3, [pc, #152]	; (734 <keyboard_update+0x508>)
     69c:	2201      	movs	r2, #1
     69e:	6818      	ldr	r0, [r3, #0]
     6a0:	6859      	ldr	r1, [r3, #4]
     6a2:	4b21      	ldr	r3, [pc, #132]	; (728 <keyboard_update+0x4fc>)
     6a4:	4798      	blx	r3
     6a6:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     6a8:	4b1d      	ldr	r3, [pc, #116]	; (720 <keyboard_update+0x4f4>)
	if (state != get_matrix_key_pressed(key_W)) {
     6aa:	7b5b      	ldrb	r3, [r3, #13]
     6ac:	4283      	cmp	r3, r0
     6ae:	d006      	beq.n	6be <keyboard_update+0x492>
		interpret_special_key(state, HID_W, 0, 0);
     6b0:	2300      	movs	r3, #0
     6b2:	2200      	movs	r2, #0
     6b4:	211a      	movs	r1, #26
     6b6:	4d1d      	ldr	r5, [pc, #116]	; (72c <keyboard_update+0x500>)
     6b8:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     6ba:	4b19      	ldr	r3, [pc, #100]	; (720 <keyboard_update+0x4f4>)
     6bc:	735c      	strb	r4, [r3, #13]
		set_matrix_key_pressed(key_W, state);
	}
	
	// key_E
	state = matrix_get_state(key_E, true);
     6be:	4b1e      	ldr	r3, [pc, #120]	; (738 <keyboard_update+0x50c>)
     6c0:	2201      	movs	r2, #1
     6c2:	6818      	ldr	r0, [r3, #0]
     6c4:	6859      	ldr	r1, [r3, #4]
     6c6:	4b18      	ldr	r3, [pc, #96]	; (728 <keyboard_update+0x4fc>)
     6c8:	4798      	blx	r3
     6ca:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     6cc:	4a14      	ldr	r2, [pc, #80]	; (720 <keyboard_update+0x4f4>)
	if (state != get_matrix_key_pressed(key_E)) {
     6ce:	7cd2      	ldrb	r2, [r2, #19]
     6d0:	4282      	cmp	r2, r0
     6d2:	d039      	beq.n	748 <keyboard_update+0x51c>
		if (state) {
     6d4:	2800      	cmp	r0, #0
     6d6:	d031      	beq.n	73c <keyboard_update+0x510>
     6d8:	4b0d      	ldr	r3, [pc, #52]	; (710 <keyboard_update+0x4e4>)
     6da:	6a1b      	ldr	r3, [r3, #32]
			if (read_special_key_press(PIN_ALT)) {
     6dc:	05db      	lsls	r3, r3, #23
     6de:	d412      	bmi.n	706 <keyboard_update+0x4da>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, true);
     6e0:	2101      	movs	r1, #1
     6e2:	2040      	movs	r0, #64	; 0x40
     6e4:	4d0b      	ldr	r5, [pc, #44]	; (714 <keyboard_update+0x4e8>)
     6e6:	47a8      	blx	r5
				usb_set_kbd_key(HID_E, true);
     6e8:	2101      	movs	r1, #1
     6ea:	2008      	movs	r0, #8
     6ec:	4e0a      	ldr	r6, [pc, #40]	; (718 <keyboard_update+0x4ec>)
     6ee:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     6f0:	2096      	movs	r0, #150	; 0x96
     6f2:	0040      	lsls	r0, r0, #1
     6f4:	4b09      	ldr	r3, [pc, #36]	; (71c <keyboard_update+0x4f0>)
     6f6:	4798      	blx	r3
				usb_set_kbd_key(HID_E, false);
     6f8:	2100      	movs	r1, #0
     6fa:	2008      	movs	r0, #8
     6fc:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, false);
     6fe:	2100      	movs	r1, #0
     700:	2040      	movs	r0, #64	; 0x40
     702:	47a8      	blx	r5
     704:	e01e      	b.n	744 <keyboard_update+0x518>
			}
			else {
				usb_set_kbd_key(HID_E, state);
     706:	2101      	movs	r1, #1
     708:	2008      	movs	r0, #8
     70a:	4b03      	ldr	r3, [pc, #12]	; (718 <keyboard_update+0x4ec>)
     70c:	4798      	blx	r3
     70e:	e019      	b.n	744 <keyboard_update+0x518>
     710:	40002880 	.word	0x40002880
     714:	00000115 	.word	0x00000115
     718:	00000145 	.word	0x00000145
     71c:	00001221 	.word	0x00001221
     720:	200001a4 	.word	0x200001a4
     724:	00004838 	.word	0x00004838
     728:	0000113d 	.word	0x0000113d
     72c:	00000175 	.word	0x00000175
     730:	00004800 	.word	0x00004800
     734:	00004858 	.word	0x00004858
     738:	00004790 	.word	0x00004790
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_E, state);
     73c:	2100      	movs	r1, #0
     73e:	2008      	movs	r0, #8
     740:	4bdf      	ldr	r3, [pc, #892]	; (ac0 <STACK_SIZE+0x2c0>)
     742:	4798      	blx	r3
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     744:	4bdf      	ldr	r3, [pc, #892]	; (ac4 <STACK_SIZE+0x2c4>)
     746:	74dc      	strb	r4, [r3, #19]
		}
		set_matrix_key_pressed(key_E, state);
	}
	
	// key_R
	state = matrix_get_state(key_R, true);
     748:	4bdf      	ldr	r3, [pc, #892]	; (ac8 <STACK_SIZE+0x2c8>)
     74a:	2201      	movs	r2, #1
     74c:	6818      	ldr	r0, [r3, #0]
     74e:	6859      	ldr	r1, [r3, #4]
     750:	4bde      	ldr	r3, [pc, #888]	; (acc <STACK_SIZE+0x2cc>)
     752:	4798      	blx	r3
     754:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     756:	4bdb      	ldr	r3, [pc, #876]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_R)) {
     758:	7e5b      	ldrb	r3, [r3, #25]
     75a:	4283      	cmp	r3, r0
     75c:	d006      	beq.n	76c <keyboard_update+0x540>
		interpret_special_key(state, HID_R, 0, 0);
     75e:	2300      	movs	r3, #0
     760:	2200      	movs	r2, #0
     762:	2115      	movs	r1, #21
     764:	4dda      	ldr	r5, [pc, #872]	; (ad0 <STACK_SIZE+0x2d0>)
     766:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     768:	4bd6      	ldr	r3, [pc, #856]	; (ac4 <STACK_SIZE+0x2c4>)
     76a:	765c      	strb	r4, [r3, #25]
		set_matrix_key_pressed(key_R, state);
	}
	
	// key_T
	state = matrix_get_state(key_T, true);
     76c:	4bd9      	ldr	r3, [pc, #868]	; (ad4 <STACK_SIZE+0x2d4>)
     76e:	2201      	movs	r2, #1
     770:	6818      	ldr	r0, [r3, #0]
     772:	6859      	ldr	r1, [r3, #4]
     774:	4bd5      	ldr	r3, [pc, #852]	; (acc <STACK_SIZE+0x2cc>)
     776:	4798      	blx	r3
     778:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     77a:	4bd2      	ldr	r3, [pc, #840]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_T)) {
     77c:	7fdb      	ldrb	r3, [r3, #31]
     77e:	4283      	cmp	r3, r0
     780:	d006      	beq.n	790 <keyboard_update+0x564>
		interpret_special_key(state, HID_T, 0, 0);
     782:	2300      	movs	r3, #0
     784:	2200      	movs	r2, #0
     786:	2117      	movs	r1, #23
     788:	4dd1      	ldr	r5, [pc, #836]	; (ad0 <STACK_SIZE+0x2d0>)
     78a:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     78c:	4bcd      	ldr	r3, [pc, #820]	; (ac4 <STACK_SIZE+0x2c4>)
     78e:	77dc      	strb	r4, [r3, #31]
		set_matrix_key_pressed(key_T, state);
	}
	
	// key_Z
	state = matrix_get_state(key_Z, true);
     790:	4bd1      	ldr	r3, [pc, #836]	; (ad8 <STACK_SIZE+0x2d8>)
     792:	2201      	movs	r2, #1
     794:	6818      	ldr	r0, [r3, #0]
     796:	6859      	ldr	r1, [r3, #4]
     798:	4bcc      	ldr	r3, [pc, #816]	; (acc <STACK_SIZE+0x2cc>)
     79a:	4798      	blx	r3
     79c:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     79e:	2325      	movs	r3, #37	; 0x25
	if (state != get_matrix_key_pressed(key_Z)) {
     7a0:	4ac8      	ldr	r2, [pc, #800]	; (ac4 <STACK_SIZE+0x2c4>)
     7a2:	5cd3      	ldrb	r3, [r2, r3]
     7a4:	4283      	cmp	r3, r0
     7a6:	d007      	beq.n	7b8 <keyboard_update+0x58c>
		interpret_special_key(state, HID_Y, 0, 0);
     7a8:	2300      	movs	r3, #0
     7aa:	2200      	movs	r2, #0
     7ac:	211c      	movs	r1, #28
     7ae:	4dc8      	ldr	r5, [pc, #800]	; (ad0 <STACK_SIZE+0x2d0>)
     7b0:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     7b2:	2325      	movs	r3, #37	; 0x25
     7b4:	4ac3      	ldr	r2, [pc, #780]	; (ac4 <STACK_SIZE+0x2c4>)
     7b6:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_Z, state);
	}
	
	// key_U
	state = matrix_get_state(key_U, true);
     7b8:	4bc8      	ldr	r3, [pc, #800]	; (adc <STACK_SIZE+0x2dc>)
     7ba:	2201      	movs	r2, #1
     7bc:	6818      	ldr	r0, [r3, #0]
     7be:	6859      	ldr	r1, [r3, #4]
     7c0:	4bc2      	ldr	r3, [pc, #776]	; (acc <STACK_SIZE+0x2cc>)
     7c2:	4798      	blx	r3
     7c4:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     7c6:	232b      	movs	r3, #43	; 0x2b
	if (state != get_matrix_key_pressed(key_U)) {
     7c8:	4abe      	ldr	r2, [pc, #760]	; (ac4 <STACK_SIZE+0x2c4>)
     7ca:	5cd3      	ldrb	r3, [r2, r3]
     7cc:	4283      	cmp	r3, r0
     7ce:	d007      	beq.n	7e0 <keyboard_update+0x5b4>
		interpret_special_key(state, HID_U, 0, HID_OPEN_BRACKET);
     7d0:	232f      	movs	r3, #47	; 0x2f
     7d2:	2200      	movs	r2, #0
     7d4:	2118      	movs	r1, #24
     7d6:	4dbe      	ldr	r5, [pc, #760]	; (ad0 <STACK_SIZE+0x2d0>)
     7d8:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     7da:	232b      	movs	r3, #43	; 0x2b
     7dc:	4ab9      	ldr	r2, [pc, #740]	; (ac4 <STACK_SIZE+0x2c4>)
     7de:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_U, state);
	}
	
	// key_I
	state = matrix_get_state(key_I, true);
     7e0:	4bbf      	ldr	r3, [pc, #764]	; (ae0 <STACK_SIZE+0x2e0>)
     7e2:	2201      	movs	r2, #1
     7e4:	6818      	ldr	r0, [r3, #0]
     7e6:	6859      	ldr	r1, [r3, #4]
     7e8:	4bb8      	ldr	r3, [pc, #736]	; (acc <STACK_SIZE+0x2cc>)
     7ea:	4798      	blx	r3
     7ec:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     7ee:	2331      	movs	r3, #49	; 0x31
	if (state != get_matrix_key_pressed(key_I)) {
     7f0:	4ab4      	ldr	r2, [pc, #720]	; (ac4 <STACK_SIZE+0x2c4>)
     7f2:	5cd3      	ldrb	r3, [r2, r3]
     7f4:	4283      	cmp	r3, r0
     7f6:	d007      	beq.n	808 <STACK_SIZE+0x8>
		interpret_special_key(state, HID_I, 0, 0);
     7f8:	2300      	movs	r3, #0
     7fa:	2200      	movs	r2, #0
     7fc:	210c      	movs	r1, #12
     7fe:	4db4      	ldr	r5, [pc, #720]	; (ad0 <STACK_SIZE+0x2d0>)
     800:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     802:	2331      	movs	r3, #49	; 0x31
     804:	4aaf      	ldr	r2, [pc, #700]	; (ac4 <STACK_SIZE+0x2c4>)
     806:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_I, state);
	}

	// key_O
	state = matrix_get_state(key_O, true);
     808:	4bb6      	ldr	r3, [pc, #728]	; (ae4 <STACK_SIZE+0x2e4>)
     80a:	2201      	movs	r2, #1
     80c:	6818      	ldr	r0, [r3, #0]
     80e:	6859      	ldr	r1, [r3, #4]
     810:	4bae      	ldr	r3, [pc, #696]	; (acc <STACK_SIZE+0x2cc>)
     812:	4798      	blx	r3
     814:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     816:	2337      	movs	r3, #55	; 0x37
	if (state != get_matrix_key_pressed(key_O)) {
     818:	4aaa      	ldr	r2, [pc, #680]	; (ac4 <STACK_SIZE+0x2c4>)
     81a:	5cd3      	ldrb	r3, [r2, r3]
     81c:	4283      	cmp	r3, r0
     81e:	d007      	beq.n	830 <STACK_SIZE+0x30>
		interpret_special_key(state, HID_O, 0, HID_CLOSE_BRACKET);
     820:	2330      	movs	r3, #48	; 0x30
     822:	2200      	movs	r2, #0
     824:	2112      	movs	r1, #18
     826:	4daa      	ldr	r5, [pc, #680]	; (ad0 <STACK_SIZE+0x2d0>)
     828:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     82a:	2337      	movs	r3, #55	; 0x37
     82c:	4aa5      	ldr	r2, [pc, #660]	; (ac4 <STACK_SIZE+0x2c4>)
     82e:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_O, state);
	}
	
	// key_P
	state = matrix_get_state(key_P, true);
     830:	4bad      	ldr	r3, [pc, #692]	; (ae8 <STACK_SIZE+0x2e8>)
     832:	2201      	movs	r2, #1
     834:	6818      	ldr	r0, [r3, #0]
     836:	6859      	ldr	r1, [r3, #4]
     838:	4ba4      	ldr	r3, [pc, #656]	; (acc <STACK_SIZE+0x2cc>)
     83a:	4798      	blx	r3
     83c:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     83e:	233d      	movs	r3, #61	; 0x3d
	if (state != get_matrix_key_pressed(key_P)) {
     840:	4aa0      	ldr	r2, [pc, #640]	; (ac4 <STACK_SIZE+0x2c4>)
     842:	5cd3      	ldrb	r3, [r2, r3]
     844:	4283      	cmp	r3, r0
     846:	d007      	beq.n	858 <STACK_SIZE+0x58>
		interpret_special_key(state, HID_P, 0, HID_BACKSLASH);
     848:	2331      	movs	r3, #49	; 0x31
     84a:	2200      	movs	r2, #0
     84c:	2113      	movs	r1, #19
     84e:	4da0      	ldr	r5, [pc, #640]	; (ad0 <STACK_SIZE+0x2d0>)
     850:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     852:	233d      	movs	r3, #61	; 0x3d
     854:	4a9b      	ldr	r2, [pc, #620]	; (ac4 <STACK_SIZE+0x2c4>)
     856:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_P, state);
	}
	
	// key_CPSLCK
	state = matrix_get_state(key_CPSLCK, true);
     858:	4ba4      	ldr	r3, [pc, #656]	; (aec <STACK_SIZE+0x2ec>)
     85a:	2201      	movs	r2, #1
     85c:	6818      	ldr	r0, [r3, #0]
     85e:	6859      	ldr	r1, [r3, #4]
     860:	4b9a      	ldr	r3, [pc, #616]	; (acc <STACK_SIZE+0x2cc>)
     862:	4798      	blx	r3
     864:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     866:	4b97      	ldr	r3, [pc, #604]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_CPSLCK)) {
     868:	789b      	ldrb	r3, [r3, #2]
     86a:	4283      	cmp	r3, r0
     86c:	d006      	beq.n	87c <STACK_SIZE+0x7c>
		interpret_special_key(state, HID_CAPS_LOCK, 0, 0);
     86e:	2300      	movs	r3, #0
     870:	2200      	movs	r2, #0
     872:	2139      	movs	r1, #57	; 0x39
     874:	4d96      	ldr	r5, [pc, #600]	; (ad0 <STACK_SIZE+0x2d0>)
     876:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     878:	4b92      	ldr	r3, [pc, #584]	; (ac4 <STACK_SIZE+0x2c4>)
     87a:	709c      	strb	r4, [r3, #2]
		set_matrix_key_pressed(key_CPSLCK, state);
	}

	// key_A
	state = matrix_get_state(key_A, true);
     87c:	4b9c      	ldr	r3, [pc, #624]	; (af0 <STACK_SIZE+0x2f0>)
     87e:	2201      	movs	r2, #1
     880:	6818      	ldr	r0, [r3, #0]
     882:	6859      	ldr	r1, [r3, #4]
     884:	4b91      	ldr	r3, [pc, #580]	; (acc <STACK_SIZE+0x2cc>)
     886:	4798      	blx	r3
     888:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     88a:	4b8e      	ldr	r3, [pc, #568]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_A)) {
     88c:	7a1b      	ldrb	r3, [r3, #8]
     88e:	4283      	cmp	r3, r0
     890:	d006      	beq.n	8a0 <STACK_SIZE+0xa0>
		interpret_special_key(state, HID_A, 0, HID_QUOTE);
     892:	2334      	movs	r3, #52	; 0x34
     894:	2200      	movs	r2, #0
     896:	2104      	movs	r1, #4
     898:	4d8d      	ldr	r5, [pc, #564]	; (ad0 <STACK_SIZE+0x2d0>)
     89a:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     89c:	4b89      	ldr	r3, [pc, #548]	; (ac4 <STACK_SIZE+0x2c4>)
     89e:	721c      	strb	r4, [r3, #8]
		set_matrix_key_pressed(key_A, state);
	}
	
	// key_S
	state = matrix_get_state(key_S, true);
     8a0:	4b94      	ldr	r3, [pc, #592]	; (af4 <STACK_SIZE+0x2f4>)
     8a2:	2201      	movs	r2, #1
     8a4:	6818      	ldr	r0, [r3, #0]
     8a6:	6859      	ldr	r1, [r3, #4]
     8a8:	4b88      	ldr	r3, [pc, #544]	; (acc <STACK_SIZE+0x2cc>)
     8aa:	4798      	blx	r3
     8ac:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     8ae:	4b85      	ldr	r3, [pc, #532]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_S)) {
     8b0:	7b9b      	ldrb	r3, [r3, #14]
     8b2:	4283      	cmp	r3, r0
     8b4:	d006      	beq.n	8c4 <STACK_SIZE+0xc4>
		interpret_special_key(state, HID_S, 0, 0);
     8b6:	2300      	movs	r3, #0
     8b8:	2200      	movs	r2, #0
     8ba:	2116      	movs	r1, #22
     8bc:	4d84      	ldr	r5, [pc, #528]	; (ad0 <STACK_SIZE+0x2d0>)
     8be:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     8c0:	4b80      	ldr	r3, [pc, #512]	; (ac4 <STACK_SIZE+0x2c4>)
     8c2:	739c      	strb	r4, [r3, #14]
		set_matrix_key_pressed(key_S, state);
	}
	
	// key_D
	state = matrix_get_state(key_D, true);
     8c4:	4b8c      	ldr	r3, [pc, #560]	; (af8 <STACK_SIZE+0x2f8>)
     8c6:	2201      	movs	r2, #1
     8c8:	6818      	ldr	r0, [r3, #0]
     8ca:	6859      	ldr	r1, [r3, #4]
     8cc:	4b7f      	ldr	r3, [pc, #508]	; (acc <STACK_SIZE+0x2cc>)
     8ce:	4798      	blx	r3
     8d0:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     8d2:	4b7c      	ldr	r3, [pc, #496]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_D)) {
     8d4:	7d1b      	ldrb	r3, [r3, #20]
     8d6:	4283      	cmp	r3, r0
     8d8:	d006      	beq.n	8e8 <STACK_SIZE+0xe8>
		interpret_special_key(state, HID_D, 0, 0);
     8da:	2300      	movs	r3, #0
     8dc:	2200      	movs	r2, #0
     8de:	2107      	movs	r1, #7
     8e0:	4d7b      	ldr	r5, [pc, #492]	; (ad0 <STACK_SIZE+0x2d0>)
     8e2:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     8e4:	4b77      	ldr	r3, [pc, #476]	; (ac4 <STACK_SIZE+0x2c4>)
     8e6:	751c      	strb	r4, [r3, #20]
		set_matrix_key_pressed(key_D, state);
	}
	
	// key_F
	state = matrix_get_state(key_F, true);
     8e8:	4b84      	ldr	r3, [pc, #528]	; (afc <STACK_SIZE+0x2fc>)
     8ea:	2201      	movs	r2, #1
     8ec:	6818      	ldr	r0, [r3, #0]
     8ee:	6859      	ldr	r1, [r3, #4]
     8f0:	4b76      	ldr	r3, [pc, #472]	; (acc <STACK_SIZE+0x2cc>)
     8f2:	4798      	blx	r3
     8f4:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     8f6:	4b73      	ldr	r3, [pc, #460]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_F)) {
     8f8:	7e9b      	ldrb	r3, [r3, #26]
     8fa:	4283      	cmp	r3, r0
     8fc:	d006      	beq.n	90c <STACK_SIZE+0x10c>
		interpret_special_key(state, HID_F, 0, 0);
     8fe:	2300      	movs	r3, #0
     900:	2200      	movs	r2, #0
     902:	2109      	movs	r1, #9
     904:	4d72      	ldr	r5, [pc, #456]	; (ad0 <STACK_SIZE+0x2d0>)
     906:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     908:	4b6e      	ldr	r3, [pc, #440]	; (ac4 <STACK_SIZE+0x2c4>)
     90a:	769c      	strb	r4, [r3, #26]
		set_matrix_key_pressed(key_F, state);
	}
	
	// key_G
	state = matrix_get_state(key_G, true);
     90c:	4b7c      	ldr	r3, [pc, #496]	; (b00 <STACK_SIZE+0x300>)
     90e:	2201      	movs	r2, #1
     910:	6818      	ldr	r0, [r3, #0]
     912:	6859      	ldr	r1, [r3, #4]
     914:	4b6d      	ldr	r3, [pc, #436]	; (acc <STACK_SIZE+0x2cc>)
     916:	4798      	blx	r3
     918:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     91a:	2320      	movs	r3, #32
	if (state != get_matrix_key_pressed(key_G)) {
     91c:	4a69      	ldr	r2, [pc, #420]	; (ac4 <STACK_SIZE+0x2c4>)
     91e:	5cd3      	ldrb	r3, [r2, r3]
     920:	4283      	cmp	r3, r0
     922:	d007      	beq.n	934 <STACK_SIZE+0x134>
		interpret_special_key(state, HID_G, 0, 0);
     924:	2300      	movs	r3, #0
     926:	2200      	movs	r2, #0
     928:	210a      	movs	r1, #10
     92a:	4d69      	ldr	r5, [pc, #420]	; (ad0 <STACK_SIZE+0x2d0>)
     92c:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     92e:	2320      	movs	r3, #32
     930:	4a64      	ldr	r2, [pc, #400]	; (ac4 <STACK_SIZE+0x2c4>)
     932:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_G, state);
	}

	// key_H
	state = matrix_get_state(key_H, true);
     934:	4b73      	ldr	r3, [pc, #460]	; (b04 <STACK_SIZE+0x304>)
     936:	2201      	movs	r2, #1
     938:	6818      	ldr	r0, [r3, #0]
     93a:	6859      	ldr	r1, [r3, #4]
     93c:	4b63      	ldr	r3, [pc, #396]	; (acc <STACK_SIZE+0x2cc>)
     93e:	4798      	blx	r3
     940:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     942:	2326      	movs	r3, #38	; 0x26
	if (state != get_matrix_key_pressed(key_H)) {
     944:	4a5f      	ldr	r2, [pc, #380]	; (ac4 <STACK_SIZE+0x2c4>)
     946:	5cd3      	ldrb	r3, [r2, r3]
     948:	4283      	cmp	r3, r0
     94a:	d007      	beq.n	95c <STACK_SIZE+0x15c>
		interpret_special_key(state, HID_H, 0, 0);
     94c:	2300      	movs	r3, #0
     94e:	2200      	movs	r2, #0
     950:	210b      	movs	r1, #11
     952:	4d5f      	ldr	r5, [pc, #380]	; (ad0 <STACK_SIZE+0x2d0>)
     954:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     956:	2326      	movs	r3, #38	; 0x26
     958:	4a5a      	ldr	r2, [pc, #360]	; (ac4 <STACK_SIZE+0x2c4>)
     95a:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_H, state);
	}

	// key_J
	state = matrix_get_state(key_J, true);
     95c:	4b6a      	ldr	r3, [pc, #424]	; (b08 <STACK_SIZE+0x308>)
     95e:	2201      	movs	r2, #1
     960:	6818      	ldr	r0, [r3, #0]
     962:	6859      	ldr	r1, [r3, #4]
     964:	4b59      	ldr	r3, [pc, #356]	; (acc <STACK_SIZE+0x2cc>)
     966:	4798      	blx	r3
     968:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     96a:	232c      	movs	r3, #44	; 0x2c
	if (state != get_matrix_key_pressed(key_J)) {
     96c:	4a55      	ldr	r2, [pc, #340]	; (ac4 <STACK_SIZE+0x2c4>)
     96e:	5cd3      	ldrb	r3, [r2, r3]
     970:	4283      	cmp	r3, r0
     972:	d007      	beq.n	984 <STACK_SIZE+0x184>
		interpret_special_key(state, HID_J, 0, HID_CLOSE_BRACKET);
     974:	2330      	movs	r3, #48	; 0x30
     976:	2200      	movs	r2, #0
     978:	210d      	movs	r1, #13
     97a:	4d55      	ldr	r5, [pc, #340]	; (ad0 <STACK_SIZE+0x2d0>)
     97c:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     97e:	232c      	movs	r3, #44	; 0x2c
     980:	4a50      	ldr	r2, [pc, #320]	; (ac4 <STACK_SIZE+0x2c4>)
     982:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_J, state);
	}

	// key_K
	state = matrix_get_state(key_K, true);
     984:	4b61      	ldr	r3, [pc, #388]	; (b0c <STACK_SIZE+0x30c>)
     986:	2201      	movs	r2, #1
     988:	6818      	ldr	r0, [r3, #0]
     98a:	6859      	ldr	r1, [r3, #4]
     98c:	4b4f      	ldr	r3, [pc, #316]	; (acc <STACK_SIZE+0x2cc>)
     98e:	4798      	blx	r3
     990:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     992:	2232      	movs	r2, #50	; 0x32
	if (state != get_matrix_key_pressed(key_K)) {
     994:	494b      	ldr	r1, [pc, #300]	; (ac4 <STACK_SIZE+0x2c4>)
     996:	5c8a      	ldrb	r2, [r1, r2]
     998:	4282      	cmp	r2, r0
     99a:	d024      	beq.n	9e6 <STACK_SIZE+0x1e6>
		if (state) {
     99c:	2800      	cmp	r0, #0
     99e:	d01b      	beq.n	9d8 <STACK_SIZE+0x1d8>
     9a0:	4b5b      	ldr	r3, [pc, #364]	; (b10 <STACK_SIZE+0x310>)
     9a2:	6a1b      	ldr	r3, [r3, #32]
			if (read_special_key_press(PIN_ALT)) {
     9a4:	05db      	lsls	r3, r3, #23
     9a6:	d412      	bmi.n	9ce <STACK_SIZE+0x1ce>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, true);
     9a8:	2101      	movs	r1, #1
     9aa:	2020      	movs	r0, #32
     9ac:	4d59      	ldr	r5, [pc, #356]	; (b14 <STACK_SIZE+0x314>)
     9ae:	47a8      	blx	r5
				usb_set_kbd_key(HID_CLOSE_BRACKET, true);
     9b0:	2101      	movs	r1, #1
     9b2:	2030      	movs	r0, #48	; 0x30
     9b4:	4e42      	ldr	r6, [pc, #264]	; (ac0 <STACK_SIZE+0x2c0>)
     9b6:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     9b8:	2096      	movs	r0, #150	; 0x96
     9ba:	0040      	lsls	r0, r0, #1
     9bc:	4b56      	ldr	r3, [pc, #344]	; (b18 <STACK_SIZE+0x318>)
     9be:	4798      	blx	r3
				usb_set_kbd_key(HID_CLOSE_BRACKET, false);
     9c0:	2100      	movs	r1, #0
     9c2:	2030      	movs	r0, #48	; 0x30
     9c4:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, false);
     9c6:	2100      	movs	r1, #0
     9c8:	2020      	movs	r0, #32
     9ca:	47a8      	blx	r5
     9cc:	e008      	b.n	9e0 <STACK_SIZE+0x1e0>
			}
			else {
				usb_set_kbd_key(HID_K, state);
     9ce:	2101      	movs	r1, #1
     9d0:	200e      	movs	r0, #14
     9d2:	4b3b      	ldr	r3, [pc, #236]	; (ac0 <STACK_SIZE+0x2c0>)
     9d4:	4798      	blx	r3
     9d6:	e003      	b.n	9e0 <STACK_SIZE+0x1e0>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_K, state);
     9d8:	2100      	movs	r1, #0
     9da:	200e      	movs	r0, #14
     9dc:	4b38      	ldr	r3, [pc, #224]	; (ac0 <STACK_SIZE+0x2c0>)
     9de:	4798      	blx	r3
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     9e0:	2332      	movs	r3, #50	; 0x32
     9e2:	4a38      	ldr	r2, [pc, #224]	; (ac4 <STACK_SIZE+0x2c4>)
     9e4:	54d4      	strb	r4, [r2, r3]
		}
		set_matrix_key_pressed(key_K, state);
	}

	// key_L
	state = matrix_get_state(key_L, true);
     9e6:	4b4d      	ldr	r3, [pc, #308]	; (b1c <STACK_SIZE+0x31c>)
     9e8:	2201      	movs	r2, #1
     9ea:	6818      	ldr	r0, [r3, #0]
     9ec:	6859      	ldr	r1, [r3, #4]
     9ee:	4b37      	ldr	r3, [pc, #220]	; (acc <STACK_SIZE+0x2cc>)
     9f0:	4798      	blx	r3
     9f2:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     9f4:	2238      	movs	r2, #56	; 0x38
	if (state != get_matrix_key_pressed(key_L)) {
     9f6:	4933      	ldr	r1, [pc, #204]	; (ac4 <STACK_SIZE+0x2c4>)
     9f8:	5c8a      	ldrb	r2, [r1, r2]
     9fa:	4282      	cmp	r2, r0
     9fc:	d024      	beq.n	a48 <STACK_SIZE+0x248>
		if (state) {
     9fe:	2800      	cmp	r0, #0
     a00:	d01b      	beq.n	a3a <STACK_SIZE+0x23a>
     a02:	4b43      	ldr	r3, [pc, #268]	; (b10 <STACK_SIZE+0x310>)
     a04:	6a1b      	ldr	r3, [r3, #32]
			if (read_special_key_press(PIN_ALT)) {
     a06:	05db      	lsls	r3, r3, #23
     a08:	d412      	bmi.n	a30 <STACK_SIZE+0x230>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, true);
     a0a:	2101      	movs	r1, #1
     a0c:	2020      	movs	r0, #32
     a0e:	4d41      	ldr	r5, [pc, #260]	; (b14 <STACK_SIZE+0x314>)
     a10:	47a8      	blx	r5
				usb_set_kbd_key(HID_BACKSLASH, true);
     a12:	2101      	movs	r1, #1
     a14:	2031      	movs	r0, #49	; 0x31
     a16:	4e2a      	ldr	r6, [pc, #168]	; (ac0 <STACK_SIZE+0x2c0>)
     a18:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     a1a:	2096      	movs	r0, #150	; 0x96
     a1c:	0040      	lsls	r0, r0, #1
     a1e:	4b3e      	ldr	r3, [pc, #248]	; (b18 <STACK_SIZE+0x318>)
     a20:	4798      	blx	r3
				usb_set_kbd_key(HID_BACKSLASH, false);
     a22:	2100      	movs	r1, #0
     a24:	2031      	movs	r0, #49	; 0x31
     a26:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, false);
     a28:	2100      	movs	r1, #0
     a2a:	2020      	movs	r0, #32
     a2c:	47a8      	blx	r5
     a2e:	e008      	b.n	a42 <STACK_SIZE+0x242>
			}
			else {
				usb_set_kbd_key(HID_L, state);
     a30:	2101      	movs	r1, #1
     a32:	200f      	movs	r0, #15
     a34:	4b22      	ldr	r3, [pc, #136]	; (ac0 <STACK_SIZE+0x2c0>)
     a36:	4798      	blx	r3
     a38:	e003      	b.n	a42 <STACK_SIZE+0x242>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_L, state);
     a3a:	2100      	movs	r1, #0
     a3c:	200f      	movs	r0, #15
     a3e:	4b20      	ldr	r3, [pc, #128]	; (ac0 <STACK_SIZE+0x2c0>)
     a40:	4798      	blx	r3
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     a42:	2338      	movs	r3, #56	; 0x38
     a44:	4a1f      	ldr	r2, [pc, #124]	; (ac4 <STACK_SIZE+0x2c4>)
     a46:	54d4      	strb	r4, [r2, r3]
		}
		set_matrix_key_pressed(key_L, state);
	}
	
	// key_Y
	state = matrix_get_state(key_Y, true);
     a48:	4b35      	ldr	r3, [pc, #212]	; (b20 <STACK_SIZE+0x320>)
     a4a:	2201      	movs	r2, #1
     a4c:	6818      	ldr	r0, [r3, #0]
     a4e:	6859      	ldr	r1, [r3, #4]
     a50:	4b1e      	ldr	r3, [pc, #120]	; (acc <STACK_SIZE+0x2cc>)
     a52:	4798      	blx	r3
     a54:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     a56:	4b1b      	ldr	r3, [pc, #108]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_Y)) {
     a58:	7a5b      	ldrb	r3, [r3, #9]
     a5a:	4283      	cmp	r3, r0
     a5c:	d006      	beq.n	a6c <STACK_SIZE+0x26c>
		interpret_special_key(state, HID_Z, 0, HID_TILDE);
     a5e:	2335      	movs	r3, #53	; 0x35
     a60:	2200      	movs	r2, #0
     a62:	211d      	movs	r1, #29
     a64:	4d1a      	ldr	r5, [pc, #104]	; (ad0 <STACK_SIZE+0x2d0>)
     a66:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     a68:	4b16      	ldr	r3, [pc, #88]	; (ac4 <STACK_SIZE+0x2c4>)
     a6a:	725c      	strb	r4, [r3, #9]
		set_matrix_key_pressed(key_Y, state);
	}

	// key_X
	state = matrix_get_state(key_X, true);
     a6c:	4b2d      	ldr	r3, [pc, #180]	; (b24 <STACK_SIZE+0x324>)
     a6e:	2201      	movs	r2, #1
     a70:	6818      	ldr	r0, [r3, #0]
     a72:	6859      	ldr	r1, [r3, #4]
     a74:	4b15      	ldr	r3, [pc, #84]	; (acc <STACK_SIZE+0x2cc>)
     a76:	4798      	blx	r3
     a78:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     a7a:	4a12      	ldr	r2, [pc, #72]	; (ac4 <STACK_SIZE+0x2c4>)
	if (state != get_matrix_key_pressed(key_X)) {
     a7c:	7bd2      	ldrb	r2, [r2, #15]
     a7e:	4282      	cmp	r2, r0
     a80:	d058      	beq.n	b34 <STACK_SIZE+0x334>
		if (state) {
     a82:	2800      	cmp	r0, #0
     a84:	d050      	beq.n	b28 <STACK_SIZE+0x328>
     a86:	4b22      	ldr	r3, [pc, #136]	; (b10 <STACK_SIZE+0x310>)
     a88:	6a1b      	ldr	r3, [r3, #32]
			if (read_special_key_press(PIN_ALT)) {
     a8a:	05db      	lsls	r3, r3, #23
     a8c:	d412      	bmi.n	ab4 <STACK_SIZE+0x2b4>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, true);
     a8e:	2101      	movs	r1, #1
     a90:	2020      	movs	r0, #32
     a92:	4d20      	ldr	r5, [pc, #128]	; (b14 <STACK_SIZE+0x314>)
     a94:	47a8      	blx	r5
				usb_set_kbd_key(HID_TILDE, true);
     a96:	2101      	movs	r1, #1
     a98:	2035      	movs	r0, #53	; 0x35
     a9a:	4e09      	ldr	r6, [pc, #36]	; (ac0 <STACK_SIZE+0x2c0>)
     a9c:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     a9e:	2096      	movs	r0, #150	; 0x96
     aa0:	0040      	lsls	r0, r0, #1
     aa2:	4b1d      	ldr	r3, [pc, #116]	; (b18 <STACK_SIZE+0x318>)
     aa4:	4798      	blx	r3
				usb_set_kbd_key(HID_TILDE, false);
     aa6:	2100      	movs	r1, #0
     aa8:	2035      	movs	r0, #53	; 0x35
     aaa:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, false);
     aac:	2100      	movs	r1, #0
     aae:	2020      	movs	r0, #32
     ab0:	47a8      	blx	r5
     ab2:	e03d      	b.n	b30 <STACK_SIZE+0x330>
			}
			else {
				usb_set_kbd_key(HID_X, state);
     ab4:	2101      	movs	r1, #1
     ab6:	201b      	movs	r0, #27
     ab8:	4b01      	ldr	r3, [pc, #4]	; (ac0 <STACK_SIZE+0x2c0>)
     aba:	4798      	blx	r3
     abc:	e038      	b.n	b30 <STACK_SIZE+0x330>
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	00000145 	.word	0x00000145
     ac4:	200001a4 	.word	0x200001a4
     ac8:	00004810 	.word	0x00004810
     acc:	0000113d 	.word	0x0000113d
     ad0:	00000175 	.word	0x00000175
     ad4:	00004830 	.word	0x00004830
     ad8:	00004870 	.word	0x00004870
     adc:	00004840 	.word	0x00004840
     ae0:	000047b8 	.word	0x000047b8
     ae4:	000047f0 	.word	0x000047f0
     ae8:	000047f8 	.word	0x000047f8
     aec:	00004770 	.word	0x00004770
     af0:	00004748 	.word	0x00004748
     af4:	00004820 	.word	0x00004820
     af8:	00004778 	.word	0x00004778
     afc:	000047a0 	.word	0x000047a0
     b00:	000047a8 	.word	0x000047a8
     b04:	000047b0 	.word	0x000047b0
     b08:	000047c0 	.word	0x000047c0
     b0c:	000047c8 	.word	0x000047c8
     b10:	40002880 	.word	0x40002880
     b14:	00000115 	.word	0x00000115
     b18:	00001221 	.word	0x00001221
     b1c:	000047d0 	.word	0x000047d0
     b20:	00004868 	.word	0x00004868
     b24:	00004860 	.word	0x00004860
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_X, state);
     b28:	2100      	movs	r1, #0
     b2a:	201b      	movs	r0, #27
     b2c:	4bcd      	ldr	r3, [pc, #820]	; (e64 <STACK_SIZE+0x664>)
     b2e:	4798      	blx	r3
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     b30:	4bcd      	ldr	r3, [pc, #820]	; (e68 <STACK_SIZE+0x668>)
     b32:	73dc      	strb	r4, [r3, #15]
		}
		set_matrix_key_pressed(key_X, state);
	}
	
	// key_C
	state = matrix_get_state(key_C, true);
     b34:	4bcd      	ldr	r3, [pc, #820]	; (e6c <STACK_SIZE+0x66c>)
     b36:	2201      	movs	r2, #1
     b38:	6818      	ldr	r0, [r3, #0]
     b3a:	6859      	ldr	r1, [r3, #4]
     b3c:	4bcc      	ldr	r3, [pc, #816]	; (e70 <STACK_SIZE+0x670>)
     b3e:	4798      	blx	r3
     b40:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     b42:	4ac9      	ldr	r2, [pc, #804]	; (e68 <STACK_SIZE+0x668>)
	if (state != get_matrix_key_pressed(key_C)) {
     b44:	7d52      	ldrb	r2, [r2, #21]
     b46:	4282      	cmp	r2, r0
     b48:	d023      	beq.n	b92 <STACK_SIZE+0x392>
		if (state) {
     b4a:	2800      	cmp	r0, #0
     b4c:	d01b      	beq.n	b86 <STACK_SIZE+0x386>
     b4e:	4bc9      	ldr	r3, [pc, #804]	; (e74 <STACK_SIZE+0x674>)
     b50:	6a1b      	ldr	r3, [r3, #32]
			if (read_special_key_press(PIN_ALT)) {
     b52:	05db      	lsls	r3, r3, #23
     b54:	d412      	bmi.n	b7c <STACK_SIZE+0x37c>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, true);
     b56:	2101      	movs	r1, #1
     b58:	2040      	movs	r0, #64	; 0x40
     b5a:	4dc7      	ldr	r5, [pc, #796]	; (e78 <STACK_SIZE+0x678>)
     b5c:	47a8      	blx	r5
				usb_set_kbd_key(HID_TILDE, true);
     b5e:	2101      	movs	r1, #1
     b60:	2035      	movs	r0, #53	; 0x35
     b62:	4ec0      	ldr	r6, [pc, #768]	; (e64 <STACK_SIZE+0x664>)
     b64:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     b66:	2096      	movs	r0, #150	; 0x96
     b68:	0040      	lsls	r0, r0, #1
     b6a:	4bc4      	ldr	r3, [pc, #784]	; (e7c <STACK_SIZE+0x67c>)
     b6c:	4798      	blx	r3
				usb_set_kbd_key(HID_TILDE, false);
     b6e:	2100      	movs	r1, #0
     b70:	2035      	movs	r0, #53	; 0x35
     b72:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, false);
     b74:	2100      	movs	r1, #0
     b76:	2040      	movs	r0, #64	; 0x40
     b78:	47a8      	blx	r5
     b7a:	e008      	b.n	b8e <STACK_SIZE+0x38e>
			}
			else {
				usb_set_kbd_key(HID_C, state);
     b7c:	2101      	movs	r1, #1
     b7e:	2006      	movs	r0, #6
     b80:	4bb8      	ldr	r3, [pc, #736]	; (e64 <STACK_SIZE+0x664>)
     b82:	4798      	blx	r3
     b84:	e003      	b.n	b8e <STACK_SIZE+0x38e>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_C, state);
     b86:	2100      	movs	r1, #0
     b88:	2006      	movs	r0, #6
     b8a:	4bb6      	ldr	r3, [pc, #728]	; (e64 <STACK_SIZE+0x664>)
     b8c:	4798      	blx	r3
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     b8e:	4bb6      	ldr	r3, [pc, #728]	; (e68 <STACK_SIZE+0x668>)
     b90:	755c      	strb	r4, [r3, #21]
		}
		set_matrix_key_pressed(key_C, state);
	}

	// key_V
	state = matrix_get_state(key_V, true);
     b92:	4bbb      	ldr	r3, [pc, #748]	; (e80 <STACK_SIZE+0x680>)
     b94:	2201      	movs	r2, #1
     b96:	6818      	ldr	r0, [r3, #0]
     b98:	6859      	ldr	r1, [r3, #4]
     b9a:	4bb5      	ldr	r3, [pc, #724]	; (e70 <STACK_SIZE+0x670>)
     b9c:	4798      	blx	r3
     b9e:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     ba0:	4bb1      	ldr	r3, [pc, #708]	; (e68 <STACK_SIZE+0x668>)
	if (state != get_matrix_key_pressed(key_V)) {
     ba2:	7edb      	ldrb	r3, [r3, #27]
     ba4:	4283      	cmp	r3, r0
     ba6:	d006      	beq.n	bb6 <STACK_SIZE+0x3b6>
		interpret_special_key(state, HID_V, 0, 0);
     ba8:	2300      	movs	r3, #0
     baa:	2200      	movs	r2, #0
     bac:	2119      	movs	r1, #25
     bae:	4db5      	ldr	r5, [pc, #724]	; (e84 <STACK_SIZE+0x684>)
     bb0:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     bb2:	4bad      	ldr	r3, [pc, #692]	; (e68 <STACK_SIZE+0x668>)
     bb4:	76dc      	strb	r4, [r3, #27]
		set_matrix_key_pressed(key_V, state);
	}

	// key_B
	state = matrix_get_state(key_B, true);
     bb6:	4bb4      	ldr	r3, [pc, #720]	; (e88 <STACK_SIZE+0x688>)
     bb8:	2201      	movs	r2, #1
     bba:	6818      	ldr	r0, [r3, #0]
     bbc:	6859      	ldr	r1, [r3, #4]
     bbe:	4bac      	ldr	r3, [pc, #688]	; (e70 <STACK_SIZE+0x670>)
     bc0:	4798      	blx	r3
     bc2:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     bc4:	2321      	movs	r3, #33	; 0x21
	if (state != get_matrix_key_pressed(key_B)) {
     bc6:	4aa8      	ldr	r2, [pc, #672]	; (e68 <STACK_SIZE+0x668>)
     bc8:	5cd3      	ldrb	r3, [r2, r3]
     bca:	4283      	cmp	r3, r0
     bcc:	d007      	beq.n	bde <STACK_SIZE+0x3de>
		interpret_special_key(state, HID_B, 0, 0);
     bce:	2300      	movs	r3, #0
     bd0:	2200      	movs	r2, #0
     bd2:	2105      	movs	r1, #5
     bd4:	4dab      	ldr	r5, [pc, #684]	; (e84 <STACK_SIZE+0x684>)
     bd6:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     bd8:	2321      	movs	r3, #33	; 0x21
     bda:	4aa3      	ldr	r2, [pc, #652]	; (e68 <STACK_SIZE+0x668>)
     bdc:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_B, state);
	}

	// key_N
	state = matrix_get_state(key_N, true);
     bde:	4bab      	ldr	r3, [pc, #684]	; (e8c <STACK_SIZE+0x68c>)
     be0:	2201      	movs	r2, #1
     be2:	6818      	ldr	r0, [r3, #0]
     be4:	6859      	ldr	r1, [r3, #4]
     be6:	4ba2      	ldr	r3, [pc, #648]	; (e70 <STACK_SIZE+0x670>)
     be8:	4798      	blx	r3
     bea:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     bec:	2327      	movs	r3, #39	; 0x27
	if (state != get_matrix_key_pressed(key_N)) {
     bee:	4a9e      	ldr	r2, [pc, #632]	; (e68 <STACK_SIZE+0x668>)
     bf0:	5cd3      	ldrb	r3, [r2, r3]
     bf2:	4283      	cmp	r3, r0
     bf4:	d007      	beq.n	c06 <STACK_SIZE+0x406>
		interpret_special_key(state, HID_N, 0, HID_SLASH);
     bf6:	2338      	movs	r3, #56	; 0x38
     bf8:	2200      	movs	r2, #0
     bfa:	2111      	movs	r1, #17
     bfc:	4da1      	ldr	r5, [pc, #644]	; (e84 <STACK_SIZE+0x684>)
     bfe:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     c00:	2327      	movs	r3, #39	; 0x27
     c02:	4a99      	ldr	r2, [pc, #612]	; (e68 <STACK_SIZE+0x668>)
     c04:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_N, state);
	}
	
	// key_M
	state = matrix_get_state(key_M, true);
     c06:	4ba2      	ldr	r3, [pc, #648]	; (e90 <STACK_SIZE+0x690>)
     c08:	2201      	movs	r2, #1
     c0a:	6818      	ldr	r0, [r3, #0]
     c0c:	6859      	ldr	r1, [r3, #4]
     c0e:	4b98      	ldr	r3, [pc, #608]	; (e70 <STACK_SIZE+0x670>)
     c10:	4798      	blx	r3
     c12:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     c14:	222d      	movs	r2, #45	; 0x2d
	if (state != get_matrix_key_pressed(key_M)) {
     c16:	4994      	ldr	r1, [pc, #592]	; (e68 <STACK_SIZE+0x668>)
     c18:	5c8a      	ldrb	r2, [r1, r2]
     c1a:	4282      	cmp	r2, r0
     c1c:	d024      	beq.n	c68 <STACK_SIZE+0x468>
		if (state) {
     c1e:	2800      	cmp	r0, #0
     c20:	d01b      	beq.n	c5a <STACK_SIZE+0x45a>
     c22:	4b94      	ldr	r3, [pc, #592]	; (e74 <STACK_SIZE+0x674>)
     c24:	6a1b      	ldr	r3, [r3, #32]
			if (read_special_key_press(PIN_ALT)) {
     c26:	05db      	lsls	r3, r3, #23
     c28:	d412      	bmi.n	c50 <STACK_SIZE+0x450>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, true);
     c2a:	2101      	movs	r1, #1
     c2c:	2020      	movs	r0, #32
     c2e:	4d92      	ldr	r5, [pc, #584]	; (e78 <STACK_SIZE+0x678>)
     c30:	47a8      	blx	r5
				usb_set_kbd_key(HID_SLASH, true);
     c32:	2101      	movs	r1, #1
     c34:	2038      	movs	r0, #56	; 0x38
     c36:	4e8b      	ldr	r6, [pc, #556]	; (e64 <STACK_SIZE+0x664>)
     c38:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     c3a:	2096      	movs	r0, #150	; 0x96
     c3c:	0040      	lsls	r0, r0, #1
     c3e:	4b8f      	ldr	r3, [pc, #572]	; (e7c <STACK_SIZE+0x67c>)
     c40:	4798      	blx	r3
				usb_set_kbd_key(HID_SLASH, false);
     c42:	2100      	movs	r1, #0
     c44:	2038      	movs	r0, #56	; 0x38
     c46:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, false);
     c48:	2100      	movs	r1, #0
     c4a:	2020      	movs	r0, #32
     c4c:	47a8      	blx	r5
     c4e:	e008      	b.n	c62 <STACK_SIZE+0x462>
			}
			else {
				usb_set_kbd_key(HID_M, state);
     c50:	2101      	movs	r1, #1
     c52:	2010      	movs	r0, #16
     c54:	4b83      	ldr	r3, [pc, #524]	; (e64 <STACK_SIZE+0x664>)
     c56:	4798      	blx	r3
     c58:	e003      	b.n	c62 <STACK_SIZE+0x462>
			}
		}
		else { // release all keys assigned to this button
			usb_set_kbd_key(HID_M, state);
     c5a:	2100      	movs	r1, #0
     c5c:	2010      	movs	r0, #16
     c5e:	4b81      	ldr	r3, [pc, #516]	; (e64 <STACK_SIZE+0x664>)
     c60:	4798      	blx	r3
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     c62:	232d      	movs	r3, #45	; 0x2d
     c64:	4a80      	ldr	r2, [pc, #512]	; (e68 <STACK_SIZE+0x668>)
     c66:	54d4      	strb	r4, [r2, r3]
		}
		set_matrix_key_pressed(key_M, state);
	}

	// key_COMMA
	state = matrix_get_state(key_COMMA, true);
     c68:	4b8a      	ldr	r3, [pc, #552]	; (e94 <STACK_SIZE+0x694>)
     c6a:	2201      	movs	r2, #1
     c6c:	6818      	ldr	r0, [r3, #0]
     c6e:	6859      	ldr	r1, [r3, #4]
     c70:	4b7f      	ldr	r3, [pc, #508]	; (e70 <STACK_SIZE+0x670>)
     c72:	4798      	blx	r3
     c74:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     c76:	2333      	movs	r3, #51	; 0x33
	if (state != get_matrix_key_pressed(key_COMMA)) {
     c78:	4a7b      	ldr	r2, [pc, #492]	; (e68 <STACK_SIZE+0x668>)
     c7a:	5cd3      	ldrb	r3, [r2, r3]
     c7c:	4283      	cmp	r3, r0
     c7e:	d007      	beq.n	c90 <STACK_SIZE+0x490>
		interpret_special_key(state, HID_COMMA, 0, 0);
     c80:	2300      	movs	r3, #0
     c82:	2200      	movs	r2, #0
     c84:	2136      	movs	r1, #54	; 0x36
     c86:	4d7f      	ldr	r5, [pc, #508]	; (e84 <STACK_SIZE+0x684>)
     c88:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     c8a:	2333      	movs	r3, #51	; 0x33
     c8c:	4a76      	ldr	r2, [pc, #472]	; (e68 <STACK_SIZE+0x668>)
     c8e:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_COMMA, state);
	}

	// key_DOT
	state = matrix_get_state(key_DOT, true);
     c90:	4b81      	ldr	r3, [pc, #516]	; (e98 <STACK_SIZE+0x698>)
     c92:	2201      	movs	r2, #1
     c94:	6818      	ldr	r0, [r3, #0]
     c96:	6859      	ldr	r1, [r3, #4]
     c98:	4b75      	ldr	r3, [pc, #468]	; (e70 <STACK_SIZE+0x670>)
     c9a:	4798      	blx	r3
     c9c:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     c9e:	2339      	movs	r3, #57	; 0x39
	if (state != get_matrix_key_pressed(key_DOT)) {
     ca0:	4a71      	ldr	r2, [pc, #452]	; (e68 <STACK_SIZE+0x668>)
     ca2:	5cd3      	ldrb	r3, [r2, r3]
     ca4:	4283      	cmp	r3, r0
     ca6:	d007      	beq.n	cb8 <STACK_SIZE+0x4b8>
		interpret_special_key(state, HID_DOT, 0, 0);
     ca8:	2300      	movs	r3, #0
     caa:	2200      	movs	r2, #0
     cac:	2137      	movs	r1, #55	; 0x37
     cae:	4d75      	ldr	r5, [pc, #468]	; (e84 <STACK_SIZE+0x684>)
     cb0:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     cb2:	2339      	movs	r3, #57	; 0x39
     cb4:	4a6c      	ldr	r2, [pc, #432]	; (e68 <STACK_SIZE+0x668>)
     cb6:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_DOT, state);
	}

	// key_LEFT
	state = matrix_get_state(key_LEFT, true);
     cb8:	4b78      	ldr	r3, [pc, #480]	; (e9c <STACK_SIZE+0x69c>)
     cba:	2201      	movs	r2, #1
     cbc:	6818      	ldr	r0, [r3, #0]
     cbe:	6859      	ldr	r1, [r3, #4]
     cc0:	4b6b      	ldr	r3, [pc, #428]	; (e70 <STACK_SIZE+0x670>)
     cc2:	4798      	blx	r3
     cc4:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     cc6:	2329      	movs	r3, #41	; 0x29
	if (state != get_matrix_key_pressed(key_LEFT)) {
     cc8:	4a67      	ldr	r2, [pc, #412]	; (e68 <STACK_SIZE+0x668>)
     cca:	5cd3      	ldrb	r3, [r2, r3]
     ccc:	4283      	cmp	r3, r0
     cce:	d007      	beq.n	ce0 <STACK_SIZE+0x4e0>
		interpret_special_key(state, HID_LEFT, 0, 0);
     cd0:	2300      	movs	r3, #0
     cd2:	2200      	movs	r2, #0
     cd4:	2150      	movs	r1, #80	; 0x50
     cd6:	4d6b      	ldr	r5, [pc, #428]	; (e84 <STACK_SIZE+0x684>)
     cd8:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     cda:	2329      	movs	r3, #41	; 0x29
     cdc:	4a62      	ldr	r2, [pc, #392]	; (e68 <STACK_SIZE+0x668>)
     cde:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_LEFT, state);
	}

	// key_RIGHT
	state = matrix_get_state(key_RIGHT, true);
     ce0:	4b6f      	ldr	r3, [pc, #444]	; (ea0 <STACK_SIZE+0x6a0>)
     ce2:	2201      	movs	r2, #1
     ce4:	6818      	ldr	r0, [r3, #0]
     ce6:	6859      	ldr	r1, [r3, #4]
     ce8:	4b61      	ldr	r3, [pc, #388]	; (e70 <STACK_SIZE+0x670>)
     cea:	4798      	blx	r3
     cec:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     cee:	2335      	movs	r3, #53	; 0x35
	if (state != get_matrix_key_pressed(key_RIGHT)) {
     cf0:	4a5d      	ldr	r2, [pc, #372]	; (e68 <STACK_SIZE+0x668>)
     cf2:	5cd3      	ldrb	r3, [r2, r3]
     cf4:	4283      	cmp	r3, r0
     cf6:	d007      	beq.n	d08 <STACK_SIZE+0x508>
		interpret_special_key(state, HID_RIGHT, HID_F12, 0);
     cf8:	2300      	movs	r3, #0
     cfa:	2245      	movs	r2, #69	; 0x45
     cfc:	214f      	movs	r1, #79	; 0x4f
     cfe:	4d61      	ldr	r5, [pc, #388]	; (e84 <STACK_SIZE+0x684>)
     d00:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     d02:	2335      	movs	r3, #53	; 0x35
     d04:	4a58      	ldr	r2, [pc, #352]	; (e68 <STACK_SIZE+0x668>)
     d06:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_RIGHT, state);
	}

	// key_UP
	state = matrix_get_state(key_UP, true);
     d08:	4b66      	ldr	r3, [pc, #408]	; (ea4 <STACK_SIZE+0x6a4>)
     d0a:	2201      	movs	r2, #1
     d0c:	6818      	ldr	r0, [r3, #0]
     d0e:	6859      	ldr	r1, [r3, #4]
     d10:	4b57      	ldr	r3, [pc, #348]	; (e70 <STACK_SIZE+0x670>)
     d12:	4798      	blx	r3
     d14:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     d16:	233b      	movs	r3, #59	; 0x3b
	if (state != get_matrix_key_pressed(key_UP)) {
     d18:	4a53      	ldr	r2, [pc, #332]	; (e68 <STACK_SIZE+0x668>)
     d1a:	5cd3      	ldrb	r3, [r2, r3]
     d1c:	4283      	cmp	r3, r0
     d1e:	d007      	beq.n	d30 <STACK_SIZE+0x530>
		interpret_special_key(state, HID_UP, 0, HID_PAGEUP);
     d20:	234b      	movs	r3, #75	; 0x4b
     d22:	2200      	movs	r2, #0
     d24:	2152      	movs	r1, #82	; 0x52
     d26:	4d57      	ldr	r5, [pc, #348]	; (e84 <STACK_SIZE+0x684>)
     d28:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     d2a:	233b      	movs	r3, #59	; 0x3b
     d2c:	4a4e      	ldr	r2, [pc, #312]	; (e68 <STACK_SIZE+0x668>)
     d2e:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_UP, state);
	}

	// key_DOWN
	state = matrix_get_state(key_DOWN, true);
     d30:	4b5d      	ldr	r3, [pc, #372]	; (ea8 <STACK_SIZE+0x6a8>)
     d32:	2201      	movs	r2, #1
     d34:	6818      	ldr	r0, [r3, #0]
     d36:	6859      	ldr	r1, [r3, #4]
     d38:	4b4d      	ldr	r3, [pc, #308]	; (e70 <STACK_SIZE+0x670>)
     d3a:	4798      	blx	r3
     d3c:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     d3e:	232f      	movs	r3, #47	; 0x2f
	if (state != get_matrix_key_pressed(key_DOWN)) {
     d40:	4a49      	ldr	r2, [pc, #292]	; (e68 <STACK_SIZE+0x668>)
     d42:	5cd3      	ldrb	r3, [r2, r3]
     d44:	4283      	cmp	r3, r0
     d46:	d007      	beq.n	d58 <STACK_SIZE+0x558>
		interpret_special_key(state, HID_DOWN, 0, HID_PAGEDOWN);
     d48:	234e      	movs	r3, #78	; 0x4e
     d4a:	2200      	movs	r2, #0
     d4c:	2151      	movs	r1, #81	; 0x51
     d4e:	4d4d      	ldr	r5, [pc, #308]	; (e84 <STACK_SIZE+0x684>)
     d50:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     d52:	232f      	movs	r3, #47	; 0x2f
     d54:	4a44      	ldr	r2, [pc, #272]	; (e68 <STACK_SIZE+0x668>)
     d56:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_DOWN, state);
	}

	// key_ENT
	state = matrix_get_state(key_ENT, true);
     d58:	4b54      	ldr	r3, [pc, #336]	; (eac <STACK_SIZE+0x6ac>)
     d5a:	2201      	movs	r2, #1
     d5c:	6818      	ldr	r0, [r3, #0]
     d5e:	6859      	ldr	r1, [r3, #4]
     d60:	4b43      	ldr	r3, [pc, #268]	; (e70 <STACK_SIZE+0x670>)
     d62:	4798      	blx	r3
     d64:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     d66:	233a      	movs	r3, #58	; 0x3a
	if (state != get_matrix_key_pressed(key_ENT)) {
     d68:	4a3f      	ldr	r2, [pc, #252]	; (e68 <STACK_SIZE+0x668>)
     d6a:	5cd3      	ldrb	r3, [r2, r3]
     d6c:	4283      	cmp	r3, r0
     d6e:	d007      	beq.n	d80 <STACK_SIZE+0x580>
		interpret_special_key(state, HID_ENTER, 0, HID_F11);
     d70:	2344      	movs	r3, #68	; 0x44
     d72:	2200      	movs	r2, #0
     d74:	2128      	movs	r1, #40	; 0x28
     d76:	4d43      	ldr	r5, [pc, #268]	; (e84 <STACK_SIZE+0x684>)
     d78:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     d7a:	233a      	movs	r3, #58	; 0x3a
     d7c:	4a3a      	ldr	r2, [pc, #232]	; (e68 <STACK_SIZE+0x668>)
     d7e:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_ENT, state);
	}

	// key_SPC
	state = matrix_get_state(key_SPC, true);
     d80:	4b4b      	ldr	r3, [pc, #300]	; (eb0 <STACK_SIZE+0x6b0>)
     d82:	2201      	movs	r2, #1
     d84:	6818      	ldr	r0, [r3, #0]
     d86:	6859      	ldr	r1, [r3, #4]
     d88:	4b39      	ldr	r3, [pc, #228]	; (e70 <STACK_SIZE+0x670>)
     d8a:	4798      	blx	r3
     d8c:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     d8e:	2323      	movs	r3, #35	; 0x23
	if (state != get_matrix_key_pressed(key_SPC)) {
     d90:	4a35      	ldr	r2, [pc, #212]	; (e68 <STACK_SIZE+0x668>)
     d92:	5cd3      	ldrb	r3, [r2, r3]
     d94:	4283      	cmp	r3, r0
     d96:	d007      	beq.n	da8 <STACK_SIZE+0x5a8>
		interpret_special_key(state, HID_SPACEBAR, HID_ESCAPE, 0);
     d98:	2300      	movs	r3, #0
     d9a:	2229      	movs	r2, #41	; 0x29
     d9c:	212c      	movs	r1, #44	; 0x2c
     d9e:	4d39      	ldr	r5, [pc, #228]	; (e84 <STACK_SIZE+0x684>)
     da0:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     da2:	2323      	movs	r3, #35	; 0x23
     da4:	4a30      	ldr	r2, [pc, #192]	; (e68 <STACK_SIZE+0x668>)
     da6:	54d4      	strb	r4, [r2, r3]
		set_matrix_key_pressed(key_SPC, state);
	}

	// key_BCKSP
	state = matrix_get_state(key_BCKSP, true);
     da8:	4b42      	ldr	r3, [pc, #264]	; (eb4 <STACK_SIZE+0x6b4>)
     daa:	2201      	movs	r2, #1
     dac:	6818      	ldr	r0, [r3, #0]
     dae:	6859      	ldr	r1, [r3, #4]
     db0:	4b2f      	ldr	r3, [pc, #188]	; (e70 <STACK_SIZE+0x670>)
     db2:	4798      	blx	r3
     db4:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     db6:	4b2c      	ldr	r3, [pc, #176]	; (e68 <STACK_SIZE+0x668>)
	if (state != get_matrix_key_pressed(key_BCKSP)) {
     db8:	7ddb      	ldrb	r3, [r3, #23]
     dba:	4283      	cmp	r3, r0
     dbc:	d006      	beq.n	dcc <STACK_SIZE+0x5cc>
		interpret_special_key(state, HID_BACKSPACE, HID_DELETE, 0);
     dbe:	2300      	movs	r3, #0
     dc0:	224c      	movs	r2, #76	; 0x4c
     dc2:	212a      	movs	r1, #42	; 0x2a
     dc4:	4d2f      	ldr	r5, [pc, #188]	; (e84 <STACK_SIZE+0x684>)
     dc6:	47a8      	blx	r5
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     dc8:	4b27      	ldr	r3, [pc, #156]	; (e68 <STACK_SIZE+0x668>)
     dca:	75dc      	strb	r4, [r3, #23]
		set_matrix_key_pressed(key_BCKSP, state);
	}
	
	// key_QUEST
	state = matrix_get_state(key_QUEST, true);
     dcc:	4b3a      	ldr	r3, [pc, #232]	; (eb8 <STACK_SIZE+0x6b8>)
     dce:	2201      	movs	r2, #1
     dd0:	6818      	ldr	r0, [r3, #0]
     dd2:	6859      	ldr	r1, [r3, #4]
     dd4:	4b26      	ldr	r3, [pc, #152]	; (e70 <STACK_SIZE+0x670>)
     dd6:	4798      	blx	r3
     dd8:	0004      	movs	r4, r0
	return matrix_key_pressed[key.x_pos][key.y_pos];
     dda:	4a23      	ldr	r2, [pc, #140]	; (e68 <STACK_SIZE+0x668>)
	if (state != get_matrix_key_pressed(key_QUEST)) {
     ddc:	7ad2      	ldrb	r2, [r2, #11]
     dde:	4282      	cmp	r2, r0
     de0:	d003      	beq.n	dea <STACK_SIZE+0x5ea>
		if (state) {
     de2:	2800      	cmp	r0, #0
     de4:	d102      	bne.n	dec <STACK_SIZE+0x5ec>
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     de6:	4b20      	ldr	r3, [pc, #128]	; (e68 <STACK_SIZE+0x668>)
     de8:	72dc      	strb	r4, [r3, #11]
}
     dea:	bd70      	pop	{r4, r5, r6, pc}
     dec:	2380      	movs	r3, #128	; 0x80
     dee:	4a33      	ldr	r2, [pc, #204]	; (ebc <STACK_SIZE+0x6bc>)
     df0:	189a      	adds	r2, r3, r2
     df2:	6a12      	ldr	r2, [r2, #32]
			if (read_special_key_press(PIN_FN)) {
     df4:	4213      	tst	r3, r2
     df6:	d112      	bne.n	e1e <STACK_SIZE+0x61e>
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, true);
     df8:	2101      	movs	r1, #1
     dfa:	2020      	movs	r0, #32
     dfc:	4d1e      	ldr	r5, [pc, #120]	; (e78 <STACK_SIZE+0x678>)
     dfe:	47a8      	blx	r5
				usb_set_kbd_key(HID_PLUS, true);
     e00:	2101      	movs	r1, #1
     e02:	202e      	movs	r0, #46	; 0x2e
     e04:	4e17      	ldr	r6, [pc, #92]	; (e64 <STACK_SIZE+0x664>)
     e06:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     e08:	2096      	movs	r0, #150	; 0x96
     e0a:	0040      	lsls	r0, r0, #1
     e0c:	4b1b      	ldr	r3, [pc, #108]	; (e7c <STACK_SIZE+0x67c>)
     e0e:	4798      	blx	r3
				usb_set_kbd_key(HID_PLUS, false);
     e10:	2100      	movs	r1, #0
     e12:	202e      	movs	r0, #46	; 0x2e
     e14:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, false);
     e16:	2100      	movs	r1, #0
     e18:	2020      	movs	r0, #32
     e1a:	47a8      	blx	r5
     e1c:	e7e3      	b.n	de6 <STACK_SIZE+0x5e6>
     e1e:	4b15      	ldr	r3, [pc, #84]	; (e74 <STACK_SIZE+0x674>)
     e20:	6a1b      	ldr	r3, [r3, #32]
			}
			else if (read_special_key_press(PIN_ALT)) {
     e22:	05db      	lsls	r3, r3, #23
     e24:	d40b      	bmi.n	e3e <STACK_SIZE+0x63e>
				usb_set_kbd_key(HID_PLUS, true);
     e26:	2101      	movs	r1, #1
     e28:	202e      	movs	r0, #46	; 0x2e
     e2a:	4d0e      	ldr	r5, [pc, #56]	; (e64 <STACK_SIZE+0x664>)
     e2c:	47a8      	blx	r5
				delay_ms(KEY_HOLD_DOWN);
     e2e:	2096      	movs	r0, #150	; 0x96
     e30:	0040      	lsls	r0, r0, #1
     e32:	4b12      	ldr	r3, [pc, #72]	; (e7c <STACK_SIZE+0x67c>)
     e34:	4798      	blx	r3
				usb_set_kbd_key(HID_PLUS, false);
     e36:	2100      	movs	r1, #0
     e38:	202e      	movs	r0, #46	; 0x2e
     e3a:	47a8      	blx	r5
     e3c:	e7d3      	b.n	de6 <STACK_SIZE+0x5e6>
			}
			else {
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, true);
     e3e:	2101      	movs	r1, #1
     e40:	2020      	movs	r0, #32
     e42:	4d0d      	ldr	r5, [pc, #52]	; (e78 <STACK_SIZE+0x678>)
     e44:	47a8      	blx	r5
				usb_set_kbd_key(HID_UNDERSCORE, true);
     e46:	2101      	movs	r1, #1
     e48:	202d      	movs	r0, #45	; 0x2d
     e4a:	4e06      	ldr	r6, [pc, #24]	; (e64 <STACK_SIZE+0x664>)
     e4c:	47b0      	blx	r6
				delay_ms(KEY_HOLD_DOWN);
     e4e:	2096      	movs	r0, #150	; 0x96
     e50:	0040      	lsls	r0, r0, #1
     e52:	4b0a      	ldr	r3, [pc, #40]	; (e7c <STACK_SIZE+0x67c>)
     e54:	4798      	blx	r3
				usb_set_kbd_key(HID_UNDERSCORE, false);
     e56:	2100      	movs	r1, #0
     e58:	202d      	movs	r0, #45	; 0x2d
     e5a:	47b0      	blx	r6
				usb_set_kbd_modifier(HID_MODIFIER_RIGHT_SHIFT, false);
     e5c:	2100      	movs	r1, #0
     e5e:	2020      	movs	r0, #32
     e60:	47a8      	blx	r5
     e62:	e7c0      	b.n	de6 <STACK_SIZE+0x5e6>
     e64:	00000145 	.word	0x00000145
     e68:	200001a4 	.word	0x200001a4
     e6c:	00004760 	.word	0x00004760
     e70:	0000113d 	.word	0x0000113d
     e74:	40002880 	.word	0x40002880
     e78:	00000115 	.word	0x00000115
     e7c:	00001221 	.word	0x00001221
     e80:	00004850 	.word	0x00004850
     e84:	00000175 	.word	0x00000175
     e88:	00004750 	.word	0x00004750
     e8c:	000047e8 	.word	0x000047e8
     e90:	000047e0 	.word	0x000047e0
     e94:	00004768 	.word	0x00004768
     e98:	00004780 	.word	0x00004780
     e9c:	000047d8 	.word	0x000047d8
     ea0:	00004818 	.word	0x00004818
     ea4:	00004848 	.word	0x00004848
     ea8:	00004788 	.word	0x00004788
     eac:	00004798 	.word	0x00004798
     eb0:	00004828 	.word	0x00004828
     eb4:	00004758 	.word	0x00004758
     eb8:	00004808 	.word	0x00004808
     ebc:	40002800 	.word	0x40002800

00000ec0 <keyboard_set_kbd_enabled>:
	main_b_kbd_enable = true;
     ec0:	2201      	movs	r2, #1
     ec2:	4b02      	ldr	r3, [pc, #8]	; (ecc <keyboard_set_kbd_enabled+0xc>)
     ec4:	701a      	strb	r2, [r3, #0]
}
     ec6:	2001      	movs	r0, #1
     ec8:	4770      	bx	lr
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	200000f9 	.word	0x200000f9

00000ed0 <keyboard_set_kbd_disabled>:
	main_b_kbd_enable = false;
     ed0:	2200      	movs	r2, #0
     ed2:	4b01      	ldr	r3, [pc, #4]	; (ed8 <keyboard_set_kbd_disabled+0x8>)
     ed4:	701a      	strb	r2, [r3, #0]
}
     ed6:	4770      	bx	lr
     ed8:	200000f9 	.word	0x200000f9

00000edc <read_line>:
			lastUpdateTime[i][j]	= 0;
		}	
	}
}

static void read_line(uint8_t signal_pin, uint8_t arrayIndex) {
     edc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ede:	46c6      	mov	lr, r8
     ee0:	b500      	push	{lr}
     ee2:	468c      	mov	ip, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ee4:	09c3      	lsrs	r3, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ee6:	2600      	movs	r6, #0
	if (port_index < PORT_INST_NUM) {
     ee8:	2b00      	cmp	r3, #0
     eea:	d104      	bne.n	ef6 <read_line+0x1a>
		return &(ports[port_index]->Group[group_index]);
     eec:	0946      	lsrs	r6, r0, #5
     eee:	01f6      	lsls	r6, r6, #7
     ef0:	4b1f      	ldr	r3, [pc, #124]	; (f70 <read_line+0x94>)
     ef2:	4698      	mov	r8, r3
     ef4:	4446      	add	r6, r8
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ef6:	231f      	movs	r3, #31
     ef8:	4018      	ands	r0, r3
     efa:	2401      	movs	r4, #1
     efc:	0027      	movs	r7, r4
     efe:	4087      	lsls	r7, r0

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f00:	6177      	str	r7, [r6, #20]
	return (port_base->IN.reg & pin_mask);
     f02:	4b1b      	ldr	r3, [pc, #108]	; (f70 <read_line+0x94>)
     f04:	4698      	mov	r8, r3
     f06:	6a1a      	ldr	r2, [r3, #32]
	port_pin_set_output_level(signal_pin, false);
	
	buttons_unbounced[arrayIndex][0]	= !port_pin_get_input_level(PIN_SIG_0);
     f08:	491a      	ldr	r1, [pc, #104]	; (f74 <read_line+0x98>)
     f0a:	4663      	mov	r3, ip
     f0c:	0058      	lsls	r0, r3, #1
     f0e:	18c5      	adds	r5, r0, r3
     f10:	006d      	lsls	r5, r5, #1
     f12:	0bd2      	lsrs	r2, r2, #15
     f14:	4062      	eors	r2, r4
     f16:	2301      	movs	r3, #1
     f18:	401a      	ands	r2, r3
     f1a:	546a      	strb	r2, [r5, r1]
     f1c:	4642      	mov	r2, r8
     f1e:	6a15      	ldr	r5, [r2, #32]
	buttons_unbounced[arrayIndex][1]	= !port_pin_get_input_level(PIN_SIG_1);
     f20:	4662      	mov	r2, ip
     f22:	1882      	adds	r2, r0, r2
     f24:	0052      	lsls	r2, r2, #1
     f26:	188a      	adds	r2, r1, r2
     f28:	0b2d      	lsrs	r5, r5, #12
     f2a:	4065      	eors	r5, r4
     f2c:	401d      	ands	r5, r3
     f2e:	7055      	strb	r5, [r2, #1]
     f30:	4645      	mov	r5, r8
     f32:	6a2d      	ldr	r5, [r5, #32]
	buttons_unbounced[arrayIndex][2]	= !port_pin_get_input_level(PIN_SIG_2);
     f34:	09ad      	lsrs	r5, r5, #6
     f36:	4065      	eors	r5, r4
     f38:	401d      	ands	r5, r3
     f3a:	7095      	strb	r5, [r2, #2]
     f3c:	4645      	mov	r5, r8
     f3e:	6a2d      	ldr	r5, [r5, #32]
	buttons_unbounced[arrayIndex][3]	= !port_pin_get_input_level(PIN_SIG_3);
     f40:	096d      	lsrs	r5, r5, #5
     f42:	4065      	eors	r5, r4
     f44:	401d      	ands	r5, r3
     f46:	70d5      	strb	r5, [r2, #3]
     f48:	4d0b      	ldr	r5, [pc, #44]	; (f78 <read_line+0x9c>)
     f4a:	46a8      	mov	r8, r5
     f4c:	6a2d      	ldr	r5, [r5, #32]
	buttons_unbounced[arrayIndex][4]	= !port_pin_get_input_level(PIN_SIG_4);
     f4e:	08ed      	lsrs	r5, r5, #3
     f50:	4065      	eors	r5, r4
     f52:	401d      	ands	r5, r3
     f54:	7115      	strb	r5, [r2, #4]
     f56:	4642      	mov	r2, r8
     f58:	6a12      	ldr	r2, [r2, #32]
	buttons_unbounced[arrayIndex][5]	= !port_pin_get_input_level(PIN_SIG_5);
     f5a:	4460      	add	r0, ip
     f5c:	0040      	lsls	r0, r0, #1
     f5e:	1808      	adds	r0, r1, r0
     f60:	0892      	lsrs	r2, r2, #2
     f62:	4054      	eors	r4, r2
     f64:	4023      	ands	r3, r4
     f66:	7143      	strb	r3, [r0, #5]
		port_base->OUTSET.reg = pin_mask;
     f68:	61b7      	str	r7, [r6, #24]
	
	port_pin_set_output_level(signal_pin, true);
}
     f6a:	bc04      	pop	{r2}
     f6c:	4690      	mov	r8, r2
     f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f70:	40002800 	.word	0x40002800
     f74:	20000334 	.word	0x20000334
     f78:	40002880 	.word	0x40002880

00000f7c <matrix_setup>:
void matrix_setup(void)  {
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
     f80:	ac01      	add	r4, sp, #4
     f82:	2300      	movs	r3, #0
     f84:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     f86:	2601      	movs	r6, #1
     f88:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     f8a:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(PIN_SIG_0, &config_port_pin);
     f8c:	0021      	movs	r1, r4
     f8e:	200f      	movs	r0, #15
     f90:	4d34      	ldr	r5, [pc, #208]	; (1064 <matrix_setup+0xe8>)
     f92:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_1, &config_port_pin);
     f94:	0021      	movs	r1, r4
     f96:	200c      	movs	r0, #12
     f98:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_2, &config_port_pin);
     f9a:	0021      	movs	r1, r4
     f9c:	2006      	movs	r0, #6
     f9e:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_3, &config_port_pin);
     fa0:	0021      	movs	r1, r4
     fa2:	2005      	movs	r0, #5
     fa4:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_4, &config_port_pin);
     fa6:	0021      	movs	r1, r4
     fa8:	2023      	movs	r0, #35	; 0x23
     faa:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_5, &config_port_pin);
     fac:	0021      	movs	r1, r4
     fae:	2022      	movs	r0, #34	; 0x22
     fb0:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     fb2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(PIN_READ_00, &config_port_pin);
     fb4:	0021      	movs	r1, r4
     fb6:	2007      	movs	r0, #7
     fb8:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_01, &config_port_pin);
     fba:	0021      	movs	r1, r4
     fbc:	2009      	movs	r0, #9
     fbe:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_02, &config_port_pin);
     fc0:	0021      	movs	r1, r4
     fc2:	2008      	movs	r0, #8
     fc4:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_03, &config_port_pin);
     fc6:	0021      	movs	r1, r4
     fc8:	200a      	movs	r0, #10
     fca:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_04, &config_port_pin);
     fcc:	0021      	movs	r1, r4
     fce:	200b      	movs	r0, #11
     fd0:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_05, &config_port_pin);
     fd2:	0021      	movs	r1, r4
     fd4:	202f      	movs	r0, #47	; 0x2f
     fd6:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_06, &config_port_pin);
     fd8:	0021      	movs	r1, r4
     fda:	202e      	movs	r0, #46	; 0x2e
     fdc:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_07, &config_port_pin);
     fde:	0021      	movs	r1, r4
     fe0:	202d      	movs	r0, #45	; 0x2d
     fe2:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_08, &config_port_pin);
     fe4:	0021      	movs	r1, r4
     fe6:	202c      	movs	r0, #44	; 0x2c
     fe8:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_09, &config_port_pin);
     fea:	0021      	movs	r1, r4
     fec:	200e      	movs	r0, #14
     fee:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_10, &config_port_pin);
     ff0:	0021      	movs	r1, r4
     ff2:	200d      	movs	r0, #13
     ff4:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     ff6:	4b1c      	ldr	r3, [pc, #112]	; (1068 <matrix_setup+0xec>)
     ff8:	2280      	movs	r2, #128	; 0x80
     ffa:	619a      	str	r2, [r3, #24]
     ffc:	2180      	movs	r1, #128	; 0x80
     ffe:	0089      	lsls	r1, r1, #2
    1000:	6199      	str	r1, [r3, #24]
    1002:	3901      	subs	r1, #1
    1004:	39ff      	subs	r1, #255	; 0xff
    1006:	6199      	str	r1, [r3, #24]
    1008:	2180      	movs	r1, #128	; 0x80
    100a:	00c9      	lsls	r1, r1, #3
    100c:	6199      	str	r1, [r3, #24]
    100e:	2180      	movs	r1, #128	; 0x80
    1010:	0109      	lsls	r1, r1, #4
    1012:	6199      	str	r1, [r3, #24]
    1014:	469c      	mov	ip, r3
    1016:	4462      	add	r2, ip
    1018:	2180      	movs	r1, #128	; 0x80
    101a:	0209      	lsls	r1, r1, #8
    101c:	6191      	str	r1, [r2, #24]
    101e:	2080      	movs	r0, #128	; 0x80
    1020:	01c0      	lsls	r0, r0, #7
    1022:	6190      	str	r0, [r2, #24]
    1024:	2180      	movs	r1, #128	; 0x80
    1026:	0189      	lsls	r1, r1, #6
    1028:	6191      	str	r1, [r2, #24]
    102a:	2480      	movs	r4, #128	; 0x80
    102c:	0164      	lsls	r4, r4, #5
    102e:	6194      	str	r4, [r2, #24]
    1030:	6198      	str	r0, [r3, #24]
    1032:	6199      	str	r1, [r3, #24]
    1034:	4d0d      	ldr	r5, [pc, #52]	; (106c <matrix_setup+0xf0>)
    1036:	4c0e      	ldr	r4, [pc, #56]	; (1070 <matrix_setup+0xf4>)
    1038:	480e      	ldr	r0, [pc, #56]	; (1074 <matrix_setup+0xf8>)
    103a:	002e      	movs	r6, r5
    103c:	3609      	adds	r6, #9
    103e:	36ff      	adds	r6, #255	; 0xff
			buttons_unbounced[i][j] = false;
    1040:	2200      	movs	r2, #0
    1042:	e004      	b.n	104e <matrix_setup+0xd2>
    1044:	3518      	adds	r5, #24
    1046:	3406      	adds	r4, #6
    1048:	3006      	adds	r0, #6
	for (int i = 0; i<MATRIX_X; i++) {
    104a:	42b5      	cmp	r5, r6
    104c:	d008      	beq.n	1060 <matrix_setup+0xe4>
void matrix_setup(void)  {
    104e:	0029      	movs	r1, r5
    1050:	2300      	movs	r3, #0
			buttons_unbounced[i][j] = false;
    1052:	54e2      	strb	r2, [r4, r3]
			buttons_debounced[i][j]	= false;
    1054:	54c2      	strb	r2, [r0, r3]
			lastUpdateTime[i][j]	= 0;
    1056:	c104      	stmia	r1!, {r2}
		for (int j = 0; j<MATRIX_Y; j++) {
    1058:	3301      	adds	r3, #1
    105a:	2b06      	cmp	r3, #6
    105c:	d1f9      	bne.n	1052 <matrix_setup+0xd6>
    105e:	e7f1      	b.n	1044 <matrix_setup+0xc8>
}
    1060:	b002      	add	sp, #8
    1062:	bd70      	pop	{r4, r5, r6, pc}
    1064:	00001df5 	.word	0x00001df5
    1068:	40002800 	.word	0x40002800
    106c:	200001e8 	.word	0x200001e8
    1070:	20000334 	.word	0x20000334
    1074:	200002f0 	.word	0x200002f0

00001078 <matrix_update_states>:
	
	// test solution
	// buttons_debounced[x][y] = buttons_unbounced[x][y];
}

void matrix_update_states(void) {
    1078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    107a:	46de      	mov	lr, fp
    107c:	4657      	mov	r7, sl
    107e:	464e      	mov	r6, r9
    1080:	4645      	mov	r5, r8
    1082:	b5e0      	push	{r5, r6, r7, lr}
	read_line(PIN_READ_00, 0);
    1084:	2100      	movs	r1, #0
    1086:	2007      	movs	r0, #7
    1088:	4c26      	ldr	r4, [pc, #152]	; (1124 <matrix_update_states+0xac>)
    108a:	47a0      	blx	r4
	read_line(PIN_READ_01, 1);
    108c:	2101      	movs	r1, #1
    108e:	2009      	movs	r0, #9
    1090:	47a0      	blx	r4
	read_line(PIN_READ_02, 2);
    1092:	2102      	movs	r1, #2
    1094:	2008      	movs	r0, #8
    1096:	47a0      	blx	r4
	read_line(PIN_READ_03, 3);
    1098:	2103      	movs	r1, #3
    109a:	200a      	movs	r0, #10
    109c:	47a0      	blx	r4
	read_line(PIN_READ_04, 4);
    109e:	2104      	movs	r1, #4
    10a0:	200b      	movs	r0, #11
    10a2:	47a0      	blx	r4
	read_line(PIN_READ_05, 5);
    10a4:	2105      	movs	r1, #5
    10a6:	202f      	movs	r0, #47	; 0x2f
    10a8:	47a0      	blx	r4
	read_line(PIN_READ_06, 6);
    10aa:	2106      	movs	r1, #6
    10ac:	202e      	movs	r0, #46	; 0x2e
    10ae:	47a0      	blx	r4
	read_line(PIN_READ_07, 7);
    10b0:	2107      	movs	r1, #7
    10b2:	202d      	movs	r0, #45	; 0x2d
    10b4:	47a0      	blx	r4
	read_line(PIN_READ_08, 8);
    10b6:	2108      	movs	r1, #8
    10b8:	202c      	movs	r0, #44	; 0x2c
    10ba:	47a0      	blx	r4
	read_line(PIN_READ_09, 9);
    10bc:	2109      	movs	r1, #9
    10be:	200e      	movs	r0, #14
    10c0:	47a0      	blx	r4
	read_line(PIN_READ_10, 10);
    10c2:	210a      	movs	r1, #10
    10c4:	200d      	movs	r0, #13
    10c6:	47a0      	blx	r4
    10c8:	4b17      	ldr	r3, [pc, #92]	; (1128 <matrix_update_states+0xb0>)
    10ca:	4699      	mov	r9, r3
    10cc:	4e17      	ldr	r6, [pc, #92]	; (112c <matrix_update_states+0xb4>)
    10ce:	4b18      	ldr	r3, [pc, #96]	; (1130 <matrix_update_states+0xb8>)
    10d0:	469a      	mov	sl, r3
	if (millis() - DEBOUNCE_TIME < lastUpdateTime[x][y]) {
    10d2:	4b18      	ldr	r3, [pc, #96]	; (1134 <matrix_update_states+0xbc>)
    10d4:	4698      	mov	r8, r3
		lastUpdateTime[x][y] = millis();
    10d6:	469b      	mov	fp, r3
    10d8:	e01b      	b.n	1112 <matrix_update_states+0x9a>
	
	
	for (int i = 0; i < MATRIX_X; i++) {
		for (int j = 0; j < MATRIX_Y; j++) {
    10da:	3401      	adds	r4, #1
    10dc:	3504      	adds	r5, #4
    10de:	2c06      	cmp	r4, #6
    10e0:	d00d      	beq.n	10fe <matrix_update_states+0x86>
	if (millis() - DEBOUNCE_TIME < lastUpdateTime[x][y]) {
    10e2:	47c0      	blx	r8
    10e4:	3823      	subs	r0, #35	; 0x23
    10e6:	682b      	ldr	r3, [r5, #0]
    10e8:	4298      	cmp	r0, r3
    10ea:	d3f6      	bcc.n	10da <matrix_update_states+0x62>
	if (buttons_unbounced[x][y] != buttons_debounced[x][y]) {
    10ec:	464b      	mov	r3, r9
    10ee:	5d1b      	ldrb	r3, [r3, r4]
    10f0:	5d32      	ldrb	r2, [r6, r4]
    10f2:	429a      	cmp	r2, r3
    10f4:	d0f1      	beq.n	10da <matrix_update_states+0x62>
		buttons_debounced[x][y] = buttons_unbounced[x][y];
    10f6:	5533      	strb	r3, [r6, r4]
		lastUpdateTime[x][y] = millis();
    10f8:	47d8      	blx	fp
    10fa:	6028      	str	r0, [r5, #0]
    10fc:	e7ed      	b.n	10da <matrix_update_states+0x62>
    10fe:	2306      	movs	r3, #6
    1100:	469c      	mov	ip, r3
    1102:	44e1      	add	r9, ip
    1104:	3606      	adds	r6, #6
    1106:	3312      	adds	r3, #18
    1108:	469c      	mov	ip, r3
    110a:	44e2      	add	sl, ip
	for (int i = 0; i < MATRIX_X; i++) {
    110c:	4b0a      	ldr	r3, [pc, #40]	; (1138 <matrix_update_states+0xc0>)
    110e:	429e      	cmp	r6, r3
    1110:	d002      	beq.n	1118 <matrix_update_states+0xa0>
void matrix_update_states(void) {
    1112:	4655      	mov	r5, sl
    1114:	2400      	movs	r4, #0
    1116:	e7e4      	b.n	10e2 <matrix_update_states+0x6a>
			debounceBtn(i, j);
		}
	}	
}
    1118:	bc3c      	pop	{r2, r3, r4, r5}
    111a:	4690      	mov	r8, r2
    111c:	4699      	mov	r9, r3
    111e:	46a2      	mov	sl, r4
    1120:	46ab      	mov	fp, r5
    1122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1124:	00000edd 	.word	0x00000edd
    1128:	20000334 	.word	0x20000334
    112c:	200002f0 	.word	0x200002f0
    1130:	200001e8 	.word	0x200001e8
    1134:	000011d5 	.word	0x000011d5
    1138:	20000332 	.word	0x20000332

0000113c <matrix_get_state>:

bool matrix_get_state(matrix_key key, bool debounced) {
    113c:	b082      	sub	sp, #8
    113e:	0003      	movs	r3, r0
    1140:	9000      	str	r0, [sp, #0]
    1142:	9101      	str	r1, [sp, #4]
	if (key.x_pos >= MATRIX_X || key.y_pos>= MATRIX_Y) {
		return false;
    1144:	2000      	movs	r0, #0
	if (key.x_pos >= MATRIX_X || key.y_pos>= MATRIX_Y) {
    1146:	2b0a      	cmp	r3, #10
    1148:	d809      	bhi.n	115e <matrix_get_state+0x22>
    114a:	2905      	cmp	r1, #5
    114c:	d807      	bhi.n	115e <matrix_get_state+0x22>
	}
	
	if (debounced) {
    114e:	2a00      	cmp	r2, #0
    1150:	d107      	bne.n	1162 <matrix_get_state+0x26>
		return buttons_debounced[key.x_pos][key.y_pos];
	}
	else {
		return buttons_unbounced[key.x_pos][key.y_pos];
    1152:	005a      	lsls	r2, r3, #1
    1154:	18d3      	adds	r3, r2, r3
    1156:	005b      	lsls	r3, r3, #1
    1158:	4a05      	ldr	r2, [pc, #20]	; (1170 <matrix_get_state+0x34>)
    115a:	18d3      	adds	r3, r2, r3
    115c:	5c58      	ldrb	r0, [r3, r1]
	}
    115e:	b002      	add	sp, #8
    1160:	4770      	bx	lr
		return buttons_debounced[key.x_pos][key.y_pos];
    1162:	005a      	lsls	r2, r3, #1
    1164:	18d3      	adds	r3, r2, r3
    1166:	005b      	lsls	r3, r3, #1
    1168:	4a02      	ldr	r2, [pc, #8]	; (1174 <matrix_get_state+0x38>)
    116a:	18d3      	adds	r3, r2, r3
    116c:	5c58      	ldrb	r0, [r3, r1]
    116e:	e7f6      	b.n	115e <matrix_get_state+0x22>
    1170:	20000334 	.word	0x20000334
    1174:	200002f0 	.word	0x200002f0

00001178 <SysTick_Handler>:
volatile uint32_t millis_counter = 0;

// System interupt
void SysTick_Handler(void)
{
	millis_counter++;
    1178:	4a02      	ldr	r2, [pc, #8]	; (1184 <SysTick_Handler+0xc>)
    117a:	6813      	ldr	r3, [r2, #0]
    117c:	3301      	adds	r3, #1
    117e:	6013      	str	r3, [r2, #0]
}
    1180:	4770      	bx	lr
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	200000fc 	.word	0x200000fc

00001188 <init_timing>:

void init_timing(void) {
    1188:	b510      	push	{r4, lr}
	if (SysTick_Config( system_gclk_gen_get_hz(GCLK_GENERATOR_0) / 1000) )
    118a:	2000      	movs	r0, #0
    118c:	4b0c      	ldr	r3, [pc, #48]	; (11c0 <init_timing+0x38>)
    118e:	4798      	blx	r3
    1190:	21fa      	movs	r1, #250	; 0xfa
    1192:	0089      	lsls	r1, r1, #2
    1194:	4b0b      	ldr	r3, [pc, #44]	; (11c4 <init_timing+0x3c>)
    1196:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1198:	3801      	subs	r0, #1
    119a:	4b0b      	ldr	r3, [pc, #44]	; (11c8 <init_timing+0x40>)
    119c:	4298      	cmp	r0, r3
    119e:	d80e      	bhi.n	11be <init_timing+0x36>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    11a0:	4a0a      	ldr	r2, [pc, #40]	; (11cc <init_timing+0x44>)
    11a2:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    11a4:	480a      	ldr	r0, [pc, #40]	; (11d0 <init_timing+0x48>)
    11a6:	6a03      	ldr	r3, [r0, #32]
    11a8:	021b      	lsls	r3, r3, #8
    11aa:	0a1b      	lsrs	r3, r3, #8
    11ac:	21c0      	movs	r1, #192	; 0xc0
    11ae:	0609      	lsls	r1, r1, #24
    11b0:	430b      	orrs	r3, r1
    11b2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    11b4:	2300      	movs	r3, #0
    11b6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    11b8:	3307      	adds	r3, #7
    11ba:	6013      	str	r3, [r2, #0]
	{
		while (1) {
			// error
		}
	}
}
    11bc:	bd10      	pop	{r4, pc}
    11be:	e7fe      	b.n	11be <init_timing+0x36>
    11c0:	00002411 	.word	0x00002411
    11c4:	00004361 	.word	0x00004361
    11c8:	00ffffff 	.word	0x00ffffff
    11cc:	e000e010 	.word	0xe000e010
    11d0:	e000ed00 	.word	0xe000ed00

000011d4 <millis>:

uint32_t millis(void) {
	return millis_counter;
    11d4:	4b01      	ldr	r3, [pc, #4]	; (11dc <millis+0x8>)
    11d6:	6818      	ldr	r0, [r3, #0]
}
    11d8:	4770      	bx	lr
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	200000fc 	.word	0x200000fc

000011e0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    11e0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    11e2:	2000      	movs	r0, #0
    11e4:	4b08      	ldr	r3, [pc, #32]	; (1208 <delay_init+0x28>)
    11e6:	4798      	blx	r3
    11e8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    11ea:	4c08      	ldr	r4, [pc, #32]	; (120c <delay_init+0x2c>)
    11ec:	21fa      	movs	r1, #250	; 0xfa
    11ee:	0089      	lsls	r1, r1, #2
    11f0:	47a0      	blx	r4
    11f2:	4b07      	ldr	r3, [pc, #28]	; (1210 <delay_init+0x30>)
    11f4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    11f6:	4907      	ldr	r1, [pc, #28]	; (1214 <delay_init+0x34>)
    11f8:	0028      	movs	r0, r5
    11fa:	47a0      	blx	r4
    11fc:	4b06      	ldr	r3, [pc, #24]	; (1218 <delay_init+0x38>)
    11fe:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1200:	2205      	movs	r2, #5
    1202:	4b06      	ldr	r3, [pc, #24]	; (121c <delay_init+0x3c>)
    1204:	601a      	str	r2, [r3, #0]
}
    1206:	bd70      	pop	{r4, r5, r6, pc}
    1208:	00002411 	.word	0x00002411
    120c:	00004361 	.word	0x00004361
    1210:	20000000 	.word	0x20000000
    1214:	000f4240 	.word	0x000f4240
    1218:	20000004 	.word	0x20000004
    121c:	e000e010 	.word	0xe000e010

00001220 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1220:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1222:	4b08      	ldr	r3, [pc, #32]	; (1244 <delay_cycles_ms+0x24>)
    1224:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1226:	4a08      	ldr	r2, [pc, #32]	; (1248 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1228:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    122a:	2180      	movs	r1, #128	; 0x80
    122c:	0249      	lsls	r1, r1, #9
	while (n--) {
    122e:	3801      	subs	r0, #1
    1230:	d307      	bcc.n	1242 <delay_cycles_ms+0x22>
	if (n > 0) {
    1232:	2c00      	cmp	r4, #0
    1234:	d0fb      	beq.n	122e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1236:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1238:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    123a:	6813      	ldr	r3, [r2, #0]
    123c:	420b      	tst	r3, r1
    123e:	d0fc      	beq.n	123a <delay_cycles_ms+0x1a>
    1240:	e7f5      	b.n	122e <delay_cycles_ms+0xe>
	}
}
    1242:	bd30      	pop	{r4, r5, pc}
    1244:	20000000 	.word	0x20000000
    1248:	e000e010 	.word	0xe000e010

0000124c <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
    124c:	2000      	movs	r0, #0
    124e:	4770      	bx	lr

00001250 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    1250:	4b0b      	ldr	r3, [pc, #44]	; (1280 <udi_hid_kbd_setreport+0x30>)
    1252:	885b      	ldrh	r3, [r3, #2]
    1254:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
    1256:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    1258:	2a02      	cmp	r2, #2
    125a:	d000      	beq.n	125e <udi_hid_kbd_setreport+0xe>
}
    125c:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    125e:	32fd      	adds	r2, #253	; 0xfd
    1260:	421a      	tst	r2, r3
    1262:	d1fb      	bne.n	125c <udi_hid_kbd_setreport+0xc>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <udi_hid_kbd_setreport+0x30>)
    1266:	88db      	ldrh	r3, [r3, #6]
    1268:	2b01      	cmp	r3, #1
    126a:	d1f7      	bne.n	125c <udi_hid_kbd_setreport+0xc>
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
    126c:	4b04      	ldr	r3, [pc, #16]	; (1280 <udi_hid_kbd_setreport+0x30>)
    126e:	4a05      	ldr	r2, [pc, #20]	; (1284 <udi_hid_kbd_setreport+0x34>)
    1270:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
    1272:	4a05      	ldr	r2, [pc, #20]	; (1288 <udi_hid_kbd_setreport+0x38>)
    1274:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
    1276:	2201      	movs	r2, #1
    1278:	819a      	strh	r2, [r3, #12]
		return true;
    127a:	3001      	adds	r0, #1
    127c:	e7ee      	b.n	125c <udi_hid_kbd_setreport+0xc>
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	20000568 	.word	0x20000568
    1284:	20000114 	.word	0x20000114
    1288:	0000128d 	.word	0x0000128d

0000128c <udi_hid_kbd_setreport_valid>:
}

static void udi_hid_kbd_setreport_valid(void)
{
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
}
    128c:	4770      	bx	lr
	...

00001290 <udi_hid_kbd_enable>:
{
    1290:	b510      	push	{r4, lr}
	udi_hid_kbd_rate = 0;
    1292:	2400      	movs	r4, #0
    1294:	4b07      	ldr	r3, [pc, #28]	; (12b4 <udi_hid_kbd_enable+0x24>)
    1296:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_protocol = 0;
    1298:	4b07      	ldr	r3, [pc, #28]	; (12b8 <udi_hid_kbd_enable+0x28>)
    129a:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
    129c:	4b07      	ldr	r3, [pc, #28]	; (12bc <udi_hid_kbd_enable+0x2c>)
    129e:	701c      	strb	r4, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
    12a0:	2208      	movs	r2, #8
    12a2:	2100      	movs	r1, #0
    12a4:	4806      	ldr	r0, [pc, #24]	; (12c0 <udi_hid_kbd_enable+0x30>)
    12a6:	4b07      	ldr	r3, [pc, #28]	; (12c4 <udi_hid_kbd_enable+0x34>)
    12a8:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
    12aa:	4b07      	ldr	r3, [pc, #28]	; (12c8 <udi_hid_kbd_enable+0x38>)
    12ac:	701c      	strb	r4, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
    12ae:	4b07      	ldr	r3, [pc, #28]	; (12cc <udi_hid_kbd_enable+0x3c>)
    12b0:	4798      	blx	r3
}
    12b2:	bd10      	pop	{r4, pc}
    12b4:	20000108 	.word	0x20000108
    12b8:	20000104 	.word	0x20000104
    12bc:	20000100 	.word	0x20000100
    12c0:	2000010c 	.word	0x2000010c
    12c4:	000046e7 	.word	0x000046e7
    12c8:	20000101 	.word	0x20000101
    12cc:	00004349 	.word	0x00004349

000012d0 <udi_hid_kbd_disable>:
{
    12d0:	b510      	push	{r4, lr}
	UDI_HID_KBD_DISABLE_EXT();
    12d2:	4b01      	ldr	r3, [pc, #4]	; (12d8 <udi_hid_kbd_disable+0x8>)
    12d4:	4798      	blx	r3
}
    12d6:	bd10      	pop	{r4, pc}
    12d8:	00004355 	.word	0x00004355

000012dc <udi_hid_kbd_setup>:
{
    12dc:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_kbd_rate,
    12de:	4b03      	ldr	r3, [pc, #12]	; (12ec <udi_hid_kbd_setup+0x10>)
    12e0:	4a03      	ldr	r2, [pc, #12]	; (12f0 <udi_hid_kbd_setup+0x14>)
    12e2:	4904      	ldr	r1, [pc, #16]	; (12f4 <udi_hid_kbd_setup+0x18>)
    12e4:	4804      	ldr	r0, [pc, #16]	; (12f8 <udi_hid_kbd_setup+0x1c>)
    12e6:	4c05      	ldr	r4, [pc, #20]	; (12fc <udi_hid_kbd_setup+0x20>)
    12e8:	47a0      	blx	r4
}
    12ea:	bd10      	pop	{r4, pc}
    12ec:	00001251 	.word	0x00001251
    12f0:	2000001c 	.word	0x2000001c
    12f4:	20000104 	.word	0x20000104
    12f8:	20000108 	.word	0x20000108
    12fc:	0000157d 	.word	0x0000157d

00001300 <udi_hid_kbd_send_report>:
{
    1300:	b510      	push	{r4, lr}
    1302:	b082      	sub	sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
    1304:	4b0b      	ldr	r3, [pc, #44]	; (1334 <udi_hid_kbd_send_report+0x34>)
    1306:	781b      	ldrb	r3, [r3, #0]
		return false;
    1308:	2000      	movs	r0, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
    130a:	2b00      	cmp	r3, #0
    130c:	d001      	beq.n	1312 <udi_hid_kbd_send_report+0x12>
}
    130e:	b002      	add	sp, #8
    1310:	bd10      	pop	{r4, pc}
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
    1312:	4a09      	ldr	r2, [pc, #36]	; (1338 <udi_hid_kbd_send_report+0x38>)
    1314:	4b09      	ldr	r3, [pc, #36]	; (133c <udi_hid_kbd_send_report+0x3c>)
    1316:	0011      	movs	r1, r2
    1318:	cb11      	ldmia	r3!, {r0, r4}
    131a:	c111      	stmia	r1!, {r0, r4}
	udi_hid_kbd_b_report_valid = false;
    131c:	2100      	movs	r1, #0
    131e:	4b08      	ldr	r3, [pc, #32]	; (1340 <udi_hid_kbd_send_report+0x40>)
    1320:	7019      	strb	r1, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
    1322:	4b08      	ldr	r3, [pc, #32]	; (1344 <udi_hid_kbd_send_report+0x44>)
    1324:	9300      	str	r3, [sp, #0]
    1326:	2308      	movs	r3, #8
    1328:	2081      	movs	r0, #129	; 0x81
    132a:	4c07      	ldr	r4, [pc, #28]	; (1348 <udi_hid_kbd_send_report+0x48>)
    132c:	47a0      	blx	r4
	udi_hid_kbd_b_report_trans_ongoing =
    132e:	4a01      	ldr	r2, [pc, #4]	; (1334 <udi_hid_kbd_send_report+0x34>)
    1330:	7010      	strb	r0, [r2, #0]
	return udi_hid_kbd_b_report_trans_ongoing;
    1332:	e7ec      	b.n	130e <udi_hid_kbd_send_report+0xe>
    1334:	20000100 	.word	0x20000100
    1338:	20000118 	.word	0x20000118
    133c:	2000010c 	.word	0x2000010c
    1340:	20000101 	.word	0x20000101
    1344:	0000134d 	.word	0x0000134d
    1348:	00002fd1 	.word	0x00002fd1

0000134c <udi_hid_kbd_report_sent>:
{
    134c:	b510      	push	{r4, lr}
	udi_hid_kbd_b_report_trans_ongoing = false;
    134e:	2200      	movs	r2, #0
    1350:	4b04      	ldr	r3, [pc, #16]	; (1364 <udi_hid_kbd_report_sent+0x18>)
    1352:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
    1354:	4b04      	ldr	r3, [pc, #16]	; (1368 <udi_hid_kbd_report_sent+0x1c>)
    1356:	781b      	ldrb	r3, [r3, #0]
    1358:	2b00      	cmp	r3, #0
    135a:	d100      	bne.n	135e <udi_hid_kbd_report_sent+0x12>
}
    135c:	bd10      	pop	{r4, pc}
		udi_hid_kbd_send_report();
    135e:	4b03      	ldr	r3, [pc, #12]	; (136c <udi_hid_kbd_report_sent+0x20>)
    1360:	4798      	blx	r3
}
    1362:	e7fb      	b.n	135c <udi_hid_kbd_report_sent+0x10>
    1364:	20000100 	.word	0x20000100
    1368:	20000101 	.word	0x20000101
    136c:	00001301 	.word	0x00001301

00001370 <udi_hid_kbd_modifier_up>:
{
    1370:	b510      	push	{r4, lr}
    1372:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1374:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1378:	425a      	negs	r2, r3
    137a:	4153      	adcs	r3, r2
    137c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    137e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1380:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1384:	2200      	movs	r2, #0
    1386:	4b0b      	ldr	r3, [pc, #44]	; (13b4 <udi_hid_kbd_modifier_up+0x44>)
    1388:	701a      	strb	r2, [r3, #0]
	return flags;
    138a:	9c01      	ldr	r4, [sp, #4]
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
    138c:	4a0a      	ldr	r2, [pc, #40]	; (13b8 <udi_hid_kbd_modifier_up+0x48>)
    138e:	7813      	ldrb	r3, [r2, #0]
    1390:	4383      	bics	r3, r0
    1392:	7013      	strb	r3, [r2, #0]
	udi_hid_kbd_b_report_valid = true;
    1394:	2201      	movs	r2, #1
    1396:	4b09      	ldr	r3, [pc, #36]	; (13bc <udi_hid_kbd_modifier_up+0x4c>)
    1398:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
    139a:	4b09      	ldr	r3, [pc, #36]	; (13c0 <udi_hid_kbd_modifier_up+0x50>)
    139c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    139e:	2c00      	cmp	r4, #0
    13a0:	d005      	beq.n	13ae <udi_hid_kbd_modifier_up+0x3e>
		cpu_irq_enable();
    13a2:	2201      	movs	r2, #1
    13a4:	4b03      	ldr	r3, [pc, #12]	; (13b4 <udi_hid_kbd_modifier_up+0x44>)
    13a6:	701a      	strb	r2, [r3, #0]
    13a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    13ac:	b662      	cpsie	i
}
    13ae:	2001      	movs	r0, #1
    13b0:	b002      	add	sp, #8
    13b2:	bd10      	pop	{r4, pc}
    13b4:	200000d8 	.word	0x200000d8
    13b8:	2000010c 	.word	0x2000010c
    13bc:	20000101 	.word	0x20000101
    13c0:	00001301 	.word	0x00001301

000013c4 <udi_hid_kbd_modifier_down>:
{
    13c4:	b510      	push	{r4, lr}
    13c6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    13c8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    13cc:	425a      	negs	r2, r3
    13ce:	4153      	adcs	r3, r2
    13d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    13d2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    13d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    13d8:	2200      	movs	r2, #0
    13da:	4b0b      	ldr	r3, [pc, #44]	; (1408 <udi_hid_kbd_modifier_down+0x44>)
    13dc:	701a      	strb	r2, [r3, #0]
	return flags;
    13de:	9c01      	ldr	r4, [sp, #4]
	udi_hid_kbd_report[0] |= modifier_id;
    13e0:	4b0a      	ldr	r3, [pc, #40]	; (140c <udi_hid_kbd_modifier_down+0x48>)
    13e2:	781a      	ldrb	r2, [r3, #0]
    13e4:	4310      	orrs	r0, r2
    13e6:	7018      	strb	r0, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    13e8:	2201      	movs	r2, #1
    13ea:	4b09      	ldr	r3, [pc, #36]	; (1410 <udi_hid_kbd_modifier_down+0x4c>)
    13ec:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
    13ee:	4b09      	ldr	r3, [pc, #36]	; (1414 <udi_hid_kbd_modifier_down+0x50>)
    13f0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    13f2:	2c00      	cmp	r4, #0
    13f4:	d005      	beq.n	1402 <udi_hid_kbd_modifier_down+0x3e>
		cpu_irq_enable();
    13f6:	2201      	movs	r2, #1
    13f8:	4b03      	ldr	r3, [pc, #12]	; (1408 <udi_hid_kbd_modifier_down+0x44>)
    13fa:	701a      	strb	r2, [r3, #0]
    13fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1400:	b662      	cpsie	i
}
    1402:	2001      	movs	r0, #1
    1404:	b002      	add	sp, #8
    1406:	bd10      	pop	{r4, pc}
    1408:	200000d8 	.word	0x200000d8
    140c:	2000010c 	.word	0x2000010c
    1410:	20000101 	.word	0x20000101
    1414:	00001301 	.word	0x00001301

00001418 <udi_hid_kbd_up>:
{
    1418:	b530      	push	{r4, r5, lr}
    141a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    141c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1420:	425a      	negs	r2, r3
    1422:	4153      	adcs	r3, r2
    1424:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1426:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1428:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    142c:	2200      	movs	r2, #0
    142e:	4b26      	ldr	r3, [pc, #152]	; (14c8 <udi_hid_kbd_up+0xb0>)
    1430:	701a      	strb	r2, [r3, #0]
	return flags;
    1432:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i]) {
    1434:	4b25      	ldr	r3, [pc, #148]	; (14cc <udi_hid_kbd_up+0xb4>)
    1436:	789b      	ldrb	r3, [r3, #2]
    1438:	2b00      	cmp	r3, #0
    143a:	d016      	beq.n	146a <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
    143c:	4298      	cmp	r0, r3
    143e:	d041      	beq.n	14c4 <udi_hid_kbd_up+0xac>
    1440:	4b22      	ldr	r3, [pc, #136]	; (14cc <udi_hid_kbd_up+0xb4>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1442:	3203      	adds	r2, #3
		if (0 == udi_hid_kbd_report[i]) {
    1444:	78d9      	ldrb	r1, [r3, #3]
    1446:	2900      	cmp	r1, #0
    1448:	d00f      	beq.n	146a <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
    144a:	4281      	cmp	r1, r0
    144c:	d016      	beq.n	147c <udi_hid_kbd_up+0x64>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    144e:	3201      	adds	r2, #1
    1450:	b2d2      	uxtb	r2, r2
    1452:	3301      	adds	r3, #1
    1454:	2a08      	cmp	r2, #8
    1456:	d1f5      	bne.n	1444 <udi_hid_kbd_up+0x2c>
	if (cpu_irq_is_enabled_flags(flags))
    1458:	2c00      	cmp	r4, #0
    145a:	d030      	beq.n	14be <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
    145c:	2201      	movs	r2, #1
    145e:	4b1a      	ldr	r3, [pc, #104]	; (14c8 <udi_hid_kbd_up+0xb0>)
    1460:	701a      	strb	r2, [r3, #0]
    1462:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1466:	b662      	cpsie	i
    1468:	e029      	b.n	14be <udi_hid_kbd_up+0xa6>
	if (cpu_irq_is_enabled_flags(flags))
    146a:	2c00      	cmp	r4, #0
    146c:	d027      	beq.n	14be <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
    146e:	2201      	movs	r2, #1
    1470:	4b15      	ldr	r3, [pc, #84]	; (14c8 <udi_hid_kbd_up+0xb0>)
    1472:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1474:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1478:	b662      	cpsie	i
    147a:	e020      	b.n	14be <udi_hid_kbd_up+0xa6>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    147c:	2a08      	cmp	r2, #8
    147e:	d0eb      	beq.n	1458 <udi_hid_kbd_up+0x40>
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1480:	2a06      	cmp	r2, #6
    1482:	d80c      	bhi.n	149e <udi_hid_kbd_up+0x86>
    1484:	4911      	ldr	r1, [pc, #68]	; (14cc <udi_hid_kbd_up+0xb4>)
    1486:	188b      	adds	r3, r1, r2
    1488:	1c55      	adds	r5, r2, #1
    148a:	2006      	movs	r0, #6
    148c:	1a82      	subs	r2, r0, r2
    148e:	b2d2      	uxtb	r2, r2
    1490:	18aa      	adds	r2, r5, r2
    1492:	188a      	adds	r2, r1, r2
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    1494:	7859      	ldrb	r1, [r3, #1]
    1496:	7019      	strb	r1, [r3, #0]
    1498:	3301      	adds	r3, #1
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    149a:	4293      	cmp	r3, r2
    149c:	d1fa      	bne.n	1494 <udi_hid_kbd_up+0x7c>
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    149e:	2200      	movs	r2, #0
    14a0:	4b0a      	ldr	r3, [pc, #40]	; (14cc <udi_hid_kbd_up+0xb4>)
    14a2:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
    14a4:	3201      	adds	r2, #1
    14a6:	4b0a      	ldr	r3, [pc, #40]	; (14d0 <udi_hid_kbd_up+0xb8>)
    14a8:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
    14aa:	4b0a      	ldr	r3, [pc, #40]	; (14d4 <udi_hid_kbd_up+0xbc>)
    14ac:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    14ae:	2c00      	cmp	r4, #0
    14b0:	d005      	beq.n	14be <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
    14b2:	2201      	movs	r2, #1
    14b4:	4b04      	ldr	r3, [pc, #16]	; (14c8 <udi_hid_kbd_up+0xb0>)
    14b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    14b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    14bc:	b662      	cpsie	i
}
    14be:	2001      	movs	r0, #1
    14c0:	b003      	add	sp, #12
    14c2:	bd30      	pop	{r4, r5, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    14c4:	2202      	movs	r2, #2
    14c6:	e7dd      	b.n	1484 <udi_hid_kbd_up+0x6c>
    14c8:	200000d8 	.word	0x200000d8
    14cc:	2000010c 	.word	0x2000010c
    14d0:	20000101 	.word	0x20000101
    14d4:	00001301 	.word	0x00001301

000014d8 <udi_hid_kbd_down>:
{
    14d8:	b510      	push	{r4, lr}
    14da:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14dc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    14e0:	425a      	negs	r2, r3
    14e2:	4153      	adcs	r3, r2
    14e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    14e6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    14e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    14ec:	2200      	movs	r2, #0
    14ee:	4b1f      	ldr	r3, [pc, #124]	; (156c <udi_hid_kbd_down+0x94>)
    14f0:	701a      	strb	r2, [r3, #0]
	return flags;
    14f2:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i])
    14f4:	4b1e      	ldr	r3, [pc, #120]	; (1570 <udi_hid_kbd_down+0x98>)
    14f6:	789b      	ldrb	r3, [r3, #2]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d035      	beq.n	1568 <udi_hid_kbd_down+0x90>
		if (key_id == udi_hid_kbd_report[i]) {
    14fc:	4298      	cmp	r0, r3
    14fe:	d015      	beq.n	152c <udi_hid_kbd_down+0x54>
    1500:	4a1b      	ldr	r2, [pc, #108]	; (1570 <udi_hid_kbd_down+0x98>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1502:	2303      	movs	r3, #3
		if (0 == udi_hid_kbd_report[i])
    1504:	78d1      	ldrb	r1, [r2, #3]
    1506:	2900      	cmp	r1, #0
    1508:	d01a      	beq.n	1540 <udi_hid_kbd_down+0x68>
		if (key_id == udi_hid_kbd_report[i]) {
    150a:	4281      	cmp	r1, r0
    150c:	d00e      	beq.n	152c <udi_hid_kbd_down+0x54>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    150e:	3301      	adds	r3, #1
    1510:	b2db      	uxtb	r3, r3
    1512:	3201      	adds	r2, #1
    1514:	2b08      	cmp	r3, #8
    1516:	d1f5      	bne.n	1504 <udi_hid_kbd_down+0x2c>
		return false;
    1518:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
    151a:	2c00      	cmp	r4, #0
    151c:	d022      	beq.n	1564 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
    151e:	2201      	movs	r2, #1
    1520:	4b12      	ldr	r3, [pc, #72]	; (156c <udi_hid_kbd_down+0x94>)
    1522:	701a      	strb	r2, [r3, #0]
    1524:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1528:	b662      	cpsie	i
    152a:	e01b      	b.n	1564 <udi_hid_kbd_down+0x8c>
			return true;
    152c:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
    152e:	2c00      	cmp	r4, #0
    1530:	d018      	beq.n	1564 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
    1532:	2201      	movs	r2, #1
    1534:	4b0d      	ldr	r3, [pc, #52]	; (156c <udi_hid_kbd_down+0x94>)
    1536:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1538:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    153c:	b662      	cpsie	i
    153e:	e011      	b.n	1564 <udi_hid_kbd_down+0x8c>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1540:	2b08      	cmp	r3, #8
    1542:	d0e9      	beq.n	1518 <udi_hid_kbd_down+0x40>
	udi_hid_kbd_report[i] = key_id;
    1544:	4a0a      	ldr	r2, [pc, #40]	; (1570 <udi_hid_kbd_down+0x98>)
    1546:	54d0      	strb	r0, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
    1548:	2201      	movs	r2, #1
    154a:	4b0a      	ldr	r3, [pc, #40]	; (1574 <udi_hid_kbd_down+0x9c>)
    154c:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
    154e:	4b0a      	ldr	r3, [pc, #40]	; (1578 <udi_hid_kbd_down+0xa0>)
    1550:	4798      	blx	r3
	return true;
    1552:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
    1554:	2c00      	cmp	r4, #0
    1556:	d005      	beq.n	1564 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
    1558:	2201      	movs	r2, #1
    155a:	4b04      	ldr	r3, [pc, #16]	; (156c <udi_hid_kbd_down+0x94>)
    155c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    155e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1562:	b662      	cpsie	i
}
    1564:	b002      	add	sp, #8
    1566:	bd10      	pop	{r4, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1568:	2302      	movs	r3, #2
    156a:	e7eb      	b.n	1544 <udi_hid_kbd_down+0x6c>
    156c:	200000d8 	.word	0x200000d8
    1570:	2000010c 	.word	0x2000010c
    1574:	20000101 	.word	0x20000101
    1578:	00001301 	.word	0x00001301

0000157c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    157c:	b570      	push	{r4, r5, r6, lr}
    157e:	0005      	movs	r5, r0
    1580:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
    1582:	4a3b      	ldr	r2, [pc, #236]	; (1670 <udi_hid_setup+0xf4>)
    1584:	7812      	ldrb	r2, [r2, #0]
    1586:	b250      	sxtb	r0, r2
    1588:	2800      	cmp	r0, #0
    158a:	db05      	blt.n	1598 <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    158c:	2460      	movs	r4, #96	; 0x60
    158e:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1590:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1592:	2a20      	cmp	r2, #32
    1594:	d04f      	beq.n	1636 <udi_hid_setup+0xba>
}
    1596:	bd70      	pop	{r4, r5, r6, pc}
    1598:	2060      	movs	r0, #96	; 0x60
    159a:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    159c:	d103      	bne.n	15a6 <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
    159e:	4834      	ldr	r0, [pc, #208]	; (1670 <udi_hid_setup+0xf4>)
    15a0:	7840      	ldrb	r0, [r0, #1]
    15a2:	2806      	cmp	r0, #6
    15a4:	d00d      	beq.n	15c2 <udi_hid_setup+0x46>
	return false;	// Request not supported
    15a6:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    15a8:	2a20      	cmp	r2, #32
    15aa:	d1f4      	bne.n	1596 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
    15ac:	4a30      	ldr	r2, [pc, #192]	; (1670 <udi_hid_setup+0xf4>)
    15ae:	7852      	ldrb	r2, [r2, #1]
    15b0:	2a02      	cmp	r2, #2
    15b2:	d034      	beq.n	161e <udi_hid_setup+0xa2>
    15b4:	2a03      	cmp	r2, #3
    15b6:	d038      	beq.n	162a <udi_hid_setup+0xae>
	return false;	// Request not supported
    15b8:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    15ba:	2a01      	cmp	r2, #1
    15bc:	d1eb      	bne.n	1596 <udi_hid_setup+0x1a>
				return setup_report();
    15be:	4798      	blx	r3
    15c0:	e7e9      	b.n	1596 <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    15c2:	4b2c      	ldr	r3, [pc, #176]	; (1674 <udi_hid_setup+0xf8>)
    15c4:	4798      	blx	r3
    15c6:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    15c8:	7a82      	ldrb	r2, [r0, #10]
		return false;
    15ca:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    15cc:	2a21      	cmp	r2, #33	; 0x21
    15ce:	d1e2      	bne.n	1596 <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    15d0:	4a27      	ldr	r2, [pc, #156]	; (1670 <udi_hid_setup+0xf4>)
    15d2:	8852      	ldrh	r2, [r2, #2]
    15d4:	0a12      	lsrs	r2, r2, #8
    15d6:	2a21      	cmp	r2, #33	; 0x21
    15d8:	d013      	beq.n	1602 <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    15da:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    15dc:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
    15de:	4291      	cmp	r1, r2
    15e0:	d1d9      	bne.n	1596 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
    15e2:	4a23      	ldr	r2, [pc, #140]	; (1670 <udi_hid_setup+0xf4>)
    15e4:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
    15e6:	7c19      	ldrb	r1, [r3, #16]
    15e8:	3309      	adds	r3, #9
    15ea:	7a1b      	ldrb	r3, [r3, #8]
    15ec:	021b      	lsls	r3, r3, #8
    15ee:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
    15f0:	88d0      	ldrh	r0, [r2, #6]
    15f2:	1c19      	adds	r1, r3, #0
    15f4:	b29b      	uxth	r3, r3
    15f6:	4283      	cmp	r3, r0
    15f8:	d900      	bls.n	15fc <udi_hid_setup+0x80>
    15fa:	1c01      	adds	r1, r0, #0
    15fc:	8191      	strh	r1, [r2, #12]
		return true;
    15fe:	2001      	movs	r0, #1
    1600:	e7c9      	b.n	1596 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1602:	4a1b      	ldr	r2, [pc, #108]	; (1670 <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    1604:	0019      	movs	r1, r3
    1606:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1608:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
    160a:	7a5b      	ldrb	r3, [r3, #9]
    160c:	88d0      	ldrh	r0, [r2, #6]
    160e:	1c19      	adds	r1, r3, #0
    1610:	b29b      	uxth	r3, r3
    1612:	4283      	cmp	r3, r0
    1614:	d900      	bls.n	1618 <udi_hid_setup+0x9c>
    1616:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
    1618:	8191      	strh	r1, [r2, #12]
		return true;
    161a:	2001      	movs	r0, #1
    161c:	e7bb      	b.n	1596 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
    161e:	4b14      	ldr	r3, [pc, #80]	; (1670 <udi_hid_setup+0xf4>)
    1620:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1622:	2201      	movs	r2, #1
    1624:	819a      	strh	r2, [r3, #12]
				return true;
    1626:	2001      	movs	r0, #1
    1628:	e7b5      	b.n	1596 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
    162a:	4b11      	ldr	r3, [pc, #68]	; (1670 <udi_hid_setup+0xf4>)
    162c:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    162e:	2201      	movs	r2, #1
    1630:	819a      	strh	r2, [r3, #12]
				return true;
    1632:	2001      	movs	r0, #1
    1634:	e7af      	b.n	1596 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
    1636:	4a0e      	ldr	r2, [pc, #56]	; (1670 <udi_hid_setup+0xf4>)
    1638:	7852      	ldrb	r2, [r2, #1]
    163a:	2a0a      	cmp	r2, #10
    163c:	d006      	beq.n	164c <udi_hid_setup+0xd0>
    163e:	2a0b      	cmp	r2, #11
    1640:	d00a      	beq.n	1658 <udi_hid_setup+0xdc>
	return false;	// Request not supported
    1642:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1644:	2a09      	cmp	r2, #9
    1646:	d1a6      	bne.n	1596 <udi_hid_setup+0x1a>
				return setup_report();
    1648:	4798      	blx	r3
    164a:	e7a4      	b.n	1596 <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    164c:	4b08      	ldr	r3, [pc, #32]	; (1670 <udi_hid_setup+0xf4>)
    164e:	885b      	ldrh	r3, [r3, #2]
    1650:	0a1b      	lsrs	r3, r3, #8
    1652:	702b      	strb	r3, [r5, #0]
				return true;
    1654:	2001      	movs	r0, #1
    1656:	e79e      	b.n	1596 <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
    1658:	4b05      	ldr	r3, [pc, #20]	; (1670 <udi_hid_setup+0xf4>)
    165a:	88db      	ldrh	r3, [r3, #6]
					return false;
    165c:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
    165e:	2b00      	cmp	r3, #0
    1660:	d000      	beq.n	1664 <udi_hid_setup+0xe8>
    1662:	e798      	b.n	1596 <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
    1664:	4b02      	ldr	r3, [pc, #8]	; (1670 <udi_hid_setup+0xf4>)
    1666:	885b      	ldrh	r3, [r3, #2]
    1668:	700b      	strb	r3, [r1, #0]
				return true;
    166a:	3001      	adds	r0, #1
    166c:	e793      	b.n	1596 <udi_hid_setup+0x1a>
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	20000568 	.word	0x20000568
    1674:	00001815 	.word	0x00001815

00001678 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1678:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    167a:	4b11      	ldr	r3, [pc, #68]	; (16c0 <udc_next_desc_in_iface+0x48>)
    167c:	681b      	ldr	r3, [r3, #0]
    167e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1680:	7894      	ldrb	r4, [r2, #2]
    1682:	78d3      	ldrb	r3, [r2, #3]
    1684:	021b      	lsls	r3, r3, #8
    1686:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1688:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    168a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    168c:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    168e:	4290      	cmp	r0, r2
    1690:	d210      	bcs.n	16b4 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1692:	7843      	ldrb	r3, [r0, #1]
    1694:	2b04      	cmp	r3, #4
    1696:	d00f      	beq.n	16b8 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1698:	428b      	cmp	r3, r1
    169a:	d00a      	beq.n	16b2 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    169c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    169e:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    16a0:	4290      	cmp	r0, r2
    16a2:	d205      	bcs.n	16b0 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    16a4:	7843      	ldrb	r3, [r0, #1]
    16a6:	2b04      	cmp	r3, #4
    16a8:	d008      	beq.n	16bc <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    16aa:	428b      	cmp	r3, r1
    16ac:	d1f6      	bne.n	169c <udc_next_desc_in_iface+0x24>
    16ae:	e000      	b.n	16b2 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    16b0:	2000      	movs	r0, #0
}
    16b2:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    16b4:	2000      	movs	r0, #0
    16b6:	e7fc      	b.n	16b2 <udc_next_desc_in_iface+0x3a>
    16b8:	2000      	movs	r0, #0
    16ba:	e7fa      	b.n	16b2 <udc_next_desc_in_iface+0x3a>
    16bc:	2000      	movs	r0, #0
    16be:	e7f8      	b.n	16b2 <udc_next_desc_in_iface+0x3a>
    16c0:	2000012c 	.word	0x2000012c

000016c4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    16c4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    16c6:	4b03      	ldr	r3, [pc, #12]	; (16d4 <udc_valid_address+0x10>)
    16c8:	885b      	ldrh	r3, [r3, #2]
    16ca:	207f      	movs	r0, #127	; 0x7f
    16cc:	4018      	ands	r0, r3
    16ce:	4b02      	ldr	r3, [pc, #8]	; (16d8 <udc_valid_address+0x14>)
    16d0:	4798      	blx	r3
}
    16d2:	bd10      	pop	{r4, pc}
    16d4:	20000568 	.word	0x20000568
    16d8:	000031a9 	.word	0x000031a9

000016dc <udc_update_iface_desc>:
{
    16dc:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    16de:	4b19      	ldr	r3, [pc, #100]	; (1744 <udc_update_iface_desc+0x68>)
    16e0:	781b      	ldrb	r3, [r3, #0]
		return false;
    16e2:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    16e4:	2b00      	cmp	r3, #0
    16e6:	d029      	beq.n	173c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16e8:	4b17      	ldr	r3, [pc, #92]	; (1748 <udc_update_iface_desc+0x6c>)
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	681b      	ldr	r3, [r3, #0]
    16ee:	791c      	ldrb	r4, [r3, #4]
    16f0:	4284      	cmp	r4, r0
    16f2:	d923      	bls.n	173c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    16f4:	4a15      	ldr	r2, [pc, #84]	; (174c <udc_update_iface_desc+0x70>)
    16f6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    16f8:	789a      	ldrb	r2, [r3, #2]
    16fa:	78dc      	ldrb	r4, [r3, #3]
    16fc:	0224      	lsls	r4, r4, #8
    16fe:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1700:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1702:	42a3      	cmp	r3, r4
    1704:	d21c      	bcs.n	1740 <udc_update_iface_desc+0x64>
    1706:	2500      	movs	r5, #0
    1708:	2601      	movs	r6, #1
    170a:	e007      	b.n	171c <udc_update_iface_desc+0x40>
    170c:	4a0f      	ldr	r2, [pc, #60]	; (174c <udc_update_iface_desc+0x70>)
    170e:	6013      	str	r3, [r2, #0]
    1710:	e00f      	b.n	1732 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1712:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1714:	189b      	adds	r3, r3, r2
    1716:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1718:	42a3      	cmp	r3, r4
    171a:	d20c      	bcs.n	1736 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    171c:	785a      	ldrb	r2, [r3, #1]
    171e:	2a04      	cmp	r2, #4
    1720:	d1f7      	bne.n	1712 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1722:	789a      	ldrb	r2, [r3, #2]
    1724:	4282      	cmp	r2, r0
    1726:	d1f4      	bne.n	1712 <udc_update_iface_desc+0x36>
    1728:	78da      	ldrb	r2, [r3, #3]
    172a:	428a      	cmp	r2, r1
    172c:	d1f1      	bne.n	1712 <udc_update_iface_desc+0x36>
    172e:	2d00      	cmp	r5, #0
    1730:	d1ec      	bne.n	170c <udc_update_iface_desc+0x30>
				return true; // Interface found
    1732:	2201      	movs	r2, #1
    1734:	e002      	b.n	173c <udc_update_iface_desc+0x60>
    1736:	4a05      	ldr	r2, [pc, #20]	; (174c <udc_update_iface_desc+0x70>)
    1738:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    173a:	2200      	movs	r2, #0
}
    173c:	0010      	movs	r0, r2
    173e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1740:	2200      	movs	r2, #0
    1742:	e7fb      	b.n	173c <udc_update_iface_desc+0x60>
    1744:	20000128 	.word	0x20000128
    1748:	2000012c 	.word	0x2000012c
    174c:	20000130 	.word	0x20000130

00001750 <udc_iface_disable>:
{
    1750:	b5f0      	push	{r4, r5, r6, r7, lr}
    1752:	46c6      	mov	lr, r8
    1754:	b500      	push	{lr}
    1756:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1758:	2100      	movs	r1, #0
    175a:	4b13      	ldr	r3, [pc, #76]	; (17a8 <udc_iface_disable+0x58>)
    175c:	4798      	blx	r3
    175e:	1e05      	subs	r5, r0, #0
    1760:	d103      	bne.n	176a <udc_iface_disable+0x1a>
}
    1762:	0028      	movs	r0, r5
    1764:	bc04      	pop	{r2}
    1766:	4690      	mov	r8, r2
    1768:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    176a:	4b10      	ldr	r3, [pc, #64]	; (17ac <udc_iface_disable+0x5c>)
    176c:	681b      	ldr	r3, [r3, #0]
    176e:	685b      	ldr	r3, [r3, #4]
    1770:	00a2      	lsls	r2, r4, #2
    1772:	58d3      	ldr	r3, [r2, r3]
    1774:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1776:	68db      	ldr	r3, [r3, #12]
    1778:	4798      	blx	r3
    177a:	0001      	movs	r1, r0
    177c:	0020      	movs	r0, r4
    177e:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <udc_iface_disable+0x58>)
    1780:	4798      	blx	r3
    1782:	1e05      	subs	r5, r0, #0
    1784:	d0ed      	beq.n	1762 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1786:	4b0a      	ldr	r3, [pc, #40]	; (17b0 <udc_iface_disable+0x60>)
    1788:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    178a:	4e0a      	ldr	r6, [pc, #40]	; (17b4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    178c:	4f0a      	ldr	r7, [pc, #40]	; (17b8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    178e:	2105      	movs	r1, #5
    1790:	0020      	movs	r0, r4
    1792:	47b0      	blx	r6
    1794:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1796:	d002      	beq.n	179e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1798:	7880      	ldrb	r0, [r0, #2]
    179a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    179c:	e7f7      	b.n	178e <udc_iface_disable+0x3e>
	udi_api->disable();
    179e:	4643      	mov	r3, r8
    17a0:	685b      	ldr	r3, [r3, #4]
    17a2:	4798      	blx	r3
	return true;
    17a4:	e7dd      	b.n	1762 <udc_iface_disable+0x12>
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	000016dd 	.word	0x000016dd
    17ac:	2000012c 	.word	0x2000012c
    17b0:	20000130 	.word	0x20000130
    17b4:	00001679 	.word	0x00001679
    17b8:	00002ce9 	.word	0x00002ce9

000017bc <udc_iface_enable>:
{
    17bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17be:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    17c0:	4b0f      	ldr	r3, [pc, #60]	; (1800 <udc_iface_enable+0x44>)
    17c2:	4798      	blx	r3
    17c4:	2800      	cmp	r0, #0
    17c6:	d019      	beq.n	17fc <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    17c8:	4b0e      	ldr	r3, [pc, #56]	; (1804 <udc_iface_enable+0x48>)
    17ca:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17cc:	4e0e      	ldr	r6, [pc, #56]	; (1808 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    17ce:	4f0f      	ldr	r7, [pc, #60]	; (180c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17d0:	2105      	movs	r1, #5
    17d2:	0020      	movs	r0, r4
    17d4:	47b0      	blx	r6
    17d6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    17d8:	d009      	beq.n	17ee <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    17da:	7903      	ldrb	r3, [r0, #4]
    17dc:	7942      	ldrb	r2, [r0, #5]
    17de:	0212      	lsls	r2, r2, #8
    17e0:	431a      	orrs	r2, r3
    17e2:	78c1      	ldrb	r1, [r0, #3]
    17e4:	7880      	ldrb	r0, [r0, #2]
    17e6:	47b8      	blx	r7
    17e8:	2800      	cmp	r0, #0
    17ea:	d1f1      	bne.n	17d0 <udc_iface_enable+0x14>
    17ec:	e006      	b.n	17fc <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    17ee:	4b08      	ldr	r3, [pc, #32]	; (1810 <udc_iface_enable+0x54>)
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	685b      	ldr	r3, [r3, #4]
    17f4:	00ad      	lsls	r5, r5, #2
    17f6:	58eb      	ldr	r3, [r5, r3]
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	4798      	blx	r3
}
    17fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	000016dd 	.word	0x000016dd
    1804:	20000130 	.word	0x20000130
    1808:	00001679 	.word	0x00001679
    180c:	00002d41 	.word	0x00002d41
    1810:	2000012c 	.word	0x2000012c

00001814 <udc_get_interface_desc>:
	return udc_ptr_iface;
    1814:	4b01      	ldr	r3, [pc, #4]	; (181c <udc_get_interface_desc+0x8>)
    1816:	6818      	ldr	r0, [r3, #0]
}
    1818:	4770      	bx	lr
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	20000130 	.word	0x20000130

00001820 <udc_start>:
{
    1820:	b510      	push	{r4, lr}
	udd_enable();
    1822:	4b01      	ldr	r3, [pc, #4]	; (1828 <udc_start+0x8>)
    1824:	4798      	blx	r3
}
    1826:	bd10      	pop	{r4, pc}
    1828:	00003259 	.word	0x00003259

0000182c <udc_reset>:
{
    182c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    182e:	4b0e      	ldr	r3, [pc, #56]	; (1868 <udc_reset+0x3c>)
    1830:	781b      	ldrb	r3, [r3, #0]
    1832:	2b00      	cmp	r3, #0
    1834:	d011      	beq.n	185a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1836:	4b0d      	ldr	r3, [pc, #52]	; (186c <udc_reset+0x40>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    183c:	791b      	ldrb	r3, [r3, #4]
    183e:	2b00      	cmp	r3, #0
    1840:	d00b      	beq.n	185a <udc_reset+0x2e>
    1842:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1844:	4e0a      	ldr	r6, [pc, #40]	; (1870 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1846:	4d09      	ldr	r5, [pc, #36]	; (186c <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1848:	0020      	movs	r0, r4
    184a:	47b0      	blx	r6
				iface_num++) {
    184c:	3401      	adds	r4, #1
    184e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1850:	682b      	ldr	r3, [r5, #0]
    1852:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1854:	791b      	ldrb	r3, [r3, #4]
    1856:	42a3      	cmp	r3, r4
    1858:	d8f6      	bhi.n	1848 <udc_reset+0x1c>
	udc_num_configuration = 0;
    185a:	2300      	movs	r3, #0
    185c:	4a02      	ldr	r2, [pc, #8]	; (1868 <udc_reset+0x3c>)
    185e:	7013      	strb	r3, [r2, #0]
	udc_device_status =
    1860:	4a04      	ldr	r2, [pc, #16]	; (1874 <udc_reset+0x48>)
    1862:	8013      	strh	r3, [r2, #0]
}
    1864:	bd70      	pop	{r4, r5, r6, pc}
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	20000128 	.word	0x20000128
    186c:	2000012c 	.word	0x2000012c
    1870:	00001751 	.word	0x00001751
    1874:	20000120 	.word	0x20000120

00001878 <udc_sof_notify>:
{
    1878:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    187a:	4b0e      	ldr	r3, [pc, #56]	; (18b4 <udc_sof_notify+0x3c>)
    187c:	781b      	ldrb	r3, [r3, #0]
    187e:	2b00      	cmp	r3, #0
    1880:	d017      	beq.n	18b2 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1882:	4b0d      	ldr	r3, [pc, #52]	; (18b8 <udc_sof_notify+0x40>)
    1884:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1886:	681a      	ldr	r2, [r3, #0]
    1888:	7912      	ldrb	r2, [r2, #4]
    188a:	2a00      	cmp	r2, #0
    188c:	d011      	beq.n	18b2 <udc_sof_notify+0x3a>
    188e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1890:	4d09      	ldr	r5, [pc, #36]	; (18b8 <udc_sof_notify+0x40>)
    1892:	e006      	b.n	18a2 <udc_sof_notify+0x2a>
				iface_num++) {
    1894:	3401      	adds	r4, #1
    1896:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1898:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    189a:	681a      	ldr	r2, [r3, #0]
    189c:	7912      	ldrb	r2, [r2, #4]
    189e:	42a2      	cmp	r2, r4
    18a0:	d907      	bls.n	18b2 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    18a2:	685b      	ldr	r3, [r3, #4]
    18a4:	00a2      	lsls	r2, r4, #2
    18a6:	58d3      	ldr	r3, [r2, r3]
    18a8:	691b      	ldr	r3, [r3, #16]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d0f2      	beq.n	1894 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    18ae:	4798      	blx	r3
    18b0:	e7f0      	b.n	1894 <udc_sof_notify+0x1c>
}
    18b2:	bd70      	pop	{r4, r5, r6, pc}
    18b4:	20000128 	.word	0x20000128
    18b8:	2000012c 	.word	0x2000012c

000018bc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    18bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    18be:	4bab      	ldr	r3, [pc, #684]	; (1b6c <udc_process_setup+0x2b0>)
    18c0:	2200      	movs	r2, #0
    18c2:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    18c4:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    18c6:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    18c8:	781b      	ldrb	r3, [r3, #0]
    18ca:	b25a      	sxtb	r2, r3
    18cc:	2a00      	cmp	r2, #0
    18ce:	db13      	blt.n	18f8 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    18d0:	2260      	movs	r2, #96	; 0x60
    18d2:	421a      	tst	r2, r3
    18d4:	d100      	bne.n	18d8 <udc_process_setup+0x1c>
    18d6:	e0d7      	b.n	1a88 <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    18d8:	4ba4      	ldr	r3, [pc, #656]	; (1b6c <udc_process_setup+0x2b0>)
    18da:	781a      	ldrb	r2, [r3, #0]
    18dc:	231f      	movs	r3, #31
    18de:	4013      	ands	r3, r2
    18e0:	2b01      	cmp	r3, #1
    18e2:	d100      	bne.n	18e6 <udc_process_setup+0x2a>
    18e4:	e174      	b.n	1bd0 <udc_process_setup+0x314>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    18e6:	4ba1      	ldr	r3, [pc, #644]	; (1b6c <udc_process_setup+0x2b0>)
    18e8:	781a      	ldrb	r2, [r3, #0]
    18ea:	231f      	movs	r3, #31
    18ec:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    18ee:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    18f0:	2b02      	cmp	r3, #2
    18f2:	d100      	bne.n	18f6 <udc_process_setup+0x3a>
    18f4:	e1ca      	b.n	1c8c <udc_process_setup+0x3d0>
#endif
}
    18f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    18f8:	4a9c      	ldr	r2, [pc, #624]	; (1b6c <udc_process_setup+0x2b0>)
    18fa:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    18fc:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    18fe:	2a00      	cmp	r2, #0
    1900:	d0f9      	beq.n	18f6 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1902:	2160      	movs	r1, #96	; 0x60
    1904:	4219      	tst	r1, r3
    1906:	d1e7      	bne.n	18d8 <udc_process_setup+0x1c>
    1908:	211f      	movs	r1, #31
    190a:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    190c:	d108      	bne.n	1920 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    190e:	4997      	ldr	r1, [pc, #604]	; (1b6c <udc_process_setup+0x2b0>)
    1910:	7849      	ldrb	r1, [r1, #1]
    1912:	2906      	cmp	r1, #6
    1914:	d023      	beq.n	195e <udc_process_setup+0xa2>
    1916:	2908      	cmp	r1, #8
    1918:	d100      	bne.n	191c <udc_process_setup+0x60>
    191a:	e084      	b.n	1a26 <udc_process_setup+0x16a>
    191c:	2900      	cmp	r1, #0
    191e:	d017      	beq.n	1950 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1920:	2b01      	cmp	r3, #1
    1922:	d100      	bne.n	1926 <udc_process_setup+0x6a>
    1924:	e087      	b.n	1a36 <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1926:	2b02      	cmp	r3, #2
    1928:	d1d6      	bne.n	18d8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    192a:	4b90      	ldr	r3, [pc, #576]	; (1b6c <udc_process_setup+0x2b0>)
    192c:	785b      	ldrb	r3, [r3, #1]
	return false;
    192e:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1930:	2b00      	cmp	r3, #0
    1932:	d000      	beq.n	1936 <udc_process_setup+0x7a>
    1934:	e1a6      	b.n	1c84 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1936:	2a02      	cmp	r2, #2
    1938:	d1d5      	bne.n	18e6 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    193a:	4b8c      	ldr	r3, [pc, #560]	; (1b6c <udc_process_setup+0x2b0>)
    193c:	7918      	ldrb	r0, [r3, #4]
    193e:	4b8c      	ldr	r3, [pc, #560]	; (1b70 <udc_process_setup+0x2b4>)
    1940:	4798      	blx	r3
    1942:	4b8c      	ldr	r3, [pc, #560]	; (1b74 <udc_process_setup+0x2b8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1944:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1946:	2102      	movs	r1, #2
    1948:	0018      	movs	r0, r3
    194a:	4b8b      	ldr	r3, [pc, #556]	; (1b78 <udc_process_setup+0x2bc>)
    194c:	4798      	blx	r3
    194e:	e0fc      	b.n	1b4a <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1950:	2a02      	cmp	r2, #2
    1952:	d1c8      	bne.n	18e6 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1954:	3102      	adds	r1, #2
    1956:	4889      	ldr	r0, [pc, #548]	; (1b7c <udc_process_setup+0x2c0>)
    1958:	4b87      	ldr	r3, [pc, #540]	; (1b78 <udc_process_setup+0x2bc>)
    195a:	4798      	blx	r3
    195c:	e0f5      	b.n	1b4a <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    195e:	4b83      	ldr	r3, [pc, #524]	; (1b6c <udc_process_setup+0x2b0>)
    1960:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1962:	0a13      	lsrs	r3, r2, #8
    1964:	2b02      	cmp	r3, #2
    1966:	d023      	beq.n	19b0 <udc_process_setup+0xf4>
    1968:	b2d9      	uxtb	r1, r3
    196a:	2902      	cmp	r1, #2
    196c:	d90f      	bls.n	198e <udc_process_setup+0xd2>
    196e:	2b03      	cmp	r3, #3
    1970:	d034      	beq.n	19dc <udc_process_setup+0x120>
    1972:	2b0f      	cmp	r3, #15
    1974:	d000      	beq.n	1978 <udc_process_setup+0xbc>
    1976:	e182      	b.n	1c7e <udc_process_setup+0x3c2>
		if (udc_config.conf_bos == NULL) {
    1978:	4b81      	ldr	r3, [pc, #516]	; (1b80 <udc_process_setup+0x2c4>)
    197a:	6898      	ldr	r0, [r3, #8]
    197c:	2800      	cmp	r0, #0
    197e:	d0b2      	beq.n	18e6 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1980:	7883      	ldrb	r3, [r0, #2]
    1982:	78c1      	ldrb	r1, [r0, #3]
    1984:	0209      	lsls	r1, r1, #8
    1986:	4319      	orrs	r1, r3
    1988:	4b7b      	ldr	r3, [pc, #492]	; (1b78 <udc_process_setup+0x2bc>)
    198a:	4798      	blx	r3
    198c:	e007      	b.n	199e <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    198e:	2b01      	cmp	r3, #1
    1990:	d000      	beq.n	1994 <udc_process_setup+0xd8>
    1992:	e174      	b.n	1c7e <udc_process_setup+0x3c2>
				(uint8_t *) udc_config.confdev_lsfs,
    1994:	4b7a      	ldr	r3, [pc, #488]	; (1b80 <udc_process_setup+0x2c4>)
    1996:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1998:	7801      	ldrb	r1, [r0, #0]
    199a:	4b77      	ldr	r3, [pc, #476]	; (1b78 <udc_process_setup+0x2bc>)
    199c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    199e:	4b73      	ldr	r3, [pc, #460]	; (1b6c <udc_process_setup+0x2b0>)
    19a0:	88da      	ldrh	r2, [r3, #6]
    19a2:	899b      	ldrh	r3, [r3, #12]
    19a4:	4293      	cmp	r3, r2
    19a6:	d800      	bhi.n	19aa <udc_process_setup+0xee>
    19a8:	e0cf      	b.n	1b4a <udc_process_setup+0x28e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    19aa:	4b70      	ldr	r3, [pc, #448]	; (1b6c <udc_process_setup+0x2b0>)
    19ac:	819a      	strh	r2, [r3, #12]
    19ae:	e0cc      	b.n	1b4a <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    19b0:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    19b2:	4b73      	ldr	r3, [pc, #460]	; (1b80 <udc_process_setup+0x2c4>)
    19b4:	681b      	ldr	r3, [r3, #0]
    19b6:	7c5b      	ldrb	r3, [r3, #17]
    19b8:	4293      	cmp	r3, r2
    19ba:	d800      	bhi.n	19be <udc_process_setup+0x102>
    19bc:	e793      	b.n	18e6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    19be:	4b70      	ldr	r3, [pc, #448]	; (1b80 <udc_process_setup+0x2c4>)
    19c0:	685b      	ldr	r3, [r3, #4]
    19c2:	00d2      	lsls	r2, r2, #3
    19c4:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    19c6:	7883      	ldrb	r3, [r0, #2]
    19c8:	78c1      	ldrb	r1, [r0, #3]
    19ca:	0209      	lsls	r1, r1, #8
    19cc:	4319      	orrs	r1, r3
    19ce:	4b6a      	ldr	r3, [pc, #424]	; (1b78 <udc_process_setup+0x2bc>)
    19d0:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    19d2:	4b66      	ldr	r3, [pc, #408]	; (1b6c <udc_process_setup+0x2b0>)
    19d4:	689b      	ldr	r3, [r3, #8]
    19d6:	2202      	movs	r2, #2
    19d8:	705a      	strb	r2, [r3, #1]
    19da:	e7e0      	b.n	199e <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    19dc:	23ff      	movs	r3, #255	; 0xff
    19de:	401a      	ands	r2, r3
    19e0:	2a01      	cmp	r2, #1
    19e2:	d01d      	beq.n	1a20 <udc_process_setup+0x164>
    19e4:	2a00      	cmp	r2, #0
    19e6:	d016      	beq.n	1a16 <udc_process_setup+0x15a>
    19e8:	2a02      	cmp	r2, #2
    19ea:	d000      	beq.n	19ee <udc_process_setup+0x132>
    19ec:	e774      	b.n	18d8 <udc_process_setup+0x1c>
		str = udc_string_product_name;
    19ee:	4c65      	ldr	r4, [pc, #404]	; (1b84 <udc_process_setup+0x2c8>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    19f0:	210b      	movs	r1, #11
    19f2:	4a65      	ldr	r2, [pc, #404]	; (1b88 <udc_process_setup+0x2cc>)
    19f4:	3202      	adds	r2, #2
    19f6:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    19f8:	5ce0      	ldrb	r0, [r4, r3]
    19fa:	8010      	strh	r0, [r2, #0]
    19fc:	3301      	adds	r3, #1
    19fe:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1a00:	b2d8      	uxtb	r0, r3
    1a02:	4288      	cmp	r0, r1
    1a04:	d3f8      	bcc.n	19f8 <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a06:	0049      	lsls	r1, r1, #1
    1a08:	3102      	adds	r1, #2
    1a0a:	485f      	ldr	r0, [pc, #380]	; (1b88 <udc_process_setup+0x2cc>)
    1a0c:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1a0e:	b289      	uxth	r1, r1
    1a10:	4b59      	ldr	r3, [pc, #356]	; (1b78 <udc_process_setup+0x2bc>)
    1a12:	4798      	blx	r3
    1a14:	e7c3      	b.n	199e <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a16:	2104      	movs	r1, #4
    1a18:	485c      	ldr	r0, [pc, #368]	; (1b8c <udc_process_setup+0x2d0>)
    1a1a:	4b57      	ldr	r3, [pc, #348]	; (1b78 <udc_process_setup+0x2bc>)
    1a1c:	4798      	blx	r3
    1a1e:	e7be      	b.n	199e <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1a20:	4c5b      	ldr	r4, [pc, #364]	; (1b90 <udc_process_setup+0x2d4>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a22:	2106      	movs	r1, #6
    1a24:	e7e5      	b.n	19f2 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a26:	2a01      	cmp	r2, #1
    1a28:	d000      	beq.n	1a2c <udc_process_setup+0x170>
    1a2a:	e75c      	b.n	18e6 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1a2c:	2101      	movs	r1, #1
    1a2e:	4859      	ldr	r0, [pc, #356]	; (1b94 <udc_process_setup+0x2d8>)
    1a30:	4b51      	ldr	r3, [pc, #324]	; (1b78 <udc_process_setup+0x2bc>)
    1a32:	4798      	blx	r3
    1a34:	e089      	b.n	1b4a <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a36:	494d      	ldr	r1, [pc, #308]	; (1b6c <udc_process_setup+0x2b0>)
    1a38:	7849      	ldrb	r1, [r1, #1]
    1a3a:	290a      	cmp	r1, #10
    1a3c:	d000      	beq.n	1a40 <udc_process_setup+0x184>
    1a3e:	e772      	b.n	1926 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a40:	2a01      	cmp	r2, #1
    1a42:	d000      	beq.n	1a46 <udc_process_setup+0x18a>
    1a44:	e0c4      	b.n	1bd0 <udc_process_setup+0x314>
	if (!udc_num_configuration) {
    1a46:	4b53      	ldr	r3, [pc, #332]	; (1b94 <udc_process_setup+0x2d8>)
    1a48:	781b      	ldrb	r3, [r3, #0]
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d100      	bne.n	1a50 <udc_process_setup+0x194>
    1a4e:	e0bf      	b.n	1bd0 <udc_process_setup+0x314>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a50:	4b46      	ldr	r3, [pc, #280]	; (1b6c <udc_process_setup+0x2b0>)
    1a52:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a54:	4b50      	ldr	r3, [pc, #320]	; (1b98 <udc_process_setup+0x2dc>)
    1a56:	681d      	ldr	r5, [r3, #0]
    1a58:	682b      	ldr	r3, [r5, #0]
    1a5a:	791b      	ldrb	r3, [r3, #4]
    1a5c:	42a3      	cmp	r3, r4
    1a5e:	d800      	bhi.n	1a62 <udc_process_setup+0x1a6>
    1a60:	e0b6      	b.n	1bd0 <udc_process_setup+0x314>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a62:	2100      	movs	r1, #0
    1a64:	0020      	movs	r0, r4
    1a66:	4b4d      	ldr	r3, [pc, #308]	; (1b9c <udc_process_setup+0x2e0>)
    1a68:	4798      	blx	r3
    1a6a:	2800      	cmp	r0, #0
    1a6c:	d100      	bne.n	1a70 <udc_process_setup+0x1b4>
    1a6e:	e733      	b.n	18d8 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a70:	686b      	ldr	r3, [r5, #4]
    1a72:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1a74:	58e3      	ldr	r3, [r4, r3]
    1a76:	68db      	ldr	r3, [r3, #12]
    1a78:	4798      	blx	r3
    1a7a:	4b49      	ldr	r3, [pc, #292]	; (1ba0 <udc_process_setup+0x2e4>)
    1a7c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1a7e:	2101      	movs	r1, #1
    1a80:	0018      	movs	r0, r3
    1a82:	4b3d      	ldr	r3, [pc, #244]	; (1b78 <udc_process_setup+0x2bc>)
    1a84:	4798      	blx	r3
    1a86:	e060      	b.n	1b4a <udc_process_setup+0x28e>
    1a88:	221f      	movs	r2, #31
    1a8a:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a8c:	d15f      	bne.n	1b4e <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a8e:	4a37      	ldr	r2, [pc, #220]	; (1b6c <udc_process_setup+0x2b0>)
    1a90:	7852      	ldrb	r2, [r2, #1]
    1a92:	2a03      	cmp	r2, #3
    1a94:	d100      	bne.n	1a98 <udc_process_setup+0x1dc>
    1a96:	e0f4      	b.n	1c82 <udc_process_setup+0x3c6>
    1a98:	b2d1      	uxtb	r1, r2
    1a9a:	2903      	cmp	r1, #3
    1a9c:	d93b      	bls.n	1b16 <udc_process_setup+0x25a>
    1a9e:	2a05      	cmp	r2, #5
    1aa0:	d04b      	beq.n	1b3a <udc_process_setup+0x27e>
    1aa2:	2a09      	cmp	r2, #9
    1aa4:	d153      	bne.n	1b4e <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
    1aa6:	4b31      	ldr	r3, [pc, #196]	; (1b6c <udc_process_setup+0x2b0>)
    1aa8:	88db      	ldrh	r3, [r3, #6]
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d000      	beq.n	1ab0 <udc_process_setup+0x1f4>
    1aae:	e71a      	b.n	18e6 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1ab0:	4b3c      	ldr	r3, [pc, #240]	; (1ba4 <udc_process_setup+0x2e8>)
    1ab2:	4798      	blx	r3
    1ab4:	2800      	cmp	r0, #0
    1ab6:	d100      	bne.n	1aba <udc_process_setup+0x1fe>
    1ab8:	e70e      	b.n	18d8 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1aba:	4b2c      	ldr	r3, [pc, #176]	; (1b6c <udc_process_setup+0x2b0>)
    1abc:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1abe:	4b30      	ldr	r3, [pc, #192]	; (1b80 <udc_process_setup+0x2c4>)
    1ac0:	681b      	ldr	r3, [r3, #0]
    1ac2:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1ac4:	429a      	cmp	r2, r3
    1ac6:	dd00      	ble.n	1aca <udc_process_setup+0x20e>
    1ac8:	e706      	b.n	18d8 <udc_process_setup+0x1c>
	udc_reset();
    1aca:	4b37      	ldr	r3, [pc, #220]	; (1ba8 <udc_process_setup+0x2ec>)
    1acc:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1ace:	4b27      	ldr	r3, [pc, #156]	; (1b6c <udc_process_setup+0x2b0>)
    1ad0:	789b      	ldrb	r3, [r3, #2]
    1ad2:	4a30      	ldr	r2, [pc, #192]	; (1b94 <udc_process_setup+0x2d8>)
    1ad4:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d037      	beq.n	1b4a <udc_process_setup+0x28e>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1ada:	4a34      	ldr	r2, [pc, #208]	; (1bac <udc_process_setup+0x2f0>)
    1adc:	4694      	mov	ip, r2
    1ade:	4463      	add	r3, ip
    1ae0:	00db      	lsls	r3, r3, #3
    1ae2:	4a27      	ldr	r2, [pc, #156]	; (1b80 <udc_process_setup+0x2c4>)
    1ae4:	6852      	ldr	r2, [r2, #4]
    1ae6:	18d3      	adds	r3, r2, r3
    1ae8:	4a2b      	ldr	r2, [pc, #172]	; (1b98 <udc_process_setup+0x2dc>)
    1aea:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	791b      	ldrb	r3, [r3, #4]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d02a      	beq.n	1b4a <udc_process_setup+0x28e>
    1af4:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1af6:	4d2e      	ldr	r5, [pc, #184]	; (1bb0 <udc_process_setup+0x2f4>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1af8:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1afa:	2100      	movs	r1, #0
    1afc:	0020      	movs	r0, r4
    1afe:	47a8      	blx	r5
    1b00:	2800      	cmp	r0, #0
    1b02:	d100      	bne.n	1b06 <udc_process_setup+0x24a>
    1b04:	e6e8      	b.n	18d8 <udc_process_setup+0x1c>
			iface_num++) {
    1b06:	3401      	adds	r4, #1
    1b08:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b0a:	6833      	ldr	r3, [r6, #0]
    1b0c:	681b      	ldr	r3, [r3, #0]
    1b0e:	791b      	ldrb	r3, [r3, #4]
    1b10:	42a3      	cmp	r3, r4
    1b12:	d8f2      	bhi.n	1afa <udc_process_setup+0x23e>
    1b14:	e019      	b.n	1b4a <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
    1b16:	2a01      	cmp	r2, #1
    1b18:	d119      	bne.n	1b4e <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
    1b1a:	4b14      	ldr	r3, [pc, #80]	; (1b6c <udc_process_setup+0x2b0>)
    1b1c:	88db      	ldrh	r3, [r3, #6]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d000      	beq.n	1b24 <udc_process_setup+0x268>
    1b22:	e6e0      	b.n	18e6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b24:	4b11      	ldr	r3, [pc, #68]	; (1b6c <udc_process_setup+0x2b0>)
    1b26:	885b      	ldrh	r3, [r3, #2]
    1b28:	2b01      	cmp	r3, #1
    1b2a:	d000      	beq.n	1b2e <udc_process_setup+0x272>
    1b2c:	e6db      	b.n	18e6 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b2e:	4a13      	ldr	r2, [pc, #76]	; (1b7c <udc_process_setup+0x2c0>)
    1b30:	8813      	ldrh	r3, [r2, #0]
    1b32:	2102      	movs	r1, #2
    1b34:	438b      	bics	r3, r1
    1b36:	8013      	strh	r3, [r2, #0]
    1b38:	e007      	b.n	1b4a <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength) {
    1b3a:	4b0c      	ldr	r3, [pc, #48]	; (1b6c <udc_process_setup+0x2b0>)
    1b3c:	88db      	ldrh	r3, [r3, #6]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d000      	beq.n	1b44 <udc_process_setup+0x288>
    1b42:	e6d0      	b.n	18e6 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1b44:	4a1b      	ldr	r2, [pc, #108]	; (1bb4 <udc_process_setup+0x2f8>)
    1b46:	4b09      	ldr	r3, [pc, #36]	; (1b6c <udc_process_setup+0x2b0>)
    1b48:	611a      	str	r2, [r3, #16]
			return true;
    1b4a:	2001      	movs	r0, #1
    1b4c:	e6d3      	b.n	18f6 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b4e:	2b01      	cmp	r3, #1
    1b50:	d032      	beq.n	1bb8 <udc_process_setup+0x2fc>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b52:	2b02      	cmp	r3, #2
    1b54:	d000      	beq.n	1b58 <udc_process_setup+0x29c>
    1b56:	e6bf      	b.n	18d8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1b58:	4b04      	ldr	r3, [pc, #16]	; (1b6c <udc_process_setup+0x2b0>)
    1b5a:	785b      	ldrb	r3, [r3, #1]
    1b5c:	2b01      	cmp	r3, #1
    1b5e:	d06d      	beq.n	1c3c <udc_process_setup+0x380>
    1b60:	2b03      	cmp	r3, #3
    1b62:	d100      	bne.n	1b66 <udc_process_setup+0x2aa>
    1b64:	e079      	b.n	1c5a <udc_process_setup+0x39e>
	return false;
    1b66:	2000      	movs	r0, #0
    1b68:	e08c      	b.n	1c84 <udc_process_setup+0x3c8>
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	20000568 	.word	0x20000568
    1b70:	00002e49 	.word	0x00002e49
    1b74:	20000122 	.word	0x20000122
    1b78:	000031c9 	.word	0x000031c9
    1b7c:	20000120 	.word	0x20000120
    1b80:	20000058 	.word	0x20000058
    1b84:	200000cc 	.word	0x200000cc
    1b88:	200000a8 	.word	0x200000a8
    1b8c:	200000c0 	.word	0x200000c0
    1b90:	200000c4 	.word	0x200000c4
    1b94:	20000128 	.word	0x20000128
    1b98:	2000012c 	.word	0x2000012c
    1b9c:	000016dd 	.word	0x000016dd
    1ba0:	20000124 	.word	0x20000124
    1ba4:	000031b9 	.word	0x000031b9
    1ba8:	0000182d 	.word	0x0000182d
    1bac:	1fffffff 	.word	0x1fffffff
    1bb0:	000017bd 	.word	0x000017bd
    1bb4:	000016c5 	.word	0x000016c5
			switch (udd_g_ctrlreq.req.bRequest) {
    1bb8:	4a48      	ldr	r2, [pc, #288]	; (1cdc <udc_process_setup+0x420>)
    1bba:	7852      	ldrb	r2, [r2, #1]
    1bbc:	2a0b      	cmp	r2, #11
    1bbe:	d1c8      	bne.n	1b52 <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
    1bc0:	4b46      	ldr	r3, [pc, #280]	; (1cdc <udc_process_setup+0x420>)
    1bc2:	88db      	ldrh	r3, [r3, #6]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d103      	bne.n	1bd0 <udc_process_setup+0x314>
	if (!udc_num_configuration) {
    1bc8:	4b45      	ldr	r3, [pc, #276]	; (1ce0 <udc_process_setup+0x424>)
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d127      	bne.n	1c20 <udc_process_setup+0x364>
	if (0 == udc_num_configuration) {
    1bd0:	4b43      	ldr	r3, [pc, #268]	; (1ce0 <udc_process_setup+0x424>)
    1bd2:	781b      	ldrb	r3, [r3, #0]
	return false;
    1bd4:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d100      	bne.n	1bdc <udc_process_setup+0x320>
    1bda:	e68c      	b.n	18f6 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1bdc:	4b3f      	ldr	r3, [pc, #252]	; (1cdc <udc_process_setup+0x420>)
    1bde:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1be0:	4b40      	ldr	r3, [pc, #256]	; (1ce4 <udc_process_setup+0x428>)
    1be2:	681d      	ldr	r5, [r3, #0]
    1be4:	682b      	ldr	r3, [r5, #0]
    1be6:	791b      	ldrb	r3, [r3, #4]
    1be8:	42a3      	cmp	r3, r4
    1bea:	d800      	bhi.n	1bee <udc_process_setup+0x332>
    1bec:	e683      	b.n	18f6 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bee:	2100      	movs	r1, #0
    1bf0:	0020      	movs	r0, r4
    1bf2:	4b3d      	ldr	r3, [pc, #244]	; (1ce8 <udc_process_setup+0x42c>)
    1bf4:	4798      	blx	r3
    1bf6:	2800      	cmp	r0, #0
    1bf8:	d100      	bne.n	1bfc <udc_process_setup+0x340>
    1bfa:	e674      	b.n	18e6 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bfc:	686b      	ldr	r3, [r5, #4]
    1bfe:	00a2      	lsls	r2, r4, #2
    1c00:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c02:	68eb      	ldr	r3, [r5, #12]
    1c04:	4798      	blx	r3
    1c06:	0001      	movs	r1, r0
    1c08:	0020      	movs	r0, r4
    1c0a:	4b37      	ldr	r3, [pc, #220]	; (1ce8 <udc_process_setup+0x42c>)
    1c0c:	4798      	blx	r3
    1c0e:	2800      	cmp	r0, #0
    1c10:	d100      	bne.n	1c14 <udc_process_setup+0x358>
    1c12:	e668      	b.n	18e6 <udc_process_setup+0x2a>
	return udi_api->setup();
    1c14:	68ab      	ldr	r3, [r5, #8]
    1c16:	4798      	blx	r3
		if (udc_req_iface()) {
    1c18:	2800      	cmp	r0, #0
    1c1a:	d000      	beq.n	1c1e <udc_process_setup+0x362>
    1c1c:	e66b      	b.n	18f6 <udc_process_setup+0x3a>
    1c1e:	e662      	b.n	18e6 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c20:	4b2e      	ldr	r3, [pc, #184]	; (1cdc <udc_process_setup+0x420>)
    1c22:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c24:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1c26:	0028      	movs	r0, r5
    1c28:	4b30      	ldr	r3, [pc, #192]	; (1cec <udc_process_setup+0x430>)
    1c2a:	4798      	blx	r3
    1c2c:	2800      	cmp	r0, #0
    1c2e:	d100      	bne.n	1c32 <udc_process_setup+0x376>
    1c30:	e652      	b.n	18d8 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1c32:	b2e1      	uxtb	r1, r4
    1c34:	0028      	movs	r0, r5
    1c36:	4b2e      	ldr	r3, [pc, #184]	; (1cf0 <udc_process_setup+0x434>)
    1c38:	4798      	blx	r3
    1c3a:	e023      	b.n	1c84 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength) {
    1c3c:	4b27      	ldr	r3, [pc, #156]	; (1cdc <udc_process_setup+0x420>)
    1c3e:	88db      	ldrh	r3, [r3, #6]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d000      	beq.n	1c46 <udc_process_setup+0x38a>
    1c44:	e64f      	b.n	18e6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c46:	4b25      	ldr	r3, [pc, #148]	; (1cdc <udc_process_setup+0x420>)
    1c48:	885b      	ldrh	r3, [r3, #2]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d000      	beq.n	1c50 <udc_process_setup+0x394>
    1c4e:	e64a      	b.n	18e6 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c50:	4b22      	ldr	r3, [pc, #136]	; (1cdc <udc_process_setup+0x420>)
    1c52:	7918      	ldrb	r0, [r3, #4]
    1c54:	4b27      	ldr	r3, [pc, #156]	; (1cf4 <udc_process_setup+0x438>)
    1c56:	4798      	blx	r3
    1c58:	e014      	b.n	1c84 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength) {
    1c5a:	4b20      	ldr	r3, [pc, #128]	; (1cdc <udc_process_setup+0x420>)
    1c5c:	88db      	ldrh	r3, [r3, #6]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d000      	beq.n	1c64 <udc_process_setup+0x3a8>
    1c62:	e640      	b.n	18e6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c64:	4b1d      	ldr	r3, [pc, #116]	; (1cdc <udc_process_setup+0x420>)
    1c66:	885b      	ldrh	r3, [r3, #2]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d000      	beq.n	1c6e <udc_process_setup+0x3b2>
    1c6c:	e63b      	b.n	18e6 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c6e:	4c1b      	ldr	r4, [pc, #108]	; (1cdc <udc_process_setup+0x420>)
    1c70:	7920      	ldrb	r0, [r4, #4]
    1c72:	4b21      	ldr	r3, [pc, #132]	; (1cf8 <udc_process_setup+0x43c>)
    1c74:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c76:	7920      	ldrb	r0, [r4, #4]
    1c78:	4b20      	ldr	r3, [pc, #128]	; (1cfc <udc_process_setup+0x440>)
    1c7a:	4798      	blx	r3
    1c7c:	e002      	b.n	1c84 <udc_process_setup+0x3c8>
		return false;
    1c7e:	2000      	movs	r0, #0
    1c80:	e000      	b.n	1c84 <udc_process_setup+0x3c8>
				return udc_req_std_dev_set_feature();
    1c82:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1c84:	2800      	cmp	r0, #0
    1c86:	d000      	beq.n	1c8a <udc_process_setup+0x3ce>
    1c88:	e635      	b.n	18f6 <udc_process_setup+0x3a>
    1c8a:	e625      	b.n	18d8 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1c8c:	4b14      	ldr	r3, [pc, #80]	; (1ce0 <udc_process_setup+0x424>)
    1c8e:	781b      	ldrb	r3, [r3, #0]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d100      	bne.n	1c96 <udc_process_setup+0x3da>
    1c94:	e62f      	b.n	18f6 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c96:	4b13      	ldr	r3, [pc, #76]	; (1ce4 <udc_process_setup+0x428>)
    1c98:	681b      	ldr	r3, [r3, #0]
    1c9a:	681a      	ldr	r2, [r3, #0]
    1c9c:	7912      	ldrb	r2, [r2, #4]
    1c9e:	2a00      	cmp	r2, #0
    1ca0:	d01a      	beq.n	1cd8 <udc_process_setup+0x41c>
    1ca2:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ca4:	4e10      	ldr	r6, [pc, #64]	; (1ce8 <udc_process_setup+0x42c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ca6:	4f0f      	ldr	r7, [pc, #60]	; (1ce4 <udc_process_setup+0x428>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ca8:	685b      	ldr	r3, [r3, #4]
    1caa:	00aa      	lsls	r2, r5, #2
    1cac:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1cae:	68e3      	ldr	r3, [r4, #12]
    1cb0:	4798      	blx	r3
    1cb2:	0001      	movs	r1, r0
    1cb4:	0028      	movs	r0, r5
    1cb6:	47b0      	blx	r6
    1cb8:	2800      	cmp	r0, #0
    1cba:	d100      	bne.n	1cbe <udc_process_setup+0x402>
    1cbc:	e61b      	b.n	18f6 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1cbe:	68a3      	ldr	r3, [r4, #8]
    1cc0:	4798      	blx	r3
    1cc2:	2800      	cmp	r0, #0
    1cc4:	d000      	beq.n	1cc8 <udc_process_setup+0x40c>
    1cc6:	e616      	b.n	18f6 <udc_process_setup+0x3a>
			iface_num++) {
    1cc8:	3501      	adds	r5, #1
    1cca:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ccc:	683b      	ldr	r3, [r7, #0]
    1cce:	681a      	ldr	r2, [r3, #0]
    1cd0:	7912      	ldrb	r2, [r2, #4]
    1cd2:	42aa      	cmp	r2, r5
    1cd4:	d8e8      	bhi.n	1ca8 <udc_process_setup+0x3ec>
    1cd6:	e60e      	b.n	18f6 <udc_process_setup+0x3a>
	return false;
    1cd8:	2000      	movs	r0, #0
    1cda:	e60c      	b.n	18f6 <udc_process_setup+0x3a>
    1cdc:	20000568 	.word	0x20000568
    1ce0:	20000128 	.word	0x20000128
    1ce4:	2000012c 	.word	0x2000012c
    1ce8:	000016dd 	.word	0x000016dd
    1cec:	00001751 	.word	0x00001751
    1cf0:	000017bd 	.word	0x000017bd
    1cf4:	00002f8d 	.word	0x00002f8d
    1cf8:	00002cad 	.word	0x00002cad
    1cfc:	00002e5d 	.word	0x00002e5d

00001d00 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1d00:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1d02:	2200      	movs	r2, #0
    1d04:	4b10      	ldr	r3, [pc, #64]	; (1d48 <EIC_Handler+0x48>)
    1d06:	701a      	strb	r2, [r3, #0]
    1d08:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1d0a:	4910      	ldr	r1, [pc, #64]	; (1d4c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1d0c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1d0e:	4e10      	ldr	r6, [pc, #64]	; (1d50 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1d10:	4c0d      	ldr	r4, [pc, #52]	; (1d48 <EIC_Handler+0x48>)
    1d12:	e00a      	b.n	1d2a <EIC_Handler+0x2a>
		return eics[eic_index];
    1d14:	490d      	ldr	r1, [pc, #52]	; (1d4c <EIC_Handler+0x4c>)
    1d16:	e008      	b.n	1d2a <EIC_Handler+0x2a>
    1d18:	7823      	ldrb	r3, [r4, #0]
    1d1a:	3301      	adds	r3, #1
    1d1c:	b2db      	uxtb	r3, r3
    1d1e:	7023      	strb	r3, [r4, #0]
    1d20:	2b0f      	cmp	r3, #15
    1d22:	d810      	bhi.n	1d46 <EIC_Handler+0x46>
		return NULL;
    1d24:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1d26:	2b1f      	cmp	r3, #31
    1d28:	d9f4      	bls.n	1d14 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1d2a:	0028      	movs	r0, r5
    1d2c:	4018      	ands	r0, r3
    1d2e:	2201      	movs	r2, #1
    1d30:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1d32:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    1d34:	4210      	tst	r0, r2
    1d36:	d0ef      	beq.n	1d18 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1d38:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1d3a:	009b      	lsls	r3, r3, #2
    1d3c:	599b      	ldr	r3, [r3, r6]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d0ea      	beq.n	1d18 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1d42:	4798      	blx	r3
    1d44:	e7e8      	b.n	1d18 <EIC_Handler+0x18>
			}
		}
	}
}
    1d46:	bd70      	pop	{r4, r5, r6, pc}
    1d48:	2000037d 	.word	0x2000037d
    1d4c:	40002400 	.word	0x40002400
    1d50:	20000380 	.word	0x20000380

00001d54 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1d54:	4a06      	ldr	r2, [pc, #24]	; (1d70 <_extint_enable+0x1c>)
    1d56:	7813      	ldrb	r3, [r2, #0]
    1d58:	2102      	movs	r1, #2
    1d5a:	430b      	orrs	r3, r1
    1d5c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1d5e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1d60:	6853      	ldr	r3, [r2, #4]
    1d62:	4219      	tst	r1, r3
    1d64:	d1fc      	bne.n	1d60 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1d66:	6853      	ldr	r3, [r2, #4]
    1d68:	4218      	tst	r0, r3
    1d6a:	d1f9      	bne.n	1d60 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1d6c:	4770      	bx	lr
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	40002400 	.word	0x40002400

00001d74 <_system_extint_init>:
{
    1d74:	b500      	push	{lr}
    1d76:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1d78:	4a17      	ldr	r2, [pc, #92]	; (1dd8 <_system_extint_init+0x64>)
    1d7a:	6951      	ldr	r1, [r2, #20]
    1d7c:	2380      	movs	r3, #128	; 0x80
    1d7e:	009b      	lsls	r3, r3, #2
    1d80:	430b      	orrs	r3, r1
    1d82:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1d84:	a901      	add	r1, sp, #4
    1d86:	2300      	movs	r3, #0
    1d88:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1d8a:	2003      	movs	r0, #3
    1d8c:	4b13      	ldr	r3, [pc, #76]	; (1ddc <_system_extint_init+0x68>)
    1d8e:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1d90:	2003      	movs	r0, #3
    1d92:	4b13      	ldr	r3, [pc, #76]	; (1de0 <_system_extint_init+0x6c>)
    1d94:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    1d96:	4a13      	ldr	r2, [pc, #76]	; (1de4 <_system_extint_init+0x70>)
    1d98:	7813      	ldrb	r3, [r2, #0]
    1d9a:	2101      	movs	r1, #1
    1d9c:	430b      	orrs	r3, r1
    1d9e:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1da0:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1da2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1da4:	6853      	ldr	r3, [r2, #4]
    1da6:	4219      	tst	r1, r3
    1da8:	d1fc      	bne.n	1da4 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1daa:	6853      	ldr	r3, [r2, #4]
    1dac:	4218      	tst	r0, r3
    1dae:	d1f9      	bne.n	1da4 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    1db0:	4a0c      	ldr	r2, [pc, #48]	; (1de4 <_system_extint_init+0x70>)
    1db2:	7813      	ldrb	r3, [r2, #0]
    1db4:	2110      	movs	r1, #16
    1db6:	438b      	bics	r3, r1
    1db8:	7013      	strb	r3, [r2, #0]
    1dba:	4b0b      	ldr	r3, [pc, #44]	; (1de8 <_system_extint_init+0x74>)
    1dbc:	0019      	movs	r1, r3
    1dbe:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1dc0:	2200      	movs	r2, #0
    1dc2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1dc4:	428b      	cmp	r3, r1
    1dc6:	d1fc      	bne.n	1dc2 <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1dc8:	2208      	movs	r2, #8
    1dca:	4b08      	ldr	r3, [pc, #32]	; (1dec <_system_extint_init+0x78>)
    1dcc:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1dce:	4b08      	ldr	r3, [pc, #32]	; (1df0 <_system_extint_init+0x7c>)
    1dd0:	4798      	blx	r3
}
    1dd2:	b003      	add	sp, #12
    1dd4:	bd00      	pop	{pc}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	40000400 	.word	0x40000400
    1ddc:	000024ed 	.word	0x000024ed
    1de0:	0000247d 	.word	0x0000247d
    1de4:	40002400 	.word	0x40002400
    1de8:	20000380 	.word	0x20000380
    1dec:	e000e100 	.word	0xe000e100
    1df0:	00001d55 	.word	0x00001d55

00001df4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1df4:	b500      	push	{lr}
    1df6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1df8:	ab01      	add	r3, sp, #4
    1dfa:	2280      	movs	r2, #128	; 0x80
    1dfc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1dfe:	780a      	ldrb	r2, [r1, #0]
    1e00:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1e02:	784a      	ldrb	r2, [r1, #1]
    1e04:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1e06:	788a      	ldrb	r2, [r1, #2]
    1e08:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1e0a:	0019      	movs	r1, r3
    1e0c:	4b01      	ldr	r3, [pc, #4]	; (1e14 <port_pin_set_config+0x20>)
    1e0e:	4798      	blx	r3
}
    1e10:	b003      	add	sp, #12
    1e12:	bd00      	pop	{pc}
    1e14:	000025e9 	.word	0x000025e9

00001e18 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1e18:	4770      	bx	lr
	...

00001e1c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1e1c:	4b0c      	ldr	r3, [pc, #48]	; (1e50 <cpu_irq_enter_critical+0x34>)
    1e1e:	681b      	ldr	r3, [r3, #0]
    1e20:	2b00      	cmp	r3, #0
    1e22:	d106      	bne.n	1e32 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e24:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d007      	beq.n	1e3c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1e2c:	2200      	movs	r2, #0
    1e2e:	4b09      	ldr	r3, [pc, #36]	; (1e54 <cpu_irq_enter_critical+0x38>)
    1e30:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1e32:	4a07      	ldr	r2, [pc, #28]	; (1e50 <cpu_irq_enter_critical+0x34>)
    1e34:	6813      	ldr	r3, [r2, #0]
    1e36:	3301      	adds	r3, #1
    1e38:	6013      	str	r3, [r2, #0]
}
    1e3a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1e3c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1e3e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1e42:	2200      	movs	r2, #0
    1e44:	4b04      	ldr	r3, [pc, #16]	; (1e58 <cpu_irq_enter_critical+0x3c>)
    1e46:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1e48:	3201      	adds	r2, #1
    1e4a:	4b02      	ldr	r3, [pc, #8]	; (1e54 <cpu_irq_enter_critical+0x38>)
    1e4c:	701a      	strb	r2, [r3, #0]
    1e4e:	e7f0      	b.n	1e32 <cpu_irq_enter_critical+0x16>
    1e50:	20000134 	.word	0x20000134
    1e54:	20000138 	.word	0x20000138
    1e58:	200000d8 	.word	0x200000d8

00001e5c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <cpu_irq_leave_critical+0x24>)
    1e5e:	681a      	ldr	r2, [r3, #0]
    1e60:	3a01      	subs	r2, #1
    1e62:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1e64:	681b      	ldr	r3, [r3, #0]
    1e66:	2b00      	cmp	r3, #0
    1e68:	d109      	bne.n	1e7e <cpu_irq_leave_critical+0x22>
    1e6a:	4b06      	ldr	r3, [pc, #24]	; (1e84 <cpu_irq_leave_critical+0x28>)
    1e6c:	781b      	ldrb	r3, [r3, #0]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d005      	beq.n	1e7e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1e72:	2201      	movs	r2, #1
    1e74:	4b04      	ldr	r3, [pc, #16]	; (1e88 <cpu_irq_leave_critical+0x2c>)
    1e76:	701a      	strb	r2, [r3, #0]
    1e78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1e7c:	b662      	cpsie	i
	}
}
    1e7e:	4770      	bx	lr
    1e80:	20000134 	.word	0x20000134
    1e84:	20000138 	.word	0x20000138
    1e88:	200000d8 	.word	0x200000d8

00001e8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1e8c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1e8e:	2808      	cmp	r0, #8
    1e90:	d803      	bhi.n	1e9a <system_clock_source_get_hz+0xe>
    1e92:	0080      	lsls	r0, r0, #2
    1e94:	4b1d      	ldr	r3, [pc, #116]	; (1f0c <system_clock_source_get_hz+0x80>)
    1e96:	581b      	ldr	r3, [r3, r0]
    1e98:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1e9a:	2000      	movs	r0, #0
    1e9c:	e034      	b.n	1f08 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    1e9e:	4b1c      	ldr	r3, [pc, #112]	; (1f10 <system_clock_source_get_hz+0x84>)
    1ea0:	6918      	ldr	r0, [r3, #16]
    1ea2:	e031      	b.n	1f08 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1ea4:	4b1b      	ldr	r3, [pc, #108]	; (1f14 <system_clock_source_get_hz+0x88>)
    1ea6:	7d18      	ldrb	r0, [r3, #20]
    1ea8:	0700      	lsls	r0, r0, #28
    1eaa:	0f80      	lsrs	r0, r0, #30
    1eac:	1c43      	adds	r3, r0, #1
    1eae:	481a      	ldr	r0, [pc, #104]	; (1f18 <system_clock_source_get_hz+0x8c>)
    1eb0:	4358      	muls	r0, r3
    1eb2:	e029      	b.n	1f08 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    1eb4:	4b16      	ldr	r3, [pc, #88]	; (1f10 <system_clock_source_get_hz+0x84>)
    1eb6:	6958      	ldr	r0, [r3, #20]
    1eb8:	e026      	b.n	1f08 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1eba:	4b15      	ldr	r3, [pc, #84]	; (1f10 <system_clock_source_get_hz+0x84>)
    1ebc:	681b      	ldr	r3, [r3, #0]
			return 0;
    1ebe:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1ec0:	079b      	lsls	r3, r3, #30
    1ec2:	d521      	bpl.n	1f08 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1ec4:	4913      	ldr	r1, [pc, #76]	; (1f14 <system_clock_source_get_hz+0x88>)
    1ec6:	2280      	movs	r2, #128	; 0x80
    1ec8:	0052      	lsls	r2, r2, #1
    1eca:	68cb      	ldr	r3, [r1, #12]
    1ecc:	4213      	tst	r3, r2
    1ece:	d0fc      	beq.n	1eca <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    1ed0:	4b0f      	ldr	r3, [pc, #60]	; (1f10 <system_clock_source_get_hz+0x84>)
    1ed2:	681a      	ldr	r2, [r3, #0]
    1ed4:	2324      	movs	r3, #36	; 0x24
    1ed6:	4013      	ands	r3, r2
    1ed8:	2b04      	cmp	r3, #4
    1eda:	d001      	beq.n	1ee0 <system_clock_source_get_hz+0x54>
			return 48000000UL;
    1edc:	480f      	ldr	r0, [pc, #60]	; (1f1c <system_clock_source_get_hz+0x90>)
    1ede:	e013      	b.n	1f08 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1ee0:	2000      	movs	r0, #0
    1ee2:	4b0f      	ldr	r3, [pc, #60]	; (1f20 <system_clock_source_get_hz+0x94>)
    1ee4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1ee6:	4b0a      	ldr	r3, [pc, #40]	; (1f10 <system_clock_source_get_hz+0x84>)
    1ee8:	689b      	ldr	r3, [r3, #8]
    1eea:	041b      	lsls	r3, r3, #16
    1eec:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1eee:	4358      	muls	r0, r3
    1ef0:	e00a      	b.n	1f08 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1ef2:	2328      	movs	r3, #40	; 0x28
    1ef4:	4a07      	ldr	r2, [pc, #28]	; (1f14 <system_clock_source_get_hz+0x88>)
    1ef6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1ef8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1efa:	079b      	lsls	r3, r3, #30
    1efc:	d504      	bpl.n	1f08 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    1efe:	4b04      	ldr	r3, [pc, #16]	; (1f10 <system_clock_source_get_hz+0x84>)
    1f00:	68d8      	ldr	r0, [r3, #12]
    1f02:	e001      	b.n	1f08 <system_clock_source_get_hz+0x7c>
		return 32768UL;
    1f04:	2080      	movs	r0, #128	; 0x80
    1f06:	0200      	lsls	r0, r0, #8
	}
}
    1f08:	bd10      	pop	{r4, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	00004878 	.word	0x00004878
    1f10:	2000013c 	.word	0x2000013c
    1f14:	40000c00 	.word	0x40000c00
    1f18:	003d0900 	.word	0x003d0900
    1f1c:	02dc6c00 	.word	0x02dc6c00
    1f20:	00002511 	.word	0x00002511

00001f24 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f26:	46d6      	mov	lr, sl
    1f28:	464f      	mov	r7, r9
    1f2a:	4646      	mov	r6, r8
    1f2c:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1f2e:	4b20      	ldr	r3, [pc, #128]	; (1fb0 <system_clock_source_xosc32k_set_config+0x8c>)
    1f30:	469a      	mov	sl, r3
    1f32:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1f34:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1f36:	7801      	ldrb	r1, [r0, #0]
    1f38:	424c      	negs	r4, r1
    1f3a:	414c      	adcs	r4, r1
    1f3c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    1f3e:	7881      	ldrb	r1, [r0, #2]
    1f40:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1f42:	78c1      	ldrb	r1, [r0, #3]
    1f44:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    1f46:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1f48:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    1f4a:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1f4c:	6840      	ldr	r0, [r0, #4]
    1f4e:	4919      	ldr	r1, [pc, #100]	; (1fb4 <system_clock_source_xosc32k_set_config+0x90>)
    1f50:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    1f52:	2101      	movs	r1, #1
    1f54:	4648      	mov	r0, r9
    1f56:	0080      	lsls	r0, r0, #2
    1f58:	2204      	movs	r2, #4
    1f5a:	4393      	bics	r3, r2
    1f5c:	4303      	orrs	r3, r0
    1f5e:	4640      	mov	r0, r8
    1f60:	4008      	ands	r0, r1
    1f62:	00c0      	lsls	r0, r0, #3
    1f64:	3204      	adds	r2, #4
    1f66:	4393      	bics	r3, r2
    1f68:	4303      	orrs	r3, r0
    1f6a:	4660      	mov	r0, ip
    1f6c:	4008      	ands	r0, r1
    1f6e:	0100      	lsls	r0, r0, #4
    1f70:	3208      	adds	r2, #8
    1f72:	4393      	bics	r3, r2
    1f74:	4303      	orrs	r3, r0
    1f76:	400f      	ands	r7, r1
    1f78:	01bf      	lsls	r7, r7, #6
    1f7a:	2040      	movs	r0, #64	; 0x40
    1f7c:	4383      	bics	r3, r0
    1f7e:	433b      	orrs	r3, r7
    1f80:	400e      	ands	r6, r1
    1f82:	01f6      	lsls	r6, r6, #7
    1f84:	3040      	adds	r0, #64	; 0x40
    1f86:	4383      	bics	r3, r0
    1f88:	4333      	orrs	r3, r6
    1f8a:	3879      	subs	r0, #121	; 0x79
    1f8c:	4005      	ands	r5, r0
    1f8e:	022d      	lsls	r5, r5, #8
    1f90:	4809      	ldr	r0, [pc, #36]	; (1fb8 <system_clock_source_xosc32k_set_config+0x94>)
    1f92:	4003      	ands	r3, r0
    1f94:	432b      	orrs	r3, r5
    1f96:	4021      	ands	r1, r4
    1f98:	0309      	lsls	r1, r1, #12
    1f9a:	4808      	ldr	r0, [pc, #32]	; (1fbc <system_clock_source_xosc32k_set_config+0x98>)
    1f9c:	4003      	ands	r3, r0
    1f9e:	430b      	orrs	r3, r1
    1fa0:	4652      	mov	r2, sl
    1fa2:	6153      	str	r3, [r2, #20]
}
    1fa4:	bc1c      	pop	{r2, r3, r4}
    1fa6:	4690      	mov	r8, r2
    1fa8:	4699      	mov	r9, r3
    1faa:	46a2      	mov	sl, r4
    1fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	40001000 	.word	0x40001000
    1fb4:	2000013c 	.word	0x2000013c
    1fb8:	fffff8ff 	.word	0xfffff8ff
    1fbc:	ffffefff 	.word	0xffffefff

00001fc0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1fc0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1fc2:	7a83      	ldrb	r3, [r0, #10]
    1fc4:	069b      	lsls	r3, r3, #26
    1fc6:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    1fc8:	8982      	ldrh	r2, [r0, #12]
    1fca:	0592      	lsls	r2, r2, #22
    1fcc:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1fce:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1fd0:	491a      	ldr	r1, [pc, #104]	; (203c <system_clock_source_dfll_set_config+0x7c>)
    1fd2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1fd4:	7a03      	ldrb	r3, [r0, #8]
    1fd6:	7a42      	ldrb	r2, [r0, #9]
    1fd8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1fda:	8882      	ldrh	r2, [r0, #4]
    1fdc:	88c4      	ldrh	r4, [r0, #6]
    1fde:	4322      	orrs	r2, r4
    1fe0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1fe2:	7842      	ldrb	r2, [r0, #1]
    1fe4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1fe6:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    1fe8:	7882      	ldrb	r2, [r0, #2]
    1fea:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1fec:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1fee:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1ff0:	7803      	ldrb	r3, [r0, #0]
    1ff2:	2b04      	cmp	r3, #4
    1ff4:	d011      	beq.n	201a <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1ff6:	2b20      	cmp	r3, #32
    1ff8:	d10e      	bne.n	2018 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1ffa:	7b83      	ldrb	r3, [r0, #14]
    1ffc:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ffe:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2000:	4313      	orrs	r3, r2
    2002:	8a02      	ldrh	r2, [r0, #16]
    2004:	0412      	lsls	r2, r2, #16
    2006:	490e      	ldr	r1, [pc, #56]	; (2040 <system_clock_source_dfll_set_config+0x80>)
    2008:	400a      	ands	r2, r1
    200a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    200c:	4a0b      	ldr	r2, [pc, #44]	; (203c <system_clock_source_dfll_set_config+0x7c>)
    200e:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2010:	6811      	ldr	r1, [r2, #0]
    2012:	4b0c      	ldr	r3, [pc, #48]	; (2044 <system_clock_source_dfll_set_config+0x84>)
    2014:	430b      	orrs	r3, r1
    2016:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    2018:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    201a:	7b83      	ldrb	r3, [r0, #14]
    201c:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    201e:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2020:	4313      	orrs	r3, r2
    2022:	8a02      	ldrh	r2, [r0, #16]
    2024:	0412      	lsls	r2, r2, #16
    2026:	4906      	ldr	r1, [pc, #24]	; (2040 <system_clock_source_dfll_set_config+0x80>)
    2028:	400a      	ands	r2, r1
    202a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    202c:	4a03      	ldr	r2, [pc, #12]	; (203c <system_clock_source_dfll_set_config+0x7c>)
    202e:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2030:	6813      	ldr	r3, [r2, #0]
    2032:	2104      	movs	r1, #4
    2034:	430b      	orrs	r3, r1
    2036:	6013      	str	r3, [r2, #0]
    2038:	e7ee      	b.n	2018 <system_clock_source_dfll_set_config+0x58>
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	2000013c 	.word	0x2000013c
    2040:	03ff0000 	.word	0x03ff0000
    2044:	00000424 	.word	0x00000424

00002048 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2048:	2808      	cmp	r0, #8
    204a:	d803      	bhi.n	2054 <system_clock_source_enable+0xc>
    204c:	0080      	lsls	r0, r0, #2
    204e:	4b2d      	ldr	r3, [pc, #180]	; (2104 <system_clock_source_enable+0xbc>)
    2050:	581b      	ldr	r3, [r3, r0]
    2052:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2054:	2017      	movs	r0, #23
    2056:	e054      	b.n	2102 <system_clock_source_enable+0xba>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    2058:	4a2b      	ldr	r2, [pc, #172]	; (2108 <system_clock_source_enable+0xc0>)
    205a:	7d13      	ldrb	r3, [r2, #20]
    205c:	2102      	movs	r1, #2
    205e:	430b      	orrs	r3, r1
    2060:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2062:	2000      	movs	r0, #0
    2064:	e04d      	b.n	2102 <system_clock_source_enable+0xba>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    2066:	4a29      	ldr	r2, [pc, #164]	; (210c <system_clock_source_enable+0xc4>)
    2068:	6993      	ldr	r3, [r2, #24]
    206a:	2102      	movs	r1, #2
    206c:	430b      	orrs	r3, r1
    206e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2070:	2000      	movs	r0, #0
		break;
    2072:	e046      	b.n	2102 <system_clock_source_enable+0xba>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2074:	4a24      	ldr	r2, [pc, #144]	; (2108 <system_clock_source_enable+0xc0>)
    2076:	8a13      	ldrh	r3, [r2, #16]
    2078:	2102      	movs	r1, #2
    207a:	430b      	orrs	r3, r1
    207c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    207e:	2000      	movs	r0, #0
		break;
    2080:	e03f      	b.n	2102 <system_clock_source_enable+0xba>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    2082:	4a22      	ldr	r2, [pc, #136]	; (210c <system_clock_source_enable+0xc4>)
    2084:	6953      	ldr	r3, [r2, #20]
    2086:	2102      	movs	r1, #2
    2088:	430b      	orrs	r3, r1
    208a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    208c:	2000      	movs	r0, #0
		break;
    208e:	e038      	b.n	2102 <system_clock_source_enable+0xba>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    2090:	491f      	ldr	r1, [pc, #124]	; (2110 <system_clock_source_enable+0xc8>)
    2092:	680b      	ldr	r3, [r1, #0]
    2094:	2202      	movs	r2, #2
    2096:	4313      	orrs	r3, r2
    2098:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    209a:	4b1b      	ldr	r3, [pc, #108]	; (2108 <system_clock_source_enable+0xc0>)
    209c:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    209e:	0019      	movs	r1, r3
    20a0:	32fe      	adds	r2, #254	; 0xfe
    20a2:	68cb      	ldr	r3, [r1, #12]
    20a4:	4213      	tst	r3, r2
    20a6:	d0fc      	beq.n	20a2 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    20a8:	4b19      	ldr	r3, [pc, #100]	; (2110 <system_clock_source_enable+0xc8>)
    20aa:	689a      	ldr	r2, [r3, #8]
    20ac:	4b16      	ldr	r3, [pc, #88]	; (2108 <system_clock_source_enable+0xc0>)
    20ae:	621a      	str	r2, [r3, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    20b0:	2202      	movs	r2, #2
    20b2:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    20b4:	0019      	movs	r1, r3
    20b6:	32fe      	adds	r2, #254	; 0xfe
    20b8:	68cb      	ldr	r3, [r1, #12]
    20ba:	4213      	tst	r3, r2
    20bc:	d0fc      	beq.n	20b8 <system_clock_source_enable+0x70>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    20be:	4b14      	ldr	r3, [pc, #80]	; (2110 <system_clock_source_enable+0xc8>)
    20c0:	685a      	ldr	r2, [r3, #4]
    20c2:	4b11      	ldr	r3, [pc, #68]	; (2108 <system_clock_source_enable+0xc0>)
    20c4:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    20c6:	2200      	movs	r2, #0
    20c8:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    20ca:	0019      	movs	r1, r3
    20cc:	3201      	adds	r2, #1
    20ce:	32ff      	adds	r2, #255	; 0xff
    20d0:	68cb      	ldr	r3, [r1, #12]
    20d2:	4213      	tst	r3, r2
    20d4:	d0fc      	beq.n	20d0 <system_clock_source_enable+0x88>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    20d6:	4b0e      	ldr	r3, [pc, #56]	; (2110 <system_clock_source_enable+0xc8>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	b29b      	uxth	r3, r3
    20dc:	4a0a      	ldr	r2, [pc, #40]	; (2108 <system_clock_source_enable+0xc0>)
    20de:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    20e0:	2000      	movs	r0, #0
    20e2:	e00e      	b.n	2102 <system_clock_source_enable+0xba>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    20e4:	4908      	ldr	r1, [pc, #32]	; (2108 <system_clock_source_enable+0xc0>)
    20e6:	2228      	movs	r2, #40	; 0x28
    20e8:	5c8b      	ldrb	r3, [r1, r2]
    20ea:	2002      	movs	r0, #2
    20ec:	4303      	orrs	r3, r0
    20ee:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    20f0:	0008      	movs	r0, r1
    20f2:	2138      	movs	r1, #56	; 0x38
    20f4:	3a26      	subs	r2, #38	; 0x26
    20f6:	5c43      	ldrb	r3, [r0, r1]
    20f8:	4213      	tst	r3, r2
    20fa:	d1fc      	bne.n	20f6 <system_clock_source_enable+0xae>
	return STATUS_OK;
    20fc:	2000      	movs	r0, #0
    20fe:	e000      	b.n	2102 <system_clock_source_enable+0xba>
		return STATUS_OK;
    2100:	2000      	movs	r0, #0
}
    2102:	4770      	bx	lr
    2104:	0000489c 	.word	0x0000489c
    2108:	40000c00 	.word	0x40000c00
    210c:	40001000 	.word	0x40001000
    2110:	2000013c 	.word	0x2000013c

00002114 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2114:	b5f0      	push	{r4, r5, r6, r7, lr}
    2116:	46c6      	mov	lr, r8
    2118:	b500      	push	{lr}
    211a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    211c:	2280      	movs	r2, #128	; 0x80
    211e:	0052      	lsls	r2, r2, #1
    2120:	4b65      	ldr	r3, [pc, #404]	; (22b8 <system_clock_init+0x1a4>)
    2122:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    2124:	3afd      	subs	r2, #253	; 0xfd
    2126:	4b65      	ldr	r3, [pc, #404]	; (22bc <system_clock_init+0x1a8>)
    2128:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    212a:	4a65      	ldr	r2, [pc, #404]	; (22c0 <system_clock_init+0x1ac>)
    212c:	6853      	ldr	r3, [r2, #4]
    212e:	211e      	movs	r1, #30
    2130:	438b      	bics	r3, r1
    2132:	391a      	subs	r1, #26
    2134:	430b      	orrs	r3, r1
    2136:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2138:	2380      	movs	r3, #128	; 0x80
    213a:	05db      	lsls	r3, r3, #23
    213c:	789b      	ldrb	r3, [r3, #2]
    213e:	2b02      	cmp	r3, #2
    2140:	d00f      	beq.n	2162 <system_clock_init+0x4e>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2142:	2380      	movs	r3, #128	; 0x80
    2144:	05db      	lsls	r3, r3, #23
    2146:	789b      	ldrb	r3, [r3, #2]
    2148:	b25b      	sxtb	r3, r3
    214a:	2b00      	cmp	r3, #0
    214c:	db09      	blt.n	2162 <system_clock_init+0x4e>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    214e:	2380      	movs	r3, #128	; 0x80
    2150:	05db      	lsls	r3, r3, #23
    2152:	2201      	movs	r2, #1
    2154:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2156:	3201      	adds	r2, #1
    2158:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    215a:	001a      	movs	r2, r3
    215c:	7993      	ldrb	r3, [r2, #6]
    215e:	2b00      	cmp	r3, #0
    2160:	d0fc      	beq.n	215c <system_clock_init+0x48>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2162:	a809      	add	r0, sp, #36	; 0x24
    2164:	2300      	movs	r3, #0
    2166:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2168:	2280      	movs	r2, #128	; 0x80
    216a:	0212      	lsls	r2, r2, #8
    216c:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    216e:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    2170:	2201      	movs	r2, #1
    2172:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    2174:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2176:	2104      	movs	r1, #4
    2178:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    217a:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    217c:	7202      	strb	r2, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    217e:	4b51      	ldr	r3, [pc, #324]	; (22c4 <system_clock_init+0x1b0>)
    2180:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2182:	2005      	movs	r0, #5
    2184:	4b50      	ldr	r3, [pc, #320]	; (22c8 <system_clock_init+0x1b4>)
    2186:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2188:	4950      	ldr	r1, [pc, #320]	; (22cc <system_clock_init+0x1b8>)
    218a:	2201      	movs	r2, #1
    218c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    218e:	421a      	tst	r2, r3
    2190:	d0fc      	beq.n	218c <system_clock_init+0x78>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    2192:	4b49      	ldr	r3, [pc, #292]	; (22b8 <system_clock_init+0x1a4>)
    2194:	7d19      	ldrb	r1, [r3, #20]
    2196:	2280      	movs	r2, #128	; 0x80
    2198:	4252      	negs	r2, r2
    219a:	430a      	orrs	r2, r1
    219c:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    219e:	7d1a      	ldrb	r2, [r3, #20]
    21a0:	2140      	movs	r1, #64	; 0x40
    21a2:	438a      	bics	r2, r1
    21a4:	751a      	strb	r2, [r3, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    21a6:	ab04      	add	r3, sp, #16
    21a8:	2200      	movs	r2, #0
    21aa:	2100      	movs	r1, #0
    21ac:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    21ae:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    21b0:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    21b2:	709a      	strb	r2, [r3, #2]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    21b4:	3120      	adds	r1, #32
    21b6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    21b8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    21ba:	4b45      	ldr	r3, [pc, #276]	; (22d0 <system_clock_init+0x1bc>)
    21bc:	681b      	ldr	r3, [r3, #0]
    21be:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    21c0:	2b3f      	cmp	r3, #63	; 0x3f
    21c2:	d100      	bne.n	21c6 <system_clock_init+0xb2>
    21c4:	e075      	b.n	22b2 <system_clock_init+0x19e>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    21c6:	a804      	add	r0, sp, #16
    21c8:	7283      	strb	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    21ca:	2303      	movs	r3, #3
    21cc:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    21ce:	3307      	adds	r3, #7
    21d0:	8203      	strh	r3, [r0, #16]
		dfll_conf.fine_value   = 0x1ff;
    21d2:	4b40      	ldr	r3, [pc, #256]	; (22d4 <system_clock_init+0x1c0>)
    21d4:	8183      	strh	r3, [r0, #12]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    21d6:	3bff      	subs	r3, #255	; 0xff
    21d8:	80c3      	strh	r3, [r0, #6]

		dfll_conf.multiply_factor = 48000;
    21da:	4b3f      	ldr	r3, [pc, #252]	; (22d8 <system_clock_init+0x1c4>)
    21dc:	8243      	strh	r3, [r0, #18]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    21de:	4b3f      	ldr	r3, [pc, #252]	; (22dc <system_clock_init+0x1c8>)
    21e0:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    21e2:	4b3f      	ldr	r3, [pc, #252]	; (22e0 <system_clock_init+0x1cc>)
    21e4:	4798      	blx	r3
	config->division_factor    = 1;
    21e6:	ac01      	add	r4, sp, #4
    21e8:	2601      	movs	r6, #1
    21ea:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    21ec:	2500      	movs	r5, #0
    21ee:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    21f0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    21f2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    21f4:	2305      	movs	r3, #5
    21f6:	7023      	strb	r3, [r4, #0]
    21f8:	0021      	movs	r1, r4
    21fa:	2001      	movs	r0, #1
    21fc:	4b39      	ldr	r3, [pc, #228]	; (22e4 <system_clock_init+0x1d0>)
    21fe:	4698      	mov	r8, r3
    2200:	4798      	blx	r3
    2202:	2001      	movs	r0, #1
    2204:	4f38      	ldr	r7, [pc, #224]	; (22e8 <system_clock_init+0x1d4>)
    2206:	47b8      	blx	r7
	config->division_factor    = 1;
    2208:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    220a:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    220c:	7265      	strb	r5, [r4, #9]
    220e:	2307      	movs	r3, #7
    2210:	7023      	strb	r3, [r4, #0]
    2212:	7226      	strb	r6, [r4, #8]
    2214:	0021      	movs	r1, r4
    2216:	2003      	movs	r0, #3
    2218:	47c0      	blx	r8
    221a:	2003      	movs	r0, #3
    221c:	47b8      	blx	r7
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    221e:	2007      	movs	r0, #7
    2220:	4b29      	ldr	r3, [pc, #164]	; (22c8 <system_clock_init+0x1b4>)
    2222:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2224:	4924      	ldr	r1, [pc, #144]	; (22b8 <system_clock_init+0x1a4>)
    2226:	2280      	movs	r2, #128	; 0x80
    2228:	0052      	lsls	r2, r2, #1
    222a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    222c:	4213      	tst	r3, r2
    222e:	d0fc      	beq.n	222a <system_clock_init+0x116>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		OSCCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2230:	4a21      	ldr	r2, [pc, #132]	; (22b8 <system_clock_init+0x1a4>)
    2232:	8b13      	ldrh	r3, [r2, #24]
    2234:	2180      	movs	r1, #128	; 0x80
    2236:	430b      	orrs	r3, r1
    2238:	8313      	strh	r3, [r2, #24]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    223a:	4c2c      	ldr	r4, [pc, #176]	; (22ec <system_clock_init+0x1d8>)
    223c:	2301      	movs	r3, #1
    223e:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2240:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2242:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
    2244:	a901      	add	r1, sp, #4
    2246:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2248:	2200      	movs	r2, #0
    224a:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    224c:	724a      	strb	r2, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    224e:	3207      	adds	r2, #7
    2250:	700a      	strb	r2, [r1, #0]
    2252:	720b      	strb	r3, [r1, #8]
    2254:	2000      	movs	r0, #0
    2256:	4b23      	ldr	r3, [pc, #140]	; (22e4 <system_clock_init+0x1d0>)
    2258:	4798      	blx	r3
    225a:	2000      	movs	r0, #0
    225c:	4b22      	ldr	r3, [pc, #136]	; (22e8 <system_clock_init+0x1d4>)
    225e:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2260:	2000      	movs	r0, #0
    2262:	4b23      	ldr	r3, [pc, #140]	; (22f0 <system_clock_init+0x1dc>)
    2264:	4798      	blx	r3
    2266:	7921      	ldrb	r1, [r4, #4]
    2268:	b2c9      	uxtb	r1, r1
    226a:	4b22      	ldr	r3, [pc, #136]	; (22f4 <system_clock_init+0x1e0>)
    226c:	4798      	blx	r3
	uint32_t cpu_freq = system_cpu_clock_get_hz();

	/* Set the BUPDIV & LPDIV value such that backup & low power domain clock 
	 * does not exceed their max clock freq even if CPU is configured to it's 
	 * maximum frequency */
	if ((cpu_freq > 6000000) && ((CONF_CLOCK_BACKUP_DIVIDER == SYSTEM_MAIN_CLOCK_DIV_1) \
    226e:	4b22      	ldr	r3, [pc, #136]	; (22f8 <system_clock_init+0x1e4>)
    2270:	4298      	cmp	r0, r3
    2272:	d902      	bls.n	227a <system_clock_init+0x166>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2274:	2208      	movs	r2, #8
    2276:	71a2      	strb	r2, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2278:	7162      	strb	r2, [r4, #5]
		system_backup_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
		system_low_power_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
	}

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */	
	if (cpu_freq <= 12000000) {
    227a:	4b20      	ldr	r3, [pc, #128]	; (22fc <system_clock_init+0x1e8>)
    227c:	4298      	cmp	r0, r3
    227e:	d814      	bhi.n	22aa <system_clock_init+0x196>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2280:	2380      	movs	r3, #128	; 0x80
    2282:	05db      	lsls	r3, r3, #23
    2284:	789b      	ldrb	r3, [r3, #2]
    2286:	2b00      	cmp	r3, #0
    2288:	d00f      	beq.n	22aa <system_clock_init+0x196>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    228a:	2380      	movs	r3, #128	; 0x80
    228c:	05db      	lsls	r3, r3, #23
    228e:	789b      	ldrb	r3, [r3, #2]
    2290:	b25b      	sxtb	r3, r3
    2292:	2b00      	cmp	r3, #0
    2294:	db09      	blt.n	22aa <system_clock_init+0x196>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2296:	2380      	movs	r3, #128	; 0x80
    2298:	05db      	lsls	r3, r3, #23
    229a:	2201      	movs	r2, #1
    229c:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    229e:	2200      	movs	r2, #0
    22a0:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    22a2:	001a      	movs	r2, r3
    22a4:	7993      	ldrb	r3, [r2, #6]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d0fc      	beq.n	22a4 <system_clock_init+0x190>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    22aa:	b00c      	add	sp, #48	; 0x30
    22ac:	bc04      	pop	{r2}
    22ae:	4690      	mov	r8, r2
    22b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    22b2:	3b20      	subs	r3, #32
    22b4:	e787      	b.n	21c6 <system_clock_init+0xb2>
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	40000c00 	.word	0x40000c00
    22bc:	40001400 	.word	0x40001400
    22c0:	41004000 	.word	0x41004000
    22c4:	00001f25 	.word	0x00001f25
    22c8:	00002049 	.word	0x00002049
    22cc:	40001000 	.word	0x40001000
    22d0:	00806020 	.word	0x00806020
    22d4:	000001ff 	.word	0x000001ff
    22d8:	ffffbb80 	.word	0xffffbb80
    22dc:	00001fc1 	.word	0x00001fc1
    22e0:	00002301 	.word	0x00002301
    22e4:	00002325 	.word	0x00002325
    22e8:	000023d1 	.word	0x000023d1
    22ec:	40000400 	.word	0x40000400
    22f0:	00002411 	.word	0x00002411
    22f4:	00004361 	.word	0x00004361
    22f8:	005b8d80 	.word	0x005b8d80
    22fc:	00b71b00 	.word	0x00b71b00

00002300 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    2300:	4a06      	ldr	r2, [pc, #24]	; (231c <system_gclk_init+0x1c>)
    2302:	6953      	ldr	r3, [r2, #20]
    2304:	2140      	movs	r1, #64	; 0x40
    2306:	430b      	orrs	r3, r1
    2308:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    230a:	2201      	movs	r2, #1
    230c:	4b04      	ldr	r3, [pc, #16]	; (2320 <system_gclk_init+0x20>)
    230e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2310:	0019      	movs	r1, r3
    2312:	780b      	ldrb	r3, [r1, #0]
    2314:	4213      	tst	r3, r2
    2316:	d1fc      	bne.n	2312 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2318:	4770      	bx	lr
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	40000400 	.word	0x40000400
    2320:	40001800 	.word	0x40001800

00002324 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2328:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    232a:	784b      	ldrb	r3, [r1, #1]
    232c:	2b00      	cmp	r3, #0
    232e:	d002      	beq.n	2336 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2330:	2380      	movs	r3, #128	; 0x80
    2332:	00db      	lsls	r3, r3, #3
    2334:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2336:	7a4b      	ldrb	r3, [r1, #9]
    2338:	2b00      	cmp	r3, #0
    233a:	d002      	beq.n	2342 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    233c:	2380      	movs	r3, #128	; 0x80
    233e:	011b      	lsls	r3, r3, #4
    2340:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2342:	6848      	ldr	r0, [r1, #4]
    2344:	2801      	cmp	r0, #1
    2346:	d90f      	bls.n	2368 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2348:	1e43      	subs	r3, r0, #1
    234a:	4218      	tst	r0, r3
    234c:	d131      	bne.n	23b2 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    234e:	2802      	cmp	r0, #2
    2350:	d92d      	bls.n	23ae <system_gclk_gen_set_config+0x8a>
    2352:	2302      	movs	r3, #2
    2354:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2356:	3201      	adds	r2, #1
						mask <<= 1) {
    2358:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    235a:	4298      	cmp	r0, r3
    235c:	d8fb      	bhi.n	2356 <system_gclk_gen_set_config+0x32>
    235e:	2380      	movs	r3, #128	; 0x80
    2360:	015b      	lsls	r3, r3, #5
    2362:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2364:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2366:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2368:	7a0b      	ldrb	r3, [r1, #8]
    236a:	2b00      	cmp	r3, #0
    236c:	d002      	beq.n	2374 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    236e:	2380      	movs	r3, #128	; 0x80
    2370:	019b      	lsls	r3, r3, #6
    2372:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2374:	2604      	movs	r6, #4
    2376:	40a6      	lsls	r6, r4
    2378:	4911      	ldr	r1, [pc, #68]	; (23c0 <system_gclk_gen_set_config+0x9c>)
    237a:	4a12      	ldr	r2, [pc, #72]	; (23c4 <system_gclk_gen_set_config+0xa0>)
    237c:	684b      	ldr	r3, [r1, #4]
    237e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    2380:	421e      	tst	r6, r3
    2382:	d1fb      	bne.n	237c <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    2384:	4b10      	ldr	r3, [pc, #64]	; (23c8 <system_gclk_gen_set_config+0xa4>)
    2386:	4798      	blx	r3
    2388:	00a4      	lsls	r4, r4, #2
    238a:	4b0d      	ldr	r3, [pc, #52]	; (23c0 <system_gclk_gen_set_config+0x9c>)
    238c:	469c      	mov	ip, r3
    238e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    2390:	6a22      	ldr	r2, [r4, #32]
    2392:	2380      	movs	r3, #128	; 0x80
    2394:	005b      	lsls	r3, r3, #1
    2396:	401a      	ands	r2, r3
    2398:	432a      	orrs	r2, r5
    239a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    239c:	4661      	mov	r1, ip
    239e:	4a09      	ldr	r2, [pc, #36]	; (23c4 <system_gclk_gen_set_config+0xa0>)
    23a0:	684b      	ldr	r3, [r1, #4]
    23a2:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    23a4:	421e      	tst	r6, r3
    23a6:	d1fb      	bne.n	23a0 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    23a8:	4b08      	ldr	r3, [pc, #32]	; (23cc <system_gclk_gen_set_config+0xa8>)
    23aa:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    23ac:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    23ae:	2200      	movs	r2, #0
    23b0:	e7d5      	b.n	235e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    23b2:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    23b4:	2380      	movs	r3, #128	; 0x80
    23b6:	009b      	lsls	r3, r3, #2
    23b8:	4318      	orrs	r0, r3
    23ba:	4305      	orrs	r5, r0
    23bc:	e7d4      	b.n	2368 <system_gclk_gen_set_config+0x44>
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	40001800 	.word	0x40001800
    23c4:	000007fc 	.word	0x000007fc
    23c8:	00001e1d 	.word	0x00001e1d
    23cc:	00001e5d 	.word	0x00001e5d

000023d0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    23d0:	b510      	push	{r4, lr}
    23d2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    23d4:	2204      	movs	r2, #4
    23d6:	4082      	lsls	r2, r0
    23d8:	4809      	ldr	r0, [pc, #36]	; (2400 <system_gclk_gen_enable+0x30>)
    23da:	490a      	ldr	r1, [pc, #40]	; (2404 <system_gclk_gen_enable+0x34>)
    23dc:	6843      	ldr	r3, [r0, #4]
    23de:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    23e0:	421a      	tst	r2, r3
    23e2:	d1fb      	bne.n	23dc <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    23e4:	4b08      	ldr	r3, [pc, #32]	; (2408 <system_gclk_gen_enable+0x38>)
    23e6:	4798      	blx	r3
    23e8:	00a4      	lsls	r4, r4, #2
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <system_gclk_gen_enable+0x30>)
    23ec:	469c      	mov	ip, r3
    23ee:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    23f0:	6a22      	ldr	r2, [r4, #32]
    23f2:	2380      	movs	r3, #128	; 0x80
    23f4:	005b      	lsls	r3, r3, #1
    23f6:	4313      	orrs	r3, r2
    23f8:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    23fa:	4b04      	ldr	r3, [pc, #16]	; (240c <system_gclk_gen_enable+0x3c>)
    23fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23fe:	bd10      	pop	{r4, pc}
    2400:	40001800 	.word	0x40001800
    2404:	000007fc 	.word	0x000007fc
    2408:	00001e1d 	.word	0x00001e1d
    240c:	00001e5d 	.word	0x00001e5d

00002410 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2412:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2414:	2204      	movs	r2, #4
    2416:	4082      	lsls	r2, r0
    2418:	4812      	ldr	r0, [pc, #72]	; (2464 <system_gclk_gen_get_hz+0x54>)
    241a:	4913      	ldr	r1, [pc, #76]	; (2468 <system_gclk_gen_get_hz+0x58>)
    241c:	6843      	ldr	r3, [r0, #4]
    241e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2420:	421a      	tst	r2, r3
    2422:	d1fb      	bne.n	241c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    2424:	4b11      	ldr	r3, [pc, #68]	; (246c <system_gclk_gen_get_hz+0x5c>)
    2426:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2428:	4f0e      	ldr	r7, [pc, #56]	; (2464 <system_gclk_gen_get_hz+0x54>)
    242a:	3408      	adds	r4, #8
    242c:	00a4      	lsls	r4, r4, #2
    242e:	59e0      	ldr	r0, [r4, r7]
    2430:	0700      	lsls	r0, r0, #28
    2432:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2434:	4b0e      	ldr	r3, [pc, #56]	; (2470 <system_gclk_gen_get_hz+0x60>)
    2436:	4798      	blx	r3
    2438:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    243a:	59e5      	ldr	r5, [r4, r7]
    243c:	04ed      	lsls	r5, r5, #19
    243e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2440:	59e4      	ldr	r4, [r4, r7]
    2442:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2444:	4b0b      	ldr	r3, [pc, #44]	; (2474 <system_gclk_gen_get_hz+0x64>)
    2446:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2448:	2d00      	cmp	r5, #0
    244a:	d107      	bne.n	245c <system_gclk_gen_get_hz+0x4c>
    244c:	2c01      	cmp	r4, #1
    244e:	d907      	bls.n	2460 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    2450:	0021      	movs	r1, r4
    2452:	0030      	movs	r0, r6
    2454:	4b08      	ldr	r3, [pc, #32]	; (2478 <system_gclk_gen_get_hz+0x68>)
    2456:	4798      	blx	r3
    2458:	0006      	movs	r6, r0
    245a:	e001      	b.n	2460 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    245c:	3401      	adds	r4, #1
    245e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    2460:	0030      	movs	r0, r6
    2462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2464:	40001800 	.word	0x40001800
    2468:	000007fc 	.word	0x000007fc
    246c:	00001e1d 	.word	0x00001e1d
    2470:	00001e8d 	.word	0x00001e8d
    2474:	00001e5d 	.word	0x00001e5d
    2478:	00004361 	.word	0x00004361

0000247c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    247c:	b510      	push	{r4, lr}
    247e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2480:	4b09      	ldr	r3, [pc, #36]	; (24a8 <system_gclk_chan_enable+0x2c>)
    2482:	4798      	blx	r3
    2484:	00a0      	lsls	r0, r4, #2
    2486:	4b09      	ldr	r3, [pc, #36]	; (24ac <system_gclk_chan_enable+0x30>)
    2488:	469c      	mov	ip, r3
    248a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    248c:	2280      	movs	r2, #128	; 0x80
    248e:	5883      	ldr	r3, [r0, r2]
    2490:	2140      	movs	r1, #64	; 0x40
    2492:	430b      	orrs	r3, r1
    2494:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    2496:	3140      	adds	r1, #64	; 0x40
    2498:	3a40      	subs	r2, #64	; 0x40
    249a:	5843      	ldr	r3, [r0, r1]
    249c:	421a      	tst	r2, r3
    249e:	d0fc      	beq.n	249a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    24a0:	4b03      	ldr	r3, [pc, #12]	; (24b0 <system_gclk_chan_enable+0x34>)
    24a2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    24a4:	bd10      	pop	{r4, pc}
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	00001e1d 	.word	0x00001e1d
    24ac:	40001800 	.word	0x40001800
    24b0:	00001e5d 	.word	0x00001e5d

000024b4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    24b4:	b510      	push	{r4, lr}
    24b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    24b8:	4b09      	ldr	r3, [pc, #36]	; (24e0 <system_gclk_chan_disable+0x2c>)
    24ba:	4798      	blx	r3
    24bc:	00a0      	lsls	r0, r4, #2
    24be:	4b09      	ldr	r3, [pc, #36]	; (24e4 <system_gclk_chan_disable+0x30>)
    24c0:	469c      	mov	ip, r3
    24c2:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    24c4:	2280      	movs	r2, #128	; 0x80
    24c6:	5883      	ldr	r3, [r0, r2]
    24c8:	2140      	movs	r1, #64	; 0x40
    24ca:	438b      	bics	r3, r1
    24cc:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    24ce:	3140      	adds	r1, #64	; 0x40
    24d0:	3a40      	subs	r2, #64	; 0x40
    24d2:	5843      	ldr	r3, [r0, r1]
    24d4:	421a      	tst	r2, r3
    24d6:	d1fc      	bne.n	24d2 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    24d8:	4b03      	ldr	r3, [pc, #12]	; (24e8 <system_gclk_chan_disable+0x34>)
    24da:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    24dc:	bd10      	pop	{r4, pc}
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	00001e1d 	.word	0x00001e1d
    24e4:	40001800 	.word	0x40001800
    24e8:	00001e5d 	.word	0x00001e5d

000024ec <system_gclk_chan_set_config>:
{
    24ec:	b570      	push	{r4, r5, r6, lr}
    24ee:	0004      	movs	r4, r0
    24f0:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    24f2:	4b05      	ldr	r3, [pc, #20]	; (2508 <system_gclk_chan_set_config+0x1c>)
    24f4:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    24f6:	782a      	ldrb	r2, [r5, #0]
    24f8:	230f      	movs	r3, #15
    24fa:	4013      	ands	r3, r2
    24fc:	3420      	adds	r4, #32
    24fe:	00a4      	lsls	r4, r4, #2
    2500:	4a02      	ldr	r2, [pc, #8]	; (250c <system_gclk_chan_set_config+0x20>)
    2502:	50a3      	str	r3, [r4, r2]
}
    2504:	bd70      	pop	{r4, r5, r6, pc}
    2506:	46c0      	nop			; (mov r8, r8)
    2508:	000024b5 	.word	0x000024b5
    250c:	40001800 	.word	0x40001800

00002510 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2510:	b510      	push	{r4, lr}
    2512:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2514:	4b06      	ldr	r3, [pc, #24]	; (2530 <system_gclk_chan_get_hz+0x20>)
    2516:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2518:	3420      	adds	r4, #32
    251a:	00a4      	lsls	r4, r4, #2
    251c:	4b05      	ldr	r3, [pc, #20]	; (2534 <system_gclk_chan_get_hz+0x24>)
    251e:	58e4      	ldr	r4, [r4, r3]
    2520:	0724      	lsls	r4, r4, #28
    2522:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2524:	4b04      	ldr	r3, [pc, #16]	; (2538 <system_gclk_chan_get_hz+0x28>)
    2526:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2528:	0020      	movs	r0, r4
    252a:	4b04      	ldr	r3, [pc, #16]	; (253c <system_gclk_chan_get_hz+0x2c>)
    252c:	4798      	blx	r3
}
    252e:	bd10      	pop	{r4, pc}
    2530:	00001e1d 	.word	0x00001e1d
    2534:	40001800 	.word	0x40001800
    2538:	00001e5d 	.word	0x00001e5d
    253c:	00002411 	.word	0x00002411

00002540 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2540:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2542:	78d3      	ldrb	r3, [r2, #3]
    2544:	2b00      	cmp	r3, #0
    2546:	d135      	bne.n	25b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2548:	7813      	ldrb	r3, [r2, #0]
    254a:	2b80      	cmp	r3, #128	; 0x80
    254c:	d029      	beq.n	25a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    254e:	061b      	lsls	r3, r3, #24
    2550:	2480      	movs	r4, #128	; 0x80
    2552:	0264      	lsls	r4, r4, #9
    2554:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2556:	7854      	ldrb	r4, [r2, #1]
    2558:	2502      	movs	r5, #2
    255a:	43ac      	bics	r4, r5
    255c:	d106      	bne.n	256c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    255e:	7894      	ldrb	r4, [r2, #2]
    2560:	2c00      	cmp	r4, #0
    2562:	d120      	bne.n	25a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2564:	2480      	movs	r4, #128	; 0x80
    2566:	02a4      	lsls	r4, r4, #10
    2568:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    256a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    256c:	7854      	ldrb	r4, [r2, #1]
    256e:	3c01      	subs	r4, #1
    2570:	2c01      	cmp	r4, #1
    2572:	d91c      	bls.n	25ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2574:	040d      	lsls	r5, r1, #16
    2576:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2578:	24a0      	movs	r4, #160	; 0xa0
    257a:	05e4      	lsls	r4, r4, #23
    257c:	432c      	orrs	r4, r5
    257e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2580:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2582:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2584:	24d0      	movs	r4, #208	; 0xd0
    2586:	0624      	lsls	r4, r4, #24
    2588:	432c      	orrs	r4, r5
    258a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    258c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    258e:	78d4      	ldrb	r4, [r2, #3]
    2590:	2c00      	cmp	r4, #0
    2592:	d122      	bne.n	25da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2594:	035b      	lsls	r3, r3, #13
    2596:	d51c      	bpl.n	25d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2598:	7893      	ldrb	r3, [r2, #2]
    259a:	2b01      	cmp	r3, #1
    259c:	d01e      	beq.n	25dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    259e:	6141      	str	r1, [r0, #20]
    25a0:	e017      	b.n	25d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    25a2:	2300      	movs	r3, #0
    25a4:	e7d7      	b.n	2556 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    25a6:	24c0      	movs	r4, #192	; 0xc0
    25a8:	02e4      	lsls	r4, r4, #11
    25aa:	4323      	orrs	r3, r4
    25ac:	e7dd      	b.n	256a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    25ae:	4c0d      	ldr	r4, [pc, #52]	; (25e4 <_system_pinmux_config+0xa4>)
    25b0:	4023      	ands	r3, r4
    25b2:	e7df      	b.n	2574 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    25b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    25b6:	040c      	lsls	r4, r1, #16
    25b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    25ba:	23a0      	movs	r3, #160	; 0xa0
    25bc:	05db      	lsls	r3, r3, #23
    25be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    25c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    25c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    25c4:	23d0      	movs	r3, #208	; 0xd0
    25c6:	061b      	lsls	r3, r3, #24
    25c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    25ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    25cc:	78d3      	ldrb	r3, [r2, #3]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d103      	bne.n	25da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    25d2:	7853      	ldrb	r3, [r2, #1]
    25d4:	3b01      	subs	r3, #1
    25d6:	2b01      	cmp	r3, #1
    25d8:	d902      	bls.n	25e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    25da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    25dc:	6181      	str	r1, [r0, #24]
    25de:	e7f8      	b.n	25d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    25e0:	6081      	str	r1, [r0, #8]
}
    25e2:	e7fa      	b.n	25da <_system_pinmux_config+0x9a>
    25e4:	fffbffff 	.word	0xfffbffff

000025e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    25e8:	b510      	push	{r4, lr}
    25ea:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    25ec:	09c1      	lsrs	r1, r0, #7
		return NULL;
    25ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    25f0:	2900      	cmp	r1, #0
    25f2:	d104      	bne.n	25fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    25f4:	0943      	lsrs	r3, r0, #5
    25f6:	01db      	lsls	r3, r3, #7
    25f8:	4905      	ldr	r1, [pc, #20]	; (2610 <system_pinmux_pin_set_config+0x28>)
    25fa:	468c      	mov	ip, r1
    25fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    25fe:	241f      	movs	r4, #31
    2600:	4020      	ands	r0, r4
    2602:	2101      	movs	r1, #1
    2604:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2606:	0018      	movs	r0, r3
    2608:	4b02      	ldr	r3, [pc, #8]	; (2614 <system_pinmux_pin_set_config+0x2c>)
    260a:	4798      	blx	r3
}
    260c:	bd10      	pop	{r4, pc}
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	40002800 	.word	0x40002800
    2614:	00002541 	.word	0x00002541

00002618 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2618:	4770      	bx	lr
	...

0000261c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    261c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    261e:	4b05      	ldr	r3, [pc, #20]	; (2634 <system_init+0x18>)
    2620:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2622:	4b05      	ldr	r3, [pc, #20]	; (2638 <system_init+0x1c>)
    2624:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2626:	4b05      	ldr	r3, [pc, #20]	; (263c <system_init+0x20>)
    2628:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    262a:	4b05      	ldr	r3, [pc, #20]	; (2640 <system_init+0x24>)
    262c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    262e:	4b05      	ldr	r3, [pc, #20]	; (2644 <system_init+0x28>)
    2630:	4798      	blx	r3
}
    2632:	bd10      	pop	{r4, pc}
    2634:	00002115 	.word	0x00002115
    2638:	00001e19 	.word	0x00001e19
    263c:	00002619 	.word	0x00002619
    2640:	00001d75 	.word	0x00001d75
    2644:	00002619 	.word	0x00002619

00002648 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2648:	b510      	push	{r4, lr}
    264a:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    264c:	ab03      	add	r3, sp, #12
    264e:	2200      	movs	r2, #0
    2650:	701a      	strb	r2, [r3, #0]
    2652:	3201      	adds	r2, #1
    2654:	705a      	strb	r2, [r3, #1]
    2656:	709a      	strb	r2, [r3, #2]
    2658:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    265a:	4b27      	ldr	r3, [pc, #156]	; (26f8 <udd_sleep_mode+0xb0>)
    265c:	781b      	ldrb	r3, [r3, #0]
    265e:	4283      	cmp	r3, r0
    2660:	d007      	beq.n	2672 <udd_sleep_mode+0x2a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2662:	2800      	cmp	r0, #0
    2664:	d107      	bne.n	2676 <udd_sleep_mode+0x2e>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2666:	4b24      	ldr	r3, [pc, #144]	; (26f8 <udd_sleep_mode+0xb0>)
    2668:	781b      	ldrb	r3, [r3, #0]
    266a:	2b00      	cmp	r3, #0
    266c:	d123      	bne.n	26b6 <udd_sleep_mode+0x6e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    266e:	4b22      	ldr	r3, [pc, #136]	; (26f8 <udd_sleep_mode+0xb0>)
    2670:	7018      	strb	r0, [r3, #0]
}
    2672:	b004      	add	sp, #16
    2674:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2676:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2678:	5c1b      	ldrb	r3, [r3, r0]
    267a:	4a20      	ldr	r2, [pc, #128]	; (26fc <udd_sleep_mode+0xb4>)
    267c:	5cd2      	ldrb	r2, [r2, r3]
    267e:	2aff      	cmp	r2, #255	; 0xff
    2680:	d100      	bne.n	2684 <udd_sleep_mode+0x3c>
    2682:	e7fe      	b.n	2682 <udd_sleep_mode+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2684:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2688:	4251      	negs	r1, r2
    268a:	414a      	adcs	r2, r1
    268c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    268e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2690:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2694:	2100      	movs	r1, #0
    2696:	4a1a      	ldr	r2, [pc, #104]	; (2700 <udd_sleep_mode+0xb8>)
    2698:	7011      	strb	r1, [r2, #0]
	return flags;
    269a:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    269c:	4917      	ldr	r1, [pc, #92]	; (26fc <udd_sleep_mode+0xb4>)
    269e:	5cca      	ldrb	r2, [r1, r3]
    26a0:	3201      	adds	r2, #1
    26a2:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    26a4:	2c00      	cmp	r4, #0
    26a6:	d0de      	beq.n	2666 <udd_sleep_mode+0x1e>
		cpu_irq_enable();
    26a8:	2201      	movs	r2, #1
    26aa:	4b15      	ldr	r3, [pc, #84]	; (2700 <udd_sleep_mode+0xb8>)
    26ac:	701a      	strb	r2, [r3, #0]
    26ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    26b2:	b662      	cpsie	i
    26b4:	e7d7      	b.n	2666 <udd_sleep_mode+0x1e>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    26b6:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    26b8:	5cd3      	ldrb	r3, [r2, r3]
    26ba:	4a10      	ldr	r2, [pc, #64]	; (26fc <udd_sleep_mode+0xb4>)
    26bc:	5cd2      	ldrb	r2, [r2, r3]
    26be:	2a00      	cmp	r2, #0
    26c0:	d100      	bne.n	26c4 <udd_sleep_mode+0x7c>
    26c2:	e7fe      	b.n	26c2 <udd_sleep_mode+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    26c4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    26c8:	4251      	negs	r1, r2
    26ca:	414a      	adcs	r2, r1
    26cc:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    26ce:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    26d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    26d4:	2100      	movs	r1, #0
    26d6:	4a0a      	ldr	r2, [pc, #40]	; (2700 <udd_sleep_mode+0xb8>)
    26d8:	7011      	strb	r1, [r2, #0]
	return flags;
    26da:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    26dc:	4907      	ldr	r1, [pc, #28]	; (26fc <udd_sleep_mode+0xb4>)
    26de:	5cca      	ldrb	r2, [r1, r3]
    26e0:	3a01      	subs	r2, #1
    26e2:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    26e4:	2c00      	cmp	r4, #0
    26e6:	d0c2      	beq.n	266e <udd_sleep_mode+0x26>
		cpu_irq_enable();
    26e8:	2201      	movs	r2, #1
    26ea:	4b05      	ldr	r3, [pc, #20]	; (2700 <udd_sleep_mode+0xb8>)
    26ec:	701a      	strb	r2, [r3, #0]
    26ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    26f2:	b662      	cpsie	i
    26f4:	e7bb      	b.n	266e <udd_sleep_mode+0x26>
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	20000184 	.word	0x20000184
    26fc:	20000378 	.word	0x20000378
    2700:	200000d8 	.word	0x200000d8

00002704 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2704:	0643      	lsls	r3, r0, #25
    2706:	d00b      	beq.n	2720 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2708:	230f      	movs	r3, #15
    270a:	4003      	ands	r3, r0
    270c:	005b      	lsls	r3, r3, #1
    270e:	09c0      	lsrs	r0, r0, #7
    2710:	1818      	adds	r0, r3, r0
    2712:	3802      	subs	r0, #2
    2714:	0083      	lsls	r3, r0, #2
    2716:	1818      	adds	r0, r3, r0
    2718:	0080      	lsls	r0, r0, #2
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <udd_ep_get_job+0x20>)
    271c:	1818      	adds	r0, r3, r0
	}
}
    271e:	4770      	bx	lr
		return NULL;
    2720:	2000      	movs	r0, #0
    2722:	e7fc      	b.n	271e <udd_ep_get_job+0x1a>
    2724:	2000015c 	.word	0x2000015c

00002728 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2728:	b5f0      	push	{r4, r5, r6, r7, lr}
    272a:	46d6      	mov	lr, sl
    272c:	464f      	mov	r7, r9
    272e:	4646      	mov	r6, r8
    2730:	b5c0      	push	{r6, r7, lr}
    2732:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2734:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2736:	b26b      	sxtb	r3, r5
    2738:	2b00      	cmp	r3, #0
    273a:	db26      	blt.n	278a <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    273c:	0028      	movs	r0, r5
    273e:	4b5e      	ldr	r3, [pc, #376]	; (28b8 <udd_ep_transfer_process+0x190>)
    2740:	4798      	blx	r3
    2742:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2744:	270f      	movs	r7, #15
    2746:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2748:	8a03      	ldrh	r3, [r0, #16]
    274a:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    274c:	464b      	mov	r3, r9
    274e:	881b      	ldrh	r3, [r3, #0]
    2750:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2752:	7c83      	ldrb	r3, [r0, #18]
    2754:	075b      	lsls	r3, r3, #29
    2756:	d46a      	bmi.n	282e <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2758:	68e3      	ldr	r3, [r4, #12]
    275a:	4453      	add	r3, sl
    275c:	001e      	movs	r6, r3
    275e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2760:	68a3      	ldr	r3, [r4, #8]
    2762:	429e      	cmp	r6, r3
    2764:	d800      	bhi.n	2768 <udd_ep_transfer_process+0x40>
    2766:	e074      	b.n	2852 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2768:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    276a:	7ca3      	ldrb	r3, [r4, #18]
    276c:	2201      	movs	r2, #1
    276e:	4393      	bics	r3, r2
    2770:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2772:	6823      	ldr	r3, [r4, #0]
    2774:	2b00      	cmp	r3, #0
    2776:	d003      	beq.n	2780 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2778:	68e1      	ldr	r1, [r4, #12]
    277a:	002a      	movs	r2, r5
    277c:	2000      	movs	r0, #0
    277e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2780:	bc1c      	pop	{r2, r3, r4}
    2782:	4690      	mov	r8, r2
    2784:	4699      	mov	r9, r3
    2786:	46a2      	mov	sl, r4
    2788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    278a:	0028      	movs	r0, r5
    278c:	4b4a      	ldr	r3, [pc, #296]	; (28b8 <udd_ep_transfer_process+0x190>)
    278e:	4798      	blx	r3
    2790:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2792:	270f      	movs	r7, #15
    2794:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2796:	8a03      	ldrh	r3, [r0, #16]
    2798:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    279a:	464b      	mov	r3, r9
    279c:	885e      	ldrh	r6, [r3, #2]
    279e:	68c3      	ldr	r3, [r0, #12]
    27a0:	469c      	mov	ip, r3
    27a2:	4466      	add	r6, ip
    27a4:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    27a6:	6881      	ldr	r1, [r0, #8]
    27a8:	428e      	cmp	r6, r1
    27aa:	d025      	beq.n	27f8 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    27ac:	1b8d      	subs	r5, r1, r6
    27ae:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    27b0:	4b42      	ldr	r3, [pc, #264]	; (28bc <udd_ep_transfer_process+0x194>)
    27b2:	429d      	cmp	r5, r3
    27b4:	d906      	bls.n	27c4 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    27b6:	001d      	movs	r5, r3
    27b8:	4641      	mov	r1, r8
    27ba:	0018      	movs	r0, r3
    27bc:	4b40      	ldr	r3, [pc, #256]	; (28c0 <udd_ep_transfer_process+0x198>)
    27be:	4798      	blx	r3
    27c0:	1a6d      	subs	r5, r5, r1
    27c2:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    27c4:	7ca2      	ldrb	r2, [r4, #18]
    27c6:	2300      	movs	r3, #0
    27c8:	0792      	lsls	r2, r2, #30
    27ca:	d507      	bpl.n	27dc <udd_ep_transfer_process+0xb4>
    27cc:	4641      	mov	r1, r8
    27ce:	0028      	movs	r0, r5
    27d0:	4b3c      	ldr	r3, [pc, #240]	; (28c4 <udd_ep_transfer_process+0x19c>)
    27d2:	4798      	blx	r3
    27d4:	b289      	uxth	r1, r1
    27d6:	424b      	negs	r3, r1
    27d8:	414b      	adcs	r3, r1
    27da:	b2db      	uxtb	r3, r3
    27dc:	005b      	lsls	r3, r3, #1
    27de:	7ca2      	ldrb	r2, [r4, #18]
    27e0:	2102      	movs	r1, #2
    27e2:	438a      	bics	r2, r1
    27e4:	4313      	orrs	r3, r2
    27e6:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    27e8:	6862      	ldr	r2, [r4, #4]
    27ea:	1992      	adds	r2, r2, r6
    27ec:	002b      	movs	r3, r5
    27ee:	0039      	movs	r1, r7
    27f0:	4835      	ldr	r0, [pc, #212]	; (28c8 <udd_ep_transfer_process+0x1a0>)
    27f2:	4c36      	ldr	r4, [pc, #216]	; (28cc <udd_ep_transfer_process+0x1a4>)
    27f4:	47a0      	blx	r4
    27f6:	e7c3      	b.n	2780 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    27f8:	7c83      	ldrb	r3, [r0, #18]
    27fa:	079b      	lsls	r3, r3, #30
    27fc:	d40b      	bmi.n	2816 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    27fe:	7c83      	ldrb	r3, [r0, #18]
    2800:	2201      	movs	r2, #1
    2802:	4393      	bics	r3, r2
    2804:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2806:	6803      	ldr	r3, [r0, #0]
    2808:	2b00      	cmp	r3, #0
    280a:	d0b9      	beq.n	2780 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    280c:	002a      	movs	r2, r5
    280e:	0031      	movs	r1, r6
    2810:	2000      	movs	r0, #0
    2812:	4798      	blx	r3
    2814:	e7b4      	b.n	2780 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2816:	7c83      	ldrb	r3, [r0, #18]
    2818:	2202      	movs	r2, #2
    281a:	4393      	bics	r3, r2
    281c:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    281e:	6842      	ldr	r2, [r0, #4]
    2820:	1992      	adds	r2, r2, r6
    2822:	2300      	movs	r3, #0
    2824:	0039      	movs	r1, r7
    2826:	4828      	ldr	r0, [pc, #160]	; (28c8 <udd_ep_transfer_process+0x1a0>)
    2828:	4c28      	ldr	r4, [pc, #160]	; (28cc <udd_ep_transfer_process+0x1a4>)
    282a:	47a0      	blx	r4
    282c:	e7a8      	b.n	2780 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    282e:	6843      	ldr	r3, [r0, #4]
    2830:	68c2      	ldr	r2, [r0, #12]
    2832:	4694      	mov	ip, r2
    2834:	4463      	add	r3, ip
    2836:	001e      	movs	r6, r3
    2838:	4641      	mov	r1, r8
    283a:	6880      	ldr	r0, [r0, #8]
    283c:	4b21      	ldr	r3, [pc, #132]	; (28c4 <udd_ep_transfer_process+0x19c>)
    283e:	4798      	blx	r3
    2840:	000a      	movs	r2, r1
    2842:	1e7b      	subs	r3, r7, #1
    2844:	019b      	lsls	r3, r3, #6
    2846:	4922      	ldr	r1, [pc, #136]	; (28d0 <udd_ep_transfer_process+0x1a8>)
    2848:	1859      	adds	r1, r3, r1
    284a:	0030      	movs	r0, r6
    284c:	4b21      	ldr	r3, [pc, #132]	; (28d4 <udd_ep_transfer_process+0x1ac>)
    284e:	4798      	blx	r3
    2850:	e782      	b.n	2758 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2852:	464a      	mov	r2, r9
    2854:	8892      	ldrh	r2, [r2, #4]
    2856:	4552      	cmp	r2, sl
    2858:	d000      	beq.n	285c <udd_ep_transfer_process+0x134>
    285a:	e786      	b.n	276a <udd_ep_transfer_process+0x42>
    285c:	429e      	cmp	r6, r3
    285e:	d100      	bne.n	2862 <udd_ep_transfer_process+0x13a>
    2860:	e783      	b.n	276a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2862:	1b9b      	subs	r3, r3, r6
    2864:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2866:	4b15      	ldr	r3, [pc, #84]	; (28bc <udd_ep_transfer_process+0x194>)
    2868:	429d      	cmp	r5, r3
    286a:	d916      	bls.n	289a <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    286c:	001d      	movs	r5, r3
    286e:	4641      	mov	r1, r8
    2870:	0018      	movs	r0, r3
    2872:	4b13      	ldr	r3, [pc, #76]	; (28c0 <udd_ep_transfer_process+0x198>)
    2874:	4798      	blx	r3
    2876:	1a6b      	subs	r3, r5, r1
    2878:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    287a:	4598      	cmp	r8, r3
    287c:	d914      	bls.n	28a8 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    287e:	7ca3      	ldrb	r3, [r4, #18]
    2880:	2204      	movs	r2, #4
    2882:	4313      	orrs	r3, r2
    2884:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2886:	1e7a      	subs	r2, r7, #1
    2888:	0192      	lsls	r2, r2, #6
    288a:	4b11      	ldr	r3, [pc, #68]	; (28d0 <udd_ep_transfer_process+0x1a8>)
    288c:	18d2      	adds	r2, r2, r3
    288e:	4643      	mov	r3, r8
    2890:	0039      	movs	r1, r7
    2892:	480d      	ldr	r0, [pc, #52]	; (28c8 <udd_ep_transfer_process+0x1a0>)
    2894:	4c10      	ldr	r4, [pc, #64]	; (28d8 <udd_ep_transfer_process+0x1b0>)
    2896:	47a0      	blx	r4
    2898:	e772      	b.n	2780 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    289a:	4641      	mov	r1, r8
    289c:	0028      	movs	r0, r5
    289e:	4b09      	ldr	r3, [pc, #36]	; (28c4 <udd_ep_transfer_process+0x19c>)
    28a0:	4798      	blx	r3
    28a2:	1a6b      	subs	r3, r5, r1
    28a4:	b29b      	uxth	r3, r3
    28a6:	e7e8      	b.n	287a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    28a8:	6862      	ldr	r2, [r4, #4]
    28aa:	1992      	adds	r2, r2, r6
    28ac:	0039      	movs	r1, r7
    28ae:	4806      	ldr	r0, [pc, #24]	; (28c8 <udd_ep_transfer_process+0x1a0>)
    28b0:	4c09      	ldr	r4, [pc, #36]	; (28d8 <udd_ep_transfer_process+0x1b0>)
    28b2:	47a0      	blx	r4
    28b4:	e764      	b.n	2780 <udd_ep_transfer_process+0x58>
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	00002705 	.word	0x00002705
    28bc:	00001fff 	.word	0x00001fff
    28c0:	00004641 	.word	0x00004641
    28c4:	0000446d 	.word	0x0000446d
    28c8:	20000400 	.word	0x20000400
    28cc:	000038a9 	.word	0x000038a9
    28d0:	200003c0 	.word	0x200003c0
    28d4:	000046d5 	.word	0x000046d5
    28d8:	000038fd 	.word	0x000038fd

000028dc <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    28dc:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    28de:	2205      	movs	r2, #5
    28e0:	4b05      	ldr	r3, [pc, #20]	; (28f8 <udd_ctrl_stall_data+0x1c>)
    28e2:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    28e4:	4c05      	ldr	r4, [pc, #20]	; (28fc <udd_ctrl_stall_data+0x20>)
    28e6:	2180      	movs	r1, #128	; 0x80
    28e8:	0020      	movs	r0, r4
    28ea:	4b05      	ldr	r3, [pc, #20]	; (2900 <udd_ctrl_stall_data+0x24>)
    28ec:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    28ee:	2100      	movs	r1, #0
    28f0:	0020      	movs	r0, r4
    28f2:	4b04      	ldr	r3, [pc, #16]	; (2904 <udd_ctrl_stall_data+0x28>)
    28f4:	4798      	blx	r3
}
    28f6:	bd10      	pop	{r4, pc}
    28f8:	2000015a 	.word	0x2000015a
    28fc:	20000400 	.word	0x20000400
    2900:	000037fd 	.word	0x000037fd
    2904:	00003823 	.word	0x00003823

00002908 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    2908:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    290a:	4c08      	ldr	r4, [pc, #32]	; (292c <_usb_device_lpm_suspend+0x24>)
    290c:	2106      	movs	r1, #6
    290e:	0020      	movs	r0, r4
    2910:	4d07      	ldr	r5, [pc, #28]	; (2930 <_usb_device_lpm_suspend+0x28>)
    2912:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2914:	2104      	movs	r1, #4
    2916:	0020      	movs	r0, r4
    2918:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    291a:	2102      	movs	r1, #2
    291c:	0020      	movs	r0, r4
    291e:	4b05      	ldr	r3, [pc, #20]	; (2934 <_usb_device_lpm_suspend+0x2c>)
    2920:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2922:	2002      	movs	r0, #2
    2924:	4b04      	ldr	r3, [pc, #16]	; (2938 <_usb_device_lpm_suspend+0x30>)
    2926:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    2928:	bd70      	pop	{r4, r5, r6, pc}
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	20000400 	.word	0x20000400
    2930:	0000333d 	.word	0x0000333d
    2934:	0000331d 	.word	0x0000331d
    2938:	00002649 	.word	0x00002649

0000293c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    293c:	b570      	push	{r4, r5, r6, lr}
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    293e:	4b13      	ldr	r3, [pc, #76]	; (298c <_usb_on_wakeup+0x50>)
    2940:	8b1b      	ldrh	r3, [r3, #24]
    2942:	069b      	lsls	r3, r3, #26
    2944:	d41b      	bmi.n	297e <_usb_on_wakeup+0x42>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2946:	4911      	ldr	r1, [pc, #68]	; (298c <_usb_on_wakeup+0x50>)
    2948:	22d0      	movs	r2, #208	; 0xd0
    294a:	0112      	lsls	r2, r2, #4
    294c:	68cb      	ldr	r3, [r1, #12]
    294e:	4013      	ands	r3, r2
    2950:	4293      	cmp	r3, r2
    2952:	d1fb      	bne.n	294c <_usb_on_wakeup+0x10>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2954:	4c0e      	ldr	r4, [pc, #56]	; (2990 <_usb_on_wakeup+0x54>)
    2956:	2102      	movs	r1, #2
    2958:	0020      	movs	r0, r4
    295a:	4b0e      	ldr	r3, [pc, #56]	; (2994 <_usb_on_wakeup+0x58>)
    295c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    295e:	2104      	movs	r1, #4
    2960:	0020      	movs	r0, r4
    2962:	4d0d      	ldr	r5, [pc, #52]	; (2998 <_usb_on_wakeup+0x5c>)
    2964:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2966:	4a0d      	ldr	r2, [pc, #52]	; (299c <_usb_on_wakeup+0x60>)
    2968:	2106      	movs	r1, #6
    296a:	0020      	movs	r0, r4
    296c:	4b0c      	ldr	r3, [pc, #48]	; (29a0 <_usb_on_wakeup+0x64>)
    296e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2970:	2106      	movs	r1, #6
    2972:	0020      	movs	r0, r4
    2974:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2976:	2003      	movs	r0, #3
    2978:	4b0a      	ldr	r3, [pc, #40]	; (29a4 <_usb_on_wakeup+0x68>)
    297a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    297c:	bd70      	pop	{r4, r5, r6, pc}
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    297e:	4903      	ldr	r1, [pc, #12]	; (298c <_usb_on_wakeup+0x50>)
    2980:	2280      	movs	r2, #128	; 0x80
    2982:	0052      	lsls	r2, r2, #1
    2984:	68cb      	ldr	r3, [r1, #12]
    2986:	4213      	tst	r3, r2
    2988:	d0fc      	beq.n	2984 <_usb_on_wakeup+0x48>
    298a:	e7e3      	b.n	2954 <_usb_on_wakeup+0x18>
    298c:	40000c00 	.word	0x40000c00
    2990:	20000400 	.word	0x20000400
    2994:	0000333d 	.word	0x0000333d
    2998:	0000331d 	.word	0x0000331d
    299c:	00002909 	.word	0x00002909
    29a0:	000032f9 	.word	0x000032f9
    29a4:	00002649 	.word	0x00002649

000029a8 <_usb_on_suspend>:
{
    29a8:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    29aa:	4c06      	ldr	r4, [pc, #24]	; (29c4 <_usb_on_suspend+0x1c>)
    29ac:	2104      	movs	r1, #4
    29ae:	0020      	movs	r0, r4
    29b0:	4b05      	ldr	r3, [pc, #20]	; (29c8 <_usb_on_suspend+0x20>)
    29b2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    29b4:	2102      	movs	r1, #2
    29b6:	0020      	movs	r0, r4
    29b8:	4b04      	ldr	r3, [pc, #16]	; (29cc <_usb_on_suspend+0x24>)
    29ba:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    29bc:	2001      	movs	r0, #1
    29be:	4b04      	ldr	r3, [pc, #16]	; (29d0 <_usb_on_suspend+0x28>)
    29c0:	4798      	blx	r3
}
    29c2:	bd10      	pop	{r4, pc}
    29c4:	20000400 	.word	0x20000400
    29c8:	0000333d 	.word	0x0000333d
    29cc:	0000331d 	.word	0x0000331d
    29d0:	00002649 	.word	0x00002649

000029d4 <_usb_on_bus_reset>:
{
    29d4:	b570      	push	{r4, r5, r6, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	0004      	movs	r4, r0
	udc_reset();
    29da:	4b1e      	ldr	r3, [pc, #120]	; (2a54 <_usb_on_bus_reset+0x80>)
    29dc:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    29de:	2380      	movs	r3, #128	; 0x80
    29e0:	6822      	ldr	r2, [r4, #0]
    29e2:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    29e4:	ad01      	add	r5, sp, #4
    29e6:	0028      	movs	r0, r5
    29e8:	4b1b      	ldr	r3, [pc, #108]	; (2a58 <_usb_on_bus_reset+0x84>)
    29ea:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    29ec:	2600      	movs	r6, #0
    29ee:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    29f0:	0029      	movs	r1, r5
    29f2:	0020      	movs	r0, r4
    29f4:	4b19      	ldr	r3, [pc, #100]	; (2a5c <_usb_on_bus_reset+0x88>)
    29f6:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    29f8:	4919      	ldr	r1, [pc, #100]	; (2a60 <_usb_on_bus_reset+0x8c>)
    29fa:	0020      	movs	r0, r4
    29fc:	4b19      	ldr	r3, [pc, #100]	; (2a64 <_usb_on_bus_reset+0x90>)
    29fe:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2a00:	4b19      	ldr	r3, [pc, #100]	; (2a68 <_usb_on_bus_reset+0x94>)
    2a02:	2202      	movs	r2, #2
    2a04:	2100      	movs	r1, #0
    2a06:	0020      	movs	r0, r4
    2a08:	4d18      	ldr	r5, [pc, #96]	; (2a6c <_usb_on_bus_reset+0x98>)
    2a0a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2a0c:	4b18      	ldr	r3, [pc, #96]	; (2a70 <_usb_on_bus_reset+0x9c>)
    2a0e:	2200      	movs	r2, #0
    2a10:	2100      	movs	r1, #0
    2a12:	0020      	movs	r0, r4
    2a14:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2a16:	4b17      	ldr	r3, [pc, #92]	; (2a74 <_usb_on_bus_reset+0xa0>)
    2a18:	2201      	movs	r2, #1
    2a1a:	2100      	movs	r1, #0
    2a1c:	0020      	movs	r0, r4
    2a1e:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    2a20:	2202      	movs	r2, #2
    2a22:	2100      	movs	r1, #0
    2a24:	0020      	movs	r0, r4
    2a26:	4d14      	ldr	r5, [pc, #80]	; (2a78 <_usb_on_bus_reset+0xa4>)
    2a28:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2a2a:	2200      	movs	r2, #0
    2a2c:	2100      	movs	r1, #0
    2a2e:	0020      	movs	r0, r4
    2a30:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2a32:	2201      	movs	r2, #1
    2a34:	2100      	movs	r1, #0
    2a36:	0020      	movs	r0, r4
    2a38:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    2a3a:	6821      	ldr	r1, [r4, #0]
    2a3c:	890b      	ldrh	r3, [r1, #8]
    2a3e:	4a0f      	ldr	r2, [pc, #60]	; (2a7c <_usb_on_bus_reset+0xa8>)
    2a40:	401a      	ands	r2, r3
    2a42:	2380      	movs	r3, #128	; 0x80
    2a44:	00db      	lsls	r3, r3, #3
    2a46:	4313      	orrs	r3, r2
    2a48:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    2a4a:	4b0d      	ldr	r3, [pc, #52]	; (2a80 <_usb_on_bus_reset+0xac>)
    2a4c:	701e      	strb	r6, [r3, #0]
}
    2a4e:	b002      	add	sp, #8
    2a50:	bd70      	pop	{r4, r5, r6, pc}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	0000182d 	.word	0x0000182d
    2a58:	00003549 	.word	0x00003549
    2a5c:	00003559 	.word	0x00003559
    2a60:	20000580 	.word	0x20000580
    2a64:	0000394d 	.word	0x0000394d
    2a68:	00002bbd 	.word	0x00002bbd
    2a6c:	00003359 	.word	0x00003359
    2a70:	00002e8d 	.word	0x00002e8d
    2a74:	00002ac1 	.word	0x00002ac1
    2a78:	000033a9 	.word	0x000033a9
    2a7c:	fffff3ff 	.word	0xfffff3ff
    2a80:	2000015a 	.word	0x2000015a

00002a84 <udd_ctrl_send_zlp_in>:
{
    2a84:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2a86:	2203      	movs	r2, #3
    2a88:	4b07      	ldr	r3, [pc, #28]	; (2aa8 <udd_ctrl_send_zlp_in+0x24>)
    2a8a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2a8c:	4c07      	ldr	r4, [pc, #28]	; (2aac <udd_ctrl_send_zlp_in+0x28>)
    2a8e:	4908      	ldr	r1, [pc, #32]	; (2ab0 <udd_ctrl_send_zlp_in+0x2c>)
    2a90:	0020      	movs	r0, r4
    2a92:	4b08      	ldr	r3, [pc, #32]	; (2ab4 <udd_ctrl_send_zlp_in+0x30>)
    2a94:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2a96:	4b08      	ldr	r3, [pc, #32]	; (2ab8 <udd_ctrl_send_zlp_in+0x34>)
    2a98:	689a      	ldr	r2, [r3, #8]
    2a9a:	2300      	movs	r3, #0
    2a9c:	2100      	movs	r1, #0
    2a9e:	0020      	movs	r0, r4
    2aa0:	4c06      	ldr	r4, [pc, #24]	; (2abc <udd_ctrl_send_zlp_in+0x38>)
    2aa2:	47a0      	blx	r4
}
    2aa4:	bd10      	pop	{r4, pc}
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	2000015a 	.word	0x2000015a
    2aac:	20000400 	.word	0x20000400
    2ab0:	20000580 	.word	0x20000580
    2ab4:	0000394d 	.word	0x0000394d
    2ab8:	20000568 	.word	0x20000568
    2abc:	000038a9 	.word	0x000038a9

00002ac0 <_usb_ep0_on_tansfer_fail>:
{
    2ac0:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2ac2:	7989      	ldrb	r1, [r1, #6]
    2ac4:	b24b      	sxtb	r3, r1
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	db06      	blt.n	2ad8 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2aca:	4b0e      	ldr	r3, [pc, #56]	; (2b04 <_usb_ep0_on_tansfer_fail+0x44>)
    2acc:	781b      	ldrb	r3, [r3, #0]
    2ace:	2b02      	cmp	r3, #2
    2ad0:	d00f      	beq.n	2af2 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2ad2:	2b03      	cmp	r3, #3
    2ad4:	d011      	beq.n	2afa <_usb_ep0_on_tansfer_fail+0x3a>
}
    2ad6:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2ad8:	4b0a      	ldr	r3, [pc, #40]	; (2b04 <_usb_ep0_on_tansfer_fail+0x44>)
    2ada:	781b      	ldrb	r3, [r3, #0]
    2adc:	2b01      	cmp	r3, #1
    2ade:	d005      	beq.n	2aec <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ae0:	2b04      	cmp	r3, #4
    2ae2:	d1f8      	bne.n	2ad6 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2ae4:	4808      	ldr	r0, [pc, #32]	; (2b08 <_usb_ep0_on_tansfer_fail+0x48>)
    2ae6:	4b09      	ldr	r3, [pc, #36]	; (2b0c <_usb_ep0_on_tansfer_fail+0x4c>)
    2ae8:	4798      	blx	r3
    2aea:	e7f4      	b.n	2ad6 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    2aec:	4b08      	ldr	r3, [pc, #32]	; (2b10 <_usb_ep0_on_tansfer_fail+0x50>)
    2aee:	4798      	blx	r3
    2af0:	e7f1      	b.n	2ad6 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2af2:	2204      	movs	r2, #4
    2af4:	4b03      	ldr	r3, [pc, #12]	; (2b04 <_usb_ep0_on_tansfer_fail+0x44>)
    2af6:	701a      	strb	r2, [r3, #0]
    2af8:	e7ed      	b.n	2ad6 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2afa:	4803      	ldr	r0, [pc, #12]	; (2b08 <_usb_ep0_on_tansfer_fail+0x48>)
    2afc:	4b03      	ldr	r3, [pc, #12]	; (2b0c <_usb_ep0_on_tansfer_fail+0x4c>)
    2afe:	4798      	blx	r3
}
    2b00:	e7e9      	b.n	2ad6 <_usb_ep0_on_tansfer_fail+0x16>
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	2000015a 	.word	0x2000015a
    2b08:	20000400 	.word	0x20000400
    2b0c:	000037fd 	.word	0x000037fd
    2b10:	00002a85 	.word	0x00002a85

00002b14 <udd_ctrl_in_sent>:
{
    2b14:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2b16:	4b20      	ldr	r3, [pc, #128]	; (2b98 <udd_ctrl_in_sent+0x84>)
    2b18:	881b      	ldrh	r3, [r3, #0]
    2b1a:	4a20      	ldr	r2, [pc, #128]	; (2b9c <udd_ctrl_in_sent+0x88>)
    2b1c:	8994      	ldrh	r4, [r2, #12]
    2b1e:	1ae4      	subs	r4, r4, r3
    2b20:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2b22:	2c00      	cmp	r4, #0
    2b24:	d118      	bne.n	2b58 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2b26:	4a1e      	ldr	r2, [pc, #120]	; (2ba0 <udd_ctrl_in_sent+0x8c>)
    2b28:	8811      	ldrh	r1, [r2, #0]
    2b2a:	185b      	adds	r3, r3, r1
    2b2c:	b29b      	uxth	r3, r3
    2b2e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2b30:	4a1a      	ldr	r2, [pc, #104]	; (2b9c <udd_ctrl_in_sent+0x88>)
    2b32:	88d2      	ldrh	r2, [r2, #6]
    2b34:	429a      	cmp	r2, r3
    2b36:	d023      	beq.n	2b80 <udd_ctrl_in_sent+0x6c>
    2b38:	4b1a      	ldr	r3, [pc, #104]	; (2ba4 <udd_ctrl_in_sent+0x90>)
    2b3a:	781b      	ldrb	r3, [r3, #0]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d11f      	bne.n	2b80 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2b40:	4b16      	ldr	r3, [pc, #88]	; (2b9c <udd_ctrl_in_sent+0x88>)
    2b42:	695b      	ldr	r3, [r3, #20]
    2b44:	2b00      	cmp	r3, #0
    2b46:	d023      	beq.n	2b90 <udd_ctrl_in_sent+0x7c>
    2b48:	4798      	blx	r3
    2b4a:	2800      	cmp	r0, #0
    2b4c:	d020      	beq.n	2b90 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2b4e:	2200      	movs	r2, #0
    2b50:	4b11      	ldr	r3, [pc, #68]	; (2b98 <udd_ctrl_in_sent+0x84>)
    2b52:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2b54:	4b11      	ldr	r3, [pc, #68]	; (2b9c <udd_ctrl_in_sent+0x88>)
    2b56:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2b58:	2c07      	cmp	r4, #7
    2b5a:	d919      	bls.n	2b90 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2b5c:	2200      	movs	r2, #0
    2b5e:	4b11      	ldr	r3, [pc, #68]	; (2ba4 <udd_ctrl_in_sent+0x90>)
    2b60:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2b62:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2b64:	4d0c      	ldr	r5, [pc, #48]	; (2b98 <udd_ctrl_in_sent+0x84>)
    2b66:	882b      	ldrh	r3, [r5, #0]
    2b68:	4a0c      	ldr	r2, [pc, #48]	; (2b9c <udd_ctrl_in_sent+0x88>)
    2b6a:	6892      	ldr	r2, [r2, #8]
    2b6c:	18d2      	adds	r2, r2, r3
    2b6e:	0023      	movs	r3, r4
    2b70:	2100      	movs	r1, #0
    2b72:	480d      	ldr	r0, [pc, #52]	; (2ba8 <udd_ctrl_in_sent+0x94>)
    2b74:	4e0d      	ldr	r6, [pc, #52]	; (2bac <udd_ctrl_in_sent+0x98>)
    2b76:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2b78:	882b      	ldrh	r3, [r5, #0]
    2b7a:	18e4      	adds	r4, r4, r3
    2b7c:	802c      	strh	r4, [r5, #0]
}
    2b7e:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2b80:	2204      	movs	r2, #4
    2b82:	4b0b      	ldr	r3, [pc, #44]	; (2bb0 <udd_ctrl_in_sent+0x9c>)
    2b84:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2b86:	490b      	ldr	r1, [pc, #44]	; (2bb4 <udd_ctrl_in_sent+0xa0>)
    2b88:	4807      	ldr	r0, [pc, #28]	; (2ba8 <udd_ctrl_in_sent+0x94>)
    2b8a:	4b0b      	ldr	r3, [pc, #44]	; (2bb8 <udd_ctrl_in_sent+0xa4>)
    2b8c:	4798      	blx	r3
			return;
    2b8e:	e7f6      	b.n	2b7e <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2b90:	2201      	movs	r2, #1
    2b92:	4b04      	ldr	r3, [pc, #16]	; (2ba4 <udd_ctrl_in_sent+0x90>)
    2b94:	701a      	strb	r2, [r3, #0]
    2b96:	e7e5      	b.n	2b64 <udd_ctrl_in_sent+0x50>
    2b98:	20000156 	.word	0x20000156
    2b9c:	20000568 	.word	0x20000568
    2ba0:	20000158 	.word	0x20000158
    2ba4:	20000154 	.word	0x20000154
    2ba8:	20000400 	.word	0x20000400
    2bac:	000038a9 	.word	0x000038a9
    2bb0:	2000015a 	.word	0x2000015a
    2bb4:	20000580 	.word	0x20000580
    2bb8:	0000394d 	.word	0x0000394d

00002bbc <_usb_ep0_on_setup>:
{
    2bbc:	b510      	push	{r4, lr}
    2bbe:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2bc0:	4b2c      	ldr	r3, [pc, #176]	; (2c74 <_usb_ep0_on_setup+0xb8>)
    2bc2:	781b      	ldrb	r3, [r3, #0]
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d007      	beq.n	2bd8 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2bc8:	4b2b      	ldr	r3, [pc, #172]	; (2c78 <_usb_ep0_on_setup+0xbc>)
    2bca:	691b      	ldr	r3, [r3, #16]
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d000      	beq.n	2bd2 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2bd0:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2bd2:	2200      	movs	r2, #0
    2bd4:	4b27      	ldr	r3, [pc, #156]	; (2c74 <_usb_ep0_on_setup+0xb8>)
    2bd6:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2bd8:	8823      	ldrh	r3, [r4, #0]
    2bda:	2b08      	cmp	r3, #8
    2bdc:	d002      	beq.n	2be4 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2bde:	4b27      	ldr	r3, [pc, #156]	; (2c7c <_usb_ep0_on_setup+0xc0>)
    2be0:	4798      	blx	r3
}
    2be2:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2be4:	4a24      	ldr	r2, [pc, #144]	; (2c78 <_usb_ep0_on_setup+0xbc>)
    2be6:	4b26      	ldr	r3, [pc, #152]	; (2c80 <_usb_ep0_on_setup+0xc4>)
    2be8:	7819      	ldrb	r1, [r3, #0]
    2bea:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2bec:	7859      	ldrb	r1, [r3, #1]
    2bee:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2bf0:	78d8      	ldrb	r0, [r3, #3]
    2bf2:	0200      	lsls	r0, r0, #8
    2bf4:	7899      	ldrb	r1, [r3, #2]
    2bf6:	1809      	adds	r1, r1, r0
    2bf8:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2bfa:	7958      	ldrb	r0, [r3, #5]
    2bfc:	0200      	lsls	r0, r0, #8
    2bfe:	7919      	ldrb	r1, [r3, #4]
    2c00:	1809      	adds	r1, r1, r0
    2c02:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2c04:	79d9      	ldrb	r1, [r3, #7]
    2c06:	0209      	lsls	r1, r1, #8
    2c08:	799b      	ldrb	r3, [r3, #6]
    2c0a:	185b      	adds	r3, r3, r1
    2c0c:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2c0e:	4b1d      	ldr	r3, [pc, #116]	; (2c84 <_usb_ep0_on_setup+0xc8>)
    2c10:	4798      	blx	r3
    2c12:	2800      	cmp	r0, #0
    2c14:	d016      	beq.n	2c44 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2c16:	4b18      	ldr	r3, [pc, #96]	; (2c78 <_usb_ep0_on_setup+0xbc>)
    2c18:	781b      	ldrb	r3, [r3, #0]
    2c1a:	2b7f      	cmp	r3, #127	; 0x7f
    2c1c:	d815      	bhi.n	2c4a <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2c1e:	4b16      	ldr	r3, [pc, #88]	; (2c78 <_usb_ep0_on_setup+0xbc>)
    2c20:	88db      	ldrh	r3, [r3, #6]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d022      	beq.n	2c6c <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2c26:	2300      	movs	r3, #0
    2c28:	4a17      	ldr	r2, [pc, #92]	; (2c88 <_usb_ep0_on_setup+0xcc>)
    2c2a:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2c2c:	4a17      	ldr	r2, [pc, #92]	; (2c8c <_usb_ep0_on_setup+0xd0>)
    2c2e:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2c30:	2201      	movs	r2, #1
    2c32:	4b10      	ldr	r3, [pc, #64]	; (2c74 <_usb_ep0_on_setup+0xb8>)
    2c34:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2c36:	2308      	movs	r3, #8
    2c38:	4a11      	ldr	r2, [pc, #68]	; (2c80 <_usb_ep0_on_setup+0xc4>)
    2c3a:	2100      	movs	r1, #0
    2c3c:	4814      	ldr	r0, [pc, #80]	; (2c90 <_usb_ep0_on_setup+0xd4>)
    2c3e:	4c15      	ldr	r4, [pc, #84]	; (2c94 <_usb_ep0_on_setup+0xd8>)
    2c40:	47a0      	blx	r4
    2c42:	e7ce      	b.n	2be2 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2c44:	4b0d      	ldr	r3, [pc, #52]	; (2c7c <_usb_ep0_on_setup+0xc0>)
    2c46:	4798      	blx	r3
			return;
    2c48:	e7cb      	b.n	2be2 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2c4a:	2300      	movs	r3, #0
    2c4c:	4a0e      	ldr	r2, [pc, #56]	; (2c88 <_usb_ep0_on_setup+0xcc>)
    2c4e:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2c50:	4a0e      	ldr	r2, [pc, #56]	; (2c8c <_usb_ep0_on_setup+0xd0>)
    2c52:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2c54:	2202      	movs	r2, #2
    2c56:	4b07      	ldr	r3, [pc, #28]	; (2c74 <_usb_ep0_on_setup+0xb8>)
    2c58:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2c5a:	2308      	movs	r3, #8
    2c5c:	4a08      	ldr	r2, [pc, #32]	; (2c80 <_usb_ep0_on_setup+0xc4>)
    2c5e:	2100      	movs	r1, #0
    2c60:	480b      	ldr	r0, [pc, #44]	; (2c90 <_usb_ep0_on_setup+0xd4>)
    2c62:	4c0c      	ldr	r4, [pc, #48]	; (2c94 <_usb_ep0_on_setup+0xd8>)
    2c64:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2c66:	4b0c      	ldr	r3, [pc, #48]	; (2c98 <_usb_ep0_on_setup+0xdc>)
    2c68:	4798      	blx	r3
    2c6a:	e7ba      	b.n	2be2 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2c6c:	4b0b      	ldr	r3, [pc, #44]	; (2c9c <_usb_ep0_on_setup+0xe0>)
    2c6e:	4798      	blx	r3
				return;
    2c70:	e7b7      	b.n	2be2 <_usb_ep0_on_setup+0x26>
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	2000015a 	.word	0x2000015a
    2c78:	20000568 	.word	0x20000568
    2c7c:	000028dd 	.word	0x000028dd
    2c80:	20000580 	.word	0x20000580
    2c84:	000018bd 	.word	0x000018bd
    2c88:	20000158 	.word	0x20000158
    2c8c:	20000156 	.word	0x20000156
    2c90:	20000400 	.word	0x20000400
    2c94:	000038fd 	.word	0x000038fd
    2c98:	00002b15 	.word	0x00002b15
    2c9c:	00002a85 	.word	0x00002a85

00002ca0 <_usb_on_sof_notify>:
{
    2ca0:	b510      	push	{r4, lr}
	udc_sof_notify();
    2ca2:	4b01      	ldr	r3, [pc, #4]	; (2ca8 <_usb_on_sof_notify+0x8>)
    2ca4:	4798      	blx	r3
}
    2ca6:	bd10      	pop	{r4, pc}
    2ca8:	00001879 	.word	0x00001879

00002cac <udd_ep_abort>:
{
    2cac:	b510      	push	{r4, lr}
    2cae:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2cb0:	0001      	movs	r1, r0
    2cb2:	480a      	ldr	r0, [pc, #40]	; (2cdc <udd_ep_abort+0x30>)
    2cb4:	4b0a      	ldr	r3, [pc, #40]	; (2ce0 <udd_ep_abort+0x34>)
    2cb6:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2cb8:	0020      	movs	r0, r4
    2cba:	4b0a      	ldr	r3, [pc, #40]	; (2ce4 <udd_ep_abort+0x38>)
    2cbc:	4798      	blx	r3
	if (!ptr_job->busy) {
    2cbe:	7c83      	ldrb	r3, [r0, #18]
    2cc0:	07db      	lsls	r3, r3, #31
    2cc2:	d50a      	bpl.n	2cda <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2cc4:	7c83      	ldrb	r3, [r0, #18]
    2cc6:	2201      	movs	r2, #1
    2cc8:	4393      	bics	r3, r2
    2cca:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2ccc:	6803      	ldr	r3, [r0, #0]
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d003      	beq.n	2cda <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2cd2:	68c1      	ldr	r1, [r0, #12]
    2cd4:	0022      	movs	r2, r4
    2cd6:	2001      	movs	r0, #1
    2cd8:	4798      	blx	r3
}
    2cda:	bd10      	pop	{r4, pc}
    2cdc:	20000400 	.word	0x20000400
    2ce0:	0000379d 	.word	0x0000379d
    2ce4:	00002705 	.word	0x00002705

00002ce8 <udd_ep_free>:
{
    2ce8:	b570      	push	{r4, r5, r6, lr}
    2cea:	b082      	sub	sp, #8
    2cec:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2cee:	ad01      	add	r5, sp, #4
    2cf0:	0028      	movs	r0, r5
    2cf2:	4b0d      	ldr	r3, [pc, #52]	; (2d28 <udd_ep_free+0x40>)
    2cf4:	4798      	blx	r3
	udd_ep_abort(ep);
    2cf6:	0020      	movs	r0, r4
    2cf8:	4b0c      	ldr	r3, [pc, #48]	; (2d2c <udd_ep_free+0x44>)
    2cfa:	4798      	blx	r3
	config_ep.ep_address = ep;
    2cfc:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2cfe:	2300      	movs	r3, #0
    2d00:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2d02:	4e0b      	ldr	r6, [pc, #44]	; (2d30 <udd_ep_free+0x48>)
    2d04:	0029      	movs	r1, r5
    2d06:	0030      	movs	r0, r6
    2d08:	4b0a      	ldr	r3, [pc, #40]	; (2d34 <udd_ep_free+0x4c>)
    2d0a:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2d0c:	210f      	movs	r1, #15
    2d0e:	4021      	ands	r1, r4
    2d10:	2200      	movs	r2, #0
    2d12:	0030      	movs	r0, r6
    2d14:	4b08      	ldr	r3, [pc, #32]	; (2d38 <udd_ep_free+0x50>)
    2d16:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2d18:	2200      	movs	r2, #0
    2d1a:	0021      	movs	r1, r4
    2d1c:	0030      	movs	r0, r6
    2d1e:	4b07      	ldr	r3, [pc, #28]	; (2d3c <udd_ep_free+0x54>)
    2d20:	4798      	blx	r3
}
    2d22:	b002      	add	sp, #8
    2d24:	bd70      	pop	{r4, r5, r6, pc}
    2d26:	46c0      	nop			; (mov r8, r8)
    2d28:	00003549 	.word	0x00003549
    2d2c:	00002cad 	.word	0x00002cad
    2d30:	20000400 	.word	0x20000400
    2d34:	00003559 	.word	0x00003559
    2d38:	00003381 	.word	0x00003381
    2d3c:	00003479 	.word	0x00003479

00002d40 <udd_ep_alloc>:
{
    2d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d42:	b083      	sub	sp, #12
    2d44:	0005      	movs	r5, r0
    2d46:	000f      	movs	r7, r1
    2d48:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2d4a:	ae01      	add	r6, sp, #4
    2d4c:	0030      	movs	r0, r6
    2d4e:	4b36      	ldr	r3, [pc, #216]	; (2e28 <udd_ep_alloc+0xe8>)
    2d50:	4798      	blx	r3
	config_ep.ep_address = ep;
    2d52:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2d54:	2c08      	cmp	r4, #8
    2d56:	d813      	bhi.n	2d80 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2d58:	2200      	movs	r2, #0
    2d5a:	ab01      	add	r3, sp, #4
    2d5c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2d5e:	0028      	movs	r0, r5
    2d60:	4b32      	ldr	r3, [pc, #200]	; (2e2c <udd_ep_alloc+0xec>)
    2d62:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2d64:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2d66:	2103      	movs	r1, #3
    2d68:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2d6a:	2901      	cmp	r1, #1
    2d6c:	d038      	beq.n	2de0 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2d6e:	2902      	cmp	r1, #2
    2d70:	d043      	beq.n	2dfa <udd_ep_alloc+0xba>
		return false;
    2d72:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2d74:	2903      	cmp	r1, #3
    2d76:	d13d      	bne.n	2df4 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2d78:	2204      	movs	r2, #4
    2d7a:	ab01      	add	r3, sp, #4
    2d7c:	70da      	strb	r2, [r3, #3]
    2d7e:	e032      	b.n	2de6 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2d80:	2c10      	cmp	r4, #16
    2d82:	d803      	bhi.n	2d8c <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2d84:	2201      	movs	r2, #1
    2d86:	ab01      	add	r3, sp, #4
    2d88:	705a      	strb	r2, [r3, #1]
    2d8a:	e7e8      	b.n	2d5e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2d8c:	2c20      	cmp	r4, #32
    2d8e:	d803      	bhi.n	2d98 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2d90:	2202      	movs	r2, #2
    2d92:	ab01      	add	r3, sp, #4
    2d94:	705a      	strb	r2, [r3, #1]
    2d96:	e7e2      	b.n	2d5e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2d98:	2c40      	cmp	r4, #64	; 0x40
    2d9a:	d803      	bhi.n	2da4 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2d9c:	2203      	movs	r2, #3
    2d9e:	ab01      	add	r3, sp, #4
    2da0:	705a      	strb	r2, [r3, #1]
    2da2:	e7dc      	b.n	2d5e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2da4:	2c80      	cmp	r4, #128	; 0x80
    2da6:	d803      	bhi.n	2db0 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2da8:	2204      	movs	r2, #4
    2daa:	ab01      	add	r3, sp, #4
    2dac:	705a      	strb	r2, [r3, #1]
    2dae:	e7d6      	b.n	2d5e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2db0:	2380      	movs	r3, #128	; 0x80
    2db2:	005b      	lsls	r3, r3, #1
    2db4:	429c      	cmp	r4, r3
    2db6:	d803      	bhi.n	2dc0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2db8:	2205      	movs	r2, #5
    2dba:	ab01      	add	r3, sp, #4
    2dbc:	705a      	strb	r2, [r3, #1]
    2dbe:	e7ce      	b.n	2d5e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2dc0:	2380      	movs	r3, #128	; 0x80
    2dc2:	009b      	lsls	r3, r3, #2
    2dc4:	429c      	cmp	r4, r3
    2dc6:	d803      	bhi.n	2dd0 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2dc8:	2206      	movs	r2, #6
    2dca:	ab01      	add	r3, sp, #4
    2dcc:	705a      	strb	r2, [r3, #1]
    2dce:	e7c6      	b.n	2d5e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2dd0:	4a17      	ldr	r2, [pc, #92]	; (2e30 <udd_ep_alloc+0xf0>)
		return false;
    2dd2:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2dd4:	4294      	cmp	r4, r2
    2dd6:	d80d      	bhi.n	2df4 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2dd8:	2207      	movs	r2, #7
    2dda:	ab01      	add	r3, sp, #4
    2ddc:	705a      	strb	r2, [r3, #1]
    2dde:	e7be      	b.n	2d5e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    2de0:	2202      	movs	r2, #2
    2de2:	ab01      	add	r3, sp, #4
    2de4:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2de6:	a901      	add	r1, sp, #4
    2de8:	4812      	ldr	r0, [pc, #72]	; (2e34 <udd_ep_alloc+0xf4>)
    2dea:	4b13      	ldr	r3, [pc, #76]	; (2e38 <udd_ep_alloc+0xf8>)
    2dec:	4798      	blx	r3
		return false;
    2dee:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2df0:	2800      	cmp	r0, #0
    2df2:	d006      	beq.n	2e02 <udd_ep_alloc+0xc2>
}
    2df4:	0018      	movs	r0, r3
    2df6:	b003      	add	sp, #12
    2df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    2dfa:	2203      	movs	r2, #3
    2dfc:	ab01      	add	r3, sp, #4
    2dfe:	70da      	strb	r2, [r3, #3]
    2e00:	e7f1      	b.n	2de6 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2e02:	210f      	movs	r1, #15
    2e04:	4029      	ands	r1, r5
    2e06:	4c0b      	ldr	r4, [pc, #44]	; (2e34 <udd_ep_alloc+0xf4>)
    2e08:	4b0c      	ldr	r3, [pc, #48]	; (2e3c <udd_ep_alloc+0xfc>)
    2e0a:	2200      	movs	r2, #0
    2e0c:	0020      	movs	r0, r4
    2e0e:	4e0c      	ldr	r6, [pc, #48]	; (2e40 <udd_ep_alloc+0x100>)
    2e10:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2e12:	2200      	movs	r2, #0
    2e14:	0029      	movs	r1, r5
    2e16:	0020      	movs	r0, r4
    2e18:	4e0a      	ldr	r6, [pc, #40]	; (2e44 <udd_ep_alloc+0x104>)
    2e1a:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2e1c:	2201      	movs	r2, #1
    2e1e:	0029      	movs	r1, r5
    2e20:	0020      	movs	r0, r4
    2e22:	47b0      	blx	r6
	return true;
    2e24:	2301      	movs	r3, #1
    2e26:	e7e5      	b.n	2df4 <udd_ep_alloc+0xb4>
    2e28:	00003549 	.word	0x00003549
    2e2c:	00002705 	.word	0x00002705
    2e30:	000003ff 	.word	0x000003ff
    2e34:	20000400 	.word	0x20000400
    2e38:	00003559 	.word	0x00003559
    2e3c:	00002729 	.word	0x00002729
    2e40:	00003359 	.word	0x00003359
    2e44:	000033a9 	.word	0x000033a9

00002e48 <udd_ep_is_halted>:
{
    2e48:	b510      	push	{r4, lr}
    2e4a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2e4c:	4801      	ldr	r0, [pc, #4]	; (2e54 <udd_ep_is_halted+0xc>)
    2e4e:	4b02      	ldr	r3, [pc, #8]	; (2e58 <udd_ep_is_halted+0x10>)
    2e50:	4798      	blx	r3
}
    2e52:	bd10      	pop	{r4, pc}
    2e54:	20000400 	.word	0x20000400
    2e58:	000037d3 	.word	0x000037d3

00002e5c <udd_ep_set_halt>:
{
    2e5c:	b510      	push	{r4, lr}
    2e5e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2e60:	230f      	movs	r3, #15
    2e62:	4003      	ands	r3, r0
		return false;
    2e64:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2e66:	2b01      	cmp	r3, #1
    2e68:	d900      	bls.n	2e6c <udd_ep_set_halt+0x10>
}
    2e6a:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    2e6c:	0021      	movs	r1, r4
    2e6e:	4804      	ldr	r0, [pc, #16]	; (2e80 <udd_ep_set_halt+0x24>)
    2e70:	4b04      	ldr	r3, [pc, #16]	; (2e84 <udd_ep_set_halt+0x28>)
    2e72:	4798      	blx	r3
	udd_ep_abort(ep);
    2e74:	0020      	movs	r0, r4
    2e76:	4b04      	ldr	r3, [pc, #16]	; (2e88 <udd_ep_set_halt+0x2c>)
    2e78:	4798      	blx	r3
	return true;
    2e7a:	2001      	movs	r0, #1
    2e7c:	e7f5      	b.n	2e6a <udd_ep_set_halt+0xe>
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	20000400 	.word	0x20000400
    2e84:	000037fd 	.word	0x000037fd
    2e88:	00002cad 	.word	0x00002cad

00002e8c <_usb_ep0_on_tansfer_ok>:
{
    2e8c:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2e8e:	4b34      	ldr	r3, [pc, #208]	; (2f60 <_usb_ep0_on_tansfer_ok+0xd4>)
    2e90:	781b      	ldrb	r3, [r3, #0]
    2e92:	2b01      	cmp	r3, #1
    2e94:	d00a      	beq.n	2eac <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2e96:	2b02      	cmp	r3, #2
    2e98:	d05f      	beq.n	2f5a <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    2e9a:	4b32      	ldr	r3, [pc, #200]	; (2f64 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e9c:	691b      	ldr	r3, [r3, #16]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d000      	beq.n	2ea4 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    2ea2:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2ea4:	2200      	movs	r2, #0
    2ea6:	4b2e      	ldr	r3, [pc, #184]	; (2f60 <_usb_ep0_on_tansfer_ok+0xd4>)
    2ea8:	701a      	strb	r2, [r3, #0]
}
    2eaa:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2eac:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2eae:	4b2d      	ldr	r3, [pc, #180]	; (2f64 <_usb_ep0_on_tansfer_ok+0xd8>)
    2eb0:	899b      	ldrh	r3, [r3, #12]
    2eb2:	4a2d      	ldr	r2, [pc, #180]	; (2f68 <_usb_ep0_on_tansfer_ok+0xdc>)
    2eb4:	8814      	ldrh	r4, [r2, #0]
    2eb6:	1962      	adds	r2, r4, r5
    2eb8:	4293      	cmp	r3, r2
    2eba:	da01      	bge.n	2ec0 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2ebc:	1b1d      	subs	r5, r3, r4
    2ebe:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2ec0:	4b28      	ldr	r3, [pc, #160]	; (2f64 <_usb_ep0_on_tansfer_ok+0xd8>)
    2ec2:	6898      	ldr	r0, [r3, #8]
    2ec4:	1900      	adds	r0, r0, r4
    2ec6:	002a      	movs	r2, r5
    2ec8:	4928      	ldr	r1, [pc, #160]	; (2f6c <_usb_ep0_on_tansfer_ok+0xe0>)
    2eca:	4b29      	ldr	r3, [pc, #164]	; (2f70 <_usb_ep0_on_tansfer_ok+0xe4>)
    2ecc:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2ece:	1964      	adds	r4, r4, r5
    2ed0:	b2a4      	uxth	r4, r4
    2ed2:	4b25      	ldr	r3, [pc, #148]	; (2f68 <_usb_ep0_on_tansfer_ok+0xdc>)
    2ed4:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2ed6:	2d08      	cmp	r5, #8
    2ed8:	d00a      	beq.n	2ef0 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2eda:	4b22      	ldr	r3, [pc, #136]	; (2f64 <_usb_ep0_on_tansfer_ok+0xd8>)
    2edc:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2ede:	695b      	ldr	r3, [r3, #20]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d002      	beq.n	2eea <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2ee4:	4798      	blx	r3
    2ee6:	2800      	cmp	r0, #0
    2ee8:	d014      	beq.n	2f14 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    2eea:	4b22      	ldr	r3, [pc, #136]	; (2f74 <_usb_ep0_on_tansfer_ok+0xe8>)
    2eec:	4798      	blx	r3
    2eee:	e7dc      	b.n	2eaa <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2ef0:	4b1c      	ldr	r3, [pc, #112]	; (2f64 <_usb_ep0_on_tansfer_ok+0xd8>)
    2ef2:	88da      	ldrh	r2, [r3, #6]
    2ef4:	4b20      	ldr	r3, [pc, #128]	; (2f78 <_usb_ep0_on_tansfer_ok+0xec>)
    2ef6:	881b      	ldrh	r3, [r3, #0]
    2ef8:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2efa:	429a      	cmp	r2, r3
    2efc:	dded      	ble.n	2eda <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2efe:	4b19      	ldr	r3, [pc, #100]	; (2f64 <_usb_ep0_on_tansfer_ok+0xd8>)
    2f00:	899b      	ldrh	r3, [r3, #12]
    2f02:	42a3      	cmp	r3, r4
    2f04:	d00c      	beq.n	2f20 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2f06:	2308      	movs	r3, #8
    2f08:	4a18      	ldr	r2, [pc, #96]	; (2f6c <_usb_ep0_on_tansfer_ok+0xe0>)
    2f0a:	2100      	movs	r1, #0
    2f0c:	481b      	ldr	r0, [pc, #108]	; (2f7c <_usb_ep0_on_tansfer_ok+0xf0>)
    2f0e:	4c1c      	ldr	r4, [pc, #112]	; (2f80 <_usb_ep0_on_tansfer_ok+0xf4>)
    2f10:	47a0      	blx	r4
    2f12:	e7ca      	b.n	2eaa <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2f14:	2205      	movs	r2, #5
    2f16:	4b12      	ldr	r3, [pc, #72]	; (2f60 <_usb_ep0_on_tansfer_ok+0xd4>)
    2f18:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    2f1a:	4b1a      	ldr	r3, [pc, #104]	; (2f84 <_usb_ep0_on_tansfer_ok+0xf8>)
    2f1c:	4798      	blx	r3
    2f1e:	e7c4      	b.n	2eaa <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    2f20:	4b10      	ldr	r3, [pc, #64]	; (2f64 <_usb_ep0_on_tansfer_ok+0xd8>)
    2f22:	695b      	ldr	r3, [r3, #20]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d00b      	beq.n	2f40 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    2f28:	4798      	blx	r3
    2f2a:	2800      	cmp	r0, #0
    2f2c:	d00f      	beq.n	2f4e <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2f2e:	4912      	ldr	r1, [pc, #72]	; (2f78 <_usb_ep0_on_tansfer_ok+0xec>)
    2f30:	4a0d      	ldr	r2, [pc, #52]	; (2f68 <_usb_ep0_on_tansfer_ok+0xdc>)
    2f32:	880b      	ldrh	r3, [r1, #0]
    2f34:	8810      	ldrh	r0, [r2, #0]
    2f36:	181b      	adds	r3, r3, r0
    2f38:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    2f3a:	2300      	movs	r3, #0
    2f3c:	8013      	strh	r3, [r2, #0]
    2f3e:	e7e2      	b.n	2f06 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2f40:	2205      	movs	r2, #5
    2f42:	4b07      	ldr	r3, [pc, #28]	; (2f60 <_usb_ep0_on_tansfer_ok+0xd4>)
    2f44:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2f46:	2000      	movs	r0, #0
    2f48:	4b0e      	ldr	r3, [pc, #56]	; (2f84 <_usb_ep0_on_tansfer_ok+0xf8>)
    2f4a:	4798      	blx	r3
    2f4c:	e7ad      	b.n	2eaa <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2f4e:	2205      	movs	r2, #5
    2f50:	4b03      	ldr	r3, [pc, #12]	; (2f60 <_usb_ep0_on_tansfer_ok+0xd4>)
    2f52:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2f54:	4b0b      	ldr	r3, [pc, #44]	; (2f84 <_usb_ep0_on_tansfer_ok+0xf8>)
    2f56:	4798      	blx	r3
    2f58:	e7a7      	b.n	2eaa <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    2f5a:	4b0b      	ldr	r3, [pc, #44]	; (2f88 <_usb_ep0_on_tansfer_ok+0xfc>)
    2f5c:	4798      	blx	r3
    2f5e:	e7a4      	b.n	2eaa <_usb_ep0_on_tansfer_ok+0x1e>
    2f60:	2000015a 	.word	0x2000015a
    2f64:	20000568 	.word	0x20000568
    2f68:	20000156 	.word	0x20000156
    2f6c:	20000580 	.word	0x20000580
    2f70:	000046d5 	.word	0x000046d5
    2f74:	00002a85 	.word	0x00002a85
    2f78:	20000158 	.word	0x20000158
    2f7c:	20000400 	.word	0x20000400
    2f80:	000038fd 	.word	0x000038fd
    2f84:	00002e5d 	.word	0x00002e5d
    2f88:	00002b15 	.word	0x00002b15

00002f8c <udd_ep_clear_halt>:
{
    2f8c:	b570      	push	{r4, r5, r6, lr}
    2f8e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2f90:	230f      	movs	r3, #15
    2f92:	4003      	ands	r3, r0
		return false;
    2f94:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2f96:	2b01      	cmp	r3, #1
    2f98:	d900      	bls.n	2f9c <udd_ep_clear_halt+0x10>
}
    2f9a:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    2f9c:	0020      	movs	r0, r4
    2f9e:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <udd_ep_clear_halt+0x38>)
    2fa0:	4798      	blx	r3
    2fa2:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2fa4:	0021      	movs	r1, r4
    2fa6:	4808      	ldr	r0, [pc, #32]	; (2fc8 <udd_ep_clear_halt+0x3c>)
    2fa8:	4b08      	ldr	r3, [pc, #32]	; (2fcc <udd_ep_clear_halt+0x40>)
    2faa:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2fac:	7cab      	ldrb	r3, [r5, #18]
	return true;
    2fae:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    2fb0:	07db      	lsls	r3, r3, #31
    2fb2:	d5f2      	bpl.n	2f9a <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    2fb4:	7cab      	ldrb	r3, [r5, #18]
    2fb6:	2201      	movs	r2, #1
    2fb8:	4393      	bics	r3, r2
    2fba:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2fbc:	682b      	ldr	r3, [r5, #0]
    2fbe:	4798      	blx	r3
	return true;
    2fc0:	2001      	movs	r0, #1
    2fc2:	e7ea      	b.n	2f9a <udd_ep_clear_halt+0xe>
    2fc4:	00002705 	.word	0x00002705
    2fc8:	20000400 	.word	0x20000400
    2fcc:	00003823 	.word	0x00003823

00002fd0 <udd_ep_run>:
{
    2fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd2:	b087      	sub	sp, #28
    2fd4:	0005      	movs	r5, r0
    2fd6:	9103      	str	r1, [sp, #12]
    2fd8:	9202      	str	r2, [sp, #8]
    2fda:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    2fdc:	260f      	movs	r6, #15
    2fde:	4006      	ands	r6, r0
		return false;
    2fe0:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2fe2:	2e01      	cmp	r6, #1
    2fe4:	d902      	bls.n	2fec <udd_ep_run+0x1c>
}
    2fe6:	0020      	movs	r0, r4
    2fe8:	b007      	add	sp, #28
    2fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2fec:	4b64      	ldr	r3, [pc, #400]	; (3180 <udd_ep_run+0x1b0>)
    2fee:	4798      	blx	r3
    2ff0:	1e04      	subs	r4, r0, #0
    2ff2:	d000      	beq.n	2ff6 <udd_ep_run+0x26>
    2ff4:	e0bd      	b.n	3172 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    2ff6:	0028      	movs	r0, r5
    2ff8:	4b62      	ldr	r3, [pc, #392]	; (3184 <udd_ep_run+0x1b4>)
    2ffa:	4798      	blx	r3
    2ffc:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2ffe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3002:	425a      	negs	r2, r3
    3004:	4153      	adcs	r3, r2
    3006:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3008:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    300a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    300e:	2200      	movs	r2, #0
    3010:	4b5d      	ldr	r3, [pc, #372]	; (3188 <udd_ep_run+0x1b8>)
    3012:	701a      	strb	r2, [r3, #0]
	return flags;
    3014:	9b05      	ldr	r3, [sp, #20]
	if (ptr_job->busy == true) {
    3016:	7c82      	ldrb	r2, [r0, #18]
    3018:	07d2      	lsls	r2, r2, #31
    301a:	d508      	bpl.n	302e <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    301c:	2b00      	cmp	r3, #0
    301e:	d0e2      	beq.n	2fe6 <udd_ep_run+0x16>
		cpu_irq_enable();
    3020:	2201      	movs	r2, #1
    3022:	4b59      	ldr	r3, [pc, #356]	; (3188 <udd_ep_run+0x1b8>)
    3024:	701a      	strb	r2, [r3, #0]
    3026:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    302a:	b662      	cpsie	i
    302c:	e7db      	b.n	2fe6 <udd_ep_run+0x16>
	ptr_job->busy = true;
    302e:	7c82      	ldrb	r2, [r0, #18]
    3030:	2101      	movs	r1, #1
    3032:	430a      	orrs	r2, r1
    3034:	7482      	strb	r2, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    3036:	2b00      	cmp	r3, #0
    3038:	d005      	beq.n	3046 <udd_ep_run+0x76>
		cpu_irq_enable();
    303a:	2201      	movs	r2, #1
    303c:	4b52      	ldr	r3, [pc, #328]	; (3188 <udd_ep_run+0x1b8>)
    303e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3040:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3044:	b662      	cpsie	i
	ptr_job->buf = buf;
    3046:	9b02      	ldr	r3, [sp, #8]
    3048:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    304a:	9b01      	ldr	r3, [sp, #4]
    304c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    304e:	2300      	movs	r3, #0
    3050:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3054:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3056:	2301      	movs	r3, #1
    3058:	9a03      	ldr	r2, [sp, #12]
    305a:	4013      	ands	r3, r2
    305c:	005a      	lsls	r2, r3, #1
    305e:	7cbb      	ldrb	r3, [r7, #18]
    3060:	2102      	movs	r1, #2
    3062:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3064:	4313      	orrs	r3, r2
    3066:	2204      	movs	r2, #4
    3068:	4393      	bics	r3, r2
    306a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    306c:	b26b      	sxtb	r3, r5
    306e:	2b00      	cmp	r3, #0
    3070:	db20      	blt.n	30b4 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3072:	9b01      	ldr	r3, [sp, #4]
    3074:	2b00      	cmp	r3, #0
    3076:	d06f      	beq.n	3158 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3078:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    307a:	4b44      	ldr	r3, [pc, #272]	; (318c <udd_ep_run+0x1bc>)
    307c:	429c      	cmp	r4, r3
    307e:	d95a      	bls.n	3136 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3080:	8a39      	ldrh	r1, [r7, #16]
    3082:	001c      	movs	r4, r3
    3084:	0018      	movs	r0, r3
    3086:	4b42      	ldr	r3, [pc, #264]	; (3190 <udd_ep_run+0x1c0>)
    3088:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    308a:	1a63      	subs	r3, r4, r1
    308c:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    308e:	8a3b      	ldrh	r3, [r7, #16]
    3090:	429a      	cmp	r2, r3
    3092:	d257      	bcs.n	3144 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3094:	7cba      	ldrb	r2, [r7, #18]
    3096:	2104      	movs	r1, #4
    3098:	430a      	orrs	r2, r1
    309a:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    309c:	1e72      	subs	r2, r6, #1
    309e:	0192      	lsls	r2, r2, #6
    30a0:	493c      	ldr	r1, [pc, #240]	; (3194 <udd_ep_run+0x1c4>)
    30a2:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    30a4:	0031      	movs	r1, r6
    30a6:	483c      	ldr	r0, [pc, #240]	; (3198 <udd_ep_run+0x1c8>)
    30a8:	4c3c      	ldr	r4, [pc, #240]	; (319c <udd_ep_run+0x1cc>)
    30aa:	47a0      	blx	r4
				return (STATUS_OK ==
    30ac:	4244      	negs	r4, r0
    30ae:	4144      	adcs	r4, r0
    30b0:	b2e4      	uxtb	r4, r4
    30b2:	e798      	b.n	2fe6 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    30b4:	9b01      	ldr	r3, [sp, #4]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d027      	beq.n	310a <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    30ba:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    30bc:	4b33      	ldr	r3, [pc, #204]	; (318c <udd_ep_run+0x1bc>)
    30be:	429d      	cmp	r5, r3
    30c0:	d906      	bls.n	30d0 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    30c2:	8a39      	ldrh	r1, [r7, #16]
    30c4:	001d      	movs	r5, r3
    30c6:	0018      	movs	r0, r3
    30c8:	4b31      	ldr	r3, [pc, #196]	; (3190 <udd_ep_run+0x1c0>)
    30ca:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    30cc:	1a6b      	subs	r3, r5, r1
    30ce:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    30d0:	7cbb      	ldrb	r3, [r7, #18]
    30d2:	079b      	lsls	r3, r3, #30
    30d4:	d507      	bpl.n	30e6 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    30d6:	8a39      	ldrh	r1, [r7, #16]
    30d8:	0028      	movs	r0, r5
    30da:	4b31      	ldr	r3, [pc, #196]	; (31a0 <udd_ep_run+0x1d0>)
    30dc:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    30de:	b289      	uxth	r1, r1
    30e0:	424c      	negs	r4, r1
    30e2:	414c      	adcs	r4, r1
    30e4:	b2e4      	uxtb	r4, r4
    30e6:	2001      	movs	r0, #1
    30e8:	4020      	ands	r0, r4
    30ea:	0040      	lsls	r0, r0, #1
    30ec:	7cbc      	ldrb	r4, [r7, #18]
    30ee:	2302      	movs	r3, #2
    30f0:	439c      	bics	r4, r3
    30f2:	4304      	orrs	r4, r0
    30f4:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    30f6:	002b      	movs	r3, r5
    30f8:	9a02      	ldr	r2, [sp, #8]
    30fa:	0031      	movs	r1, r6
    30fc:	4826      	ldr	r0, [pc, #152]	; (3198 <udd_ep_run+0x1c8>)
    30fe:	4c29      	ldr	r4, [pc, #164]	; (31a4 <udd_ep_run+0x1d4>)
    3100:	47a0      	blx	r4
		return (STATUS_OK ==
    3102:	4244      	negs	r4, r0
    3104:	4144      	adcs	r4, r0
    3106:	b2e4      	uxtb	r4, r4
    3108:	e76d      	b.n	2fe6 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    310a:	7cbb      	ldrb	r3, [r7, #18]
    310c:	079b      	lsls	r3, r3, #30
    310e:	d505      	bpl.n	311c <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3110:	7cbb      	ldrb	r3, [r7, #18]
    3112:	2202      	movs	r2, #2
    3114:	4393      	bics	r3, r2
    3116:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3118:	2500      	movs	r5, #0
    311a:	e7ec      	b.n	30f6 <udd_ep_run+0x126>
			ptr_job->busy = false;
    311c:	7cbb      	ldrb	r3, [r7, #18]
    311e:	2201      	movs	r2, #1
    3120:	4393      	bics	r3, r2
    3122:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3124:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3126:	2b00      	cmp	r3, #0
    3128:	d025      	beq.n	3176 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    312a:	002a      	movs	r2, r5
    312c:	2100      	movs	r1, #0
    312e:	2000      	movs	r0, #0
    3130:	4798      	blx	r3
			return true;
    3132:	2401      	movs	r4, #1
    3134:	e757      	b.n	2fe6 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3136:	8a39      	ldrh	r1, [r7, #16]
    3138:	0020      	movs	r0, r4
    313a:	4b19      	ldr	r3, [pc, #100]	; (31a0 <udd_ep_run+0x1d0>)
    313c:	4798      	blx	r3
    313e:	1a63      	subs	r3, r4, r1
    3140:	b29a      	uxth	r2, r3
    3142:	e7a4      	b.n	308e <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3144:	0013      	movs	r3, r2
    3146:	9a02      	ldr	r2, [sp, #8]
    3148:	0031      	movs	r1, r6
    314a:	4813      	ldr	r0, [pc, #76]	; (3198 <udd_ep_run+0x1c8>)
    314c:	4c13      	ldr	r4, [pc, #76]	; (319c <udd_ep_run+0x1cc>)
    314e:	47a0      	blx	r4
				return (STATUS_OK ==
    3150:	4244      	negs	r4, r0
    3152:	4144      	adcs	r4, r0
    3154:	b2e4      	uxtb	r4, r4
    3156:	e746      	b.n	2fe6 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3158:	7cbb      	ldrb	r3, [r7, #18]
    315a:	2201      	movs	r2, #1
    315c:	4393      	bics	r3, r2
    315e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3162:	2b00      	cmp	r3, #0
    3164:	d009      	beq.n	317a <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3166:	002a      	movs	r2, r5
    3168:	2100      	movs	r1, #0
    316a:	2000      	movs	r0, #0
    316c:	4798      	blx	r3
			return true;
    316e:	2401      	movs	r4, #1
    3170:	e739      	b.n	2fe6 <udd_ep_run+0x16>
		return false;
    3172:	2400      	movs	r4, #0
    3174:	e737      	b.n	2fe6 <udd_ep_run+0x16>
			return true;
    3176:	2401      	movs	r4, #1
    3178:	e735      	b.n	2fe6 <udd_ep_run+0x16>
			return true;
    317a:	2401      	movs	r4, #1
    317c:	e733      	b.n	2fe6 <udd_ep_run+0x16>
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	00002e49 	.word	0x00002e49
    3184:	00002705 	.word	0x00002705
    3188:	200000d8 	.word	0x200000d8
    318c:	00001fff 	.word	0x00001fff
    3190:	00004641 	.word	0x00004641
    3194:	200003c0 	.word	0x200003c0
    3198:	20000400 	.word	0x20000400
    319c:	000038fd 	.word	0x000038fd
    31a0:	0000446d 	.word	0x0000446d
    31a4:	000038a9 	.word	0x000038a9

000031a8 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    31a8:	4b02      	ldr	r3, [pc, #8]	; (31b4 <udd_set_address+0xc>)
    31aa:	681b      	ldr	r3, [r3, #0]
    31ac:	2280      	movs	r2, #128	; 0x80
    31ae:	4310      	orrs	r0, r2
    31b0:	7298      	strb	r0, [r3, #10]
}
    31b2:	4770      	bx	lr
    31b4:	20000400 	.word	0x20000400

000031b8 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    31b8:	4b02      	ldr	r3, [pc, #8]	; (31c4 <udd_getaddress+0xc>)
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	7a98      	ldrb	r0, [r3, #10]
    31be:	0640      	lsls	r0, r0, #25
    31c0:	0e40      	lsrs	r0, r0, #25
}
    31c2:	4770      	bx	lr
    31c4:	20000400 	.word	0x20000400

000031c8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    31c8:	4b01      	ldr	r3, [pc, #4]	; (31d0 <udd_set_setup_payload+0x8>)
    31ca:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    31cc:	8199      	strh	r1, [r3, #12]
}
    31ce:	4770      	bx	lr
    31d0:	20000568 	.word	0x20000568

000031d4 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    31d4:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    31d6:	2003      	movs	r0, #3
    31d8:	4b16      	ldr	r3, [pc, #88]	; (3234 <udd_attach+0x60>)
    31da:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    31dc:	4c16      	ldr	r4, [pc, #88]	; (3238 <udd_attach+0x64>)
    31de:	6822      	ldr	r2, [r4, #0]
    31e0:	8913      	ldrh	r3, [r2, #8]
    31e2:	2101      	movs	r1, #1
    31e4:	438b      	bics	r3, r1
    31e6:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    31e8:	4a14      	ldr	r2, [pc, #80]	; (323c <udd_attach+0x68>)
    31ea:	3103      	adds	r1, #3
    31ec:	0020      	movs	r0, r4
    31ee:	4e14      	ldr	r6, [pc, #80]	; (3240 <udd_attach+0x6c>)
    31f0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    31f2:	4a14      	ldr	r2, [pc, #80]	; (3244 <udd_attach+0x70>)
    31f4:	2100      	movs	r1, #0
    31f6:	0020      	movs	r0, r4
    31f8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    31fa:	4a13      	ldr	r2, [pc, #76]	; (3248 <udd_attach+0x74>)
    31fc:	2101      	movs	r1, #1
    31fe:	0020      	movs	r0, r4
    3200:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3202:	4a12      	ldr	r2, [pc, #72]	; (324c <udd_attach+0x78>)
    3204:	2102      	movs	r1, #2
    3206:	0020      	movs	r0, r4
    3208:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    320a:	2104      	movs	r1, #4
    320c:	0020      	movs	r0, r4
    320e:	4d10      	ldr	r5, [pc, #64]	; (3250 <udd_attach+0x7c>)
    3210:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3212:	2100      	movs	r1, #0
    3214:	0020      	movs	r0, r4
    3216:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3218:	2101      	movs	r1, #1
    321a:	0020      	movs	r0, r4
    321c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    321e:	2102      	movs	r1, #2
    3220:	0020      	movs	r0, r4
    3222:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3224:	4a0b      	ldr	r2, [pc, #44]	; (3254 <udd_attach+0x80>)
    3226:	2106      	movs	r1, #6
    3228:	0020      	movs	r0, r4
    322a:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    322c:	2106      	movs	r1, #6
    322e:	0020      	movs	r0, r4
    3230:	47a8      	blx	r5
#endif
}
    3232:	bd70      	pop	{r4, r5, r6, pc}
    3234:	00002649 	.word	0x00002649
    3238:	20000400 	.word	0x20000400
    323c:	000029a9 	.word	0x000029a9
    3240:	000032f9 	.word	0x000032f9
    3244:	00002ca1 	.word	0x00002ca1
    3248:	000029d5 	.word	0x000029d5
    324c:	0000293d 	.word	0x0000293d
    3250:	0000331d 	.word	0x0000331d
    3254:	00002909 	.word	0x00002909

00003258 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3258:	b570      	push	{r4, r5, r6, lr}
    325a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    325c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3260:	425a      	negs	r2, r3
    3262:	4153      	adcs	r3, r2
    3264:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3266:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3268:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    326c:	2200      	movs	r2, #0
    326e:	4b1a      	ldr	r3, [pc, #104]	; (32d8 <udd_enable+0x80>)
    3270:	701a      	strb	r2, [r3, #0]
	return flags;
    3272:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3274:	ad01      	add	r5, sp, #4
    3276:	0028      	movs	r0, r5
    3278:	4b18      	ldr	r3, [pc, #96]	; (32dc <udd_enable+0x84>)
    327a:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    327c:	2303      	movs	r3, #3
    327e:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    3280:	4e17      	ldr	r6, [pc, #92]	; (32e0 <udd_enable+0x88>)
    3282:	002a      	movs	r2, r5
    3284:	2182      	movs	r1, #130	; 0x82
    3286:	05c9      	lsls	r1, r1, #23
    3288:	0030      	movs	r0, r6
    328a:	4b16      	ldr	r3, [pc, #88]	; (32e4 <udd_enable+0x8c>)
    328c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    328e:	0030      	movs	r0, r6
    3290:	4b15      	ldr	r3, [pc, #84]	; (32e8 <udd_enable+0x90>)
    3292:	4798      	blx	r3
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    3294:	4b15      	ldr	r3, [pc, #84]	; (32ec <udd_enable+0x94>)
    3296:	8b1b      	ldrh	r3, [r3, #24]
    3298:	069b      	lsls	r3, r3, #26
    329a:	d415      	bmi.n	32c8 <udd_enable+0x70>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    329c:	4913      	ldr	r1, [pc, #76]	; (32ec <udd_enable+0x94>)
    329e:	22d0      	movs	r2, #208	; 0xd0
    32a0:	0112      	lsls	r2, r2, #4
    32a2:	68cb      	ldr	r3, [r1, #12]
    32a4:	4013      	ands	r3, r2
    32a6:	4293      	cmp	r3, r2
    32a8:	d1fb      	bne.n	32a2 <udd_enable+0x4a>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    32aa:	2001      	movs	r0, #1
    32ac:	4b10      	ldr	r3, [pc, #64]	; (32f0 <udd_enable+0x98>)
    32ae:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    32b0:	4b10      	ldr	r3, [pc, #64]	; (32f4 <udd_enable+0x9c>)
    32b2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    32b4:	2c00      	cmp	r4, #0
    32b6:	d005      	beq.n	32c4 <udd_enable+0x6c>
		cpu_irq_enable();
    32b8:	2201      	movs	r2, #1
    32ba:	4b07      	ldr	r3, [pc, #28]	; (32d8 <udd_enable+0x80>)
    32bc:	701a      	strb	r2, [r3, #0]
    32be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    32c2:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    32c4:	b002      	add	sp, #8
    32c6:	bd70      	pop	{r4, r5, r6, pc}
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    32c8:	4908      	ldr	r1, [pc, #32]	; (32ec <udd_enable+0x94>)
    32ca:	2280      	movs	r2, #128	; 0x80
    32cc:	0052      	lsls	r2, r2, #1
    32ce:	68cb      	ldr	r3, [r1, #12]
    32d0:	4213      	tst	r3, r2
    32d2:	d0fc      	beq.n	32ce <udd_enable+0x76>
    32d4:	e7e9      	b.n	32aa <udd_enable+0x52>
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	200000d8 	.word	0x200000d8
    32dc:	00004071 	.word	0x00004071
    32e0:	20000400 	.word	0x20000400
    32e4:	00004081 	.word	0x00004081
    32e8:	0000397d 	.word	0x0000397d
    32ec:	40000c00 	.word	0x40000c00
    32f0:	00002649 	.word	0x00002649
    32f4:	000031d5 	.word	0x000031d5

000032f8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    32f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    32fa:	000b      	movs	r3, r1
    32fc:	332e      	adds	r3, #46	; 0x2e
    32fe:	009b      	lsls	r3, r3, #2
    3300:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3302:	22aa      	movs	r2, #170	; 0xaa
    3304:	0052      	lsls	r2, r2, #1
    3306:	0049      	lsls	r1, r1, #1
    3308:	5a83      	ldrh	r3, [r0, r2]
    330a:	4c03      	ldr	r4, [pc, #12]	; (3318 <usb_device_register_callback+0x20>)
    330c:	5b09      	ldrh	r1, [r1, r4]
    330e:	430b      	orrs	r3, r1
    3310:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    3312:	2000      	movs	r0, #0
    3314:	bd10      	pop	{r4, pc}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	000048d4 	.word	0x000048d4

0000331c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    331c:	0049      	lsls	r1, r1, #1
    331e:	4b06      	ldr	r3, [pc, #24]	; (3338 <usb_device_enable_callback+0x1c>)
    3320:	5acb      	ldrh	r3, [r1, r3]
    3322:	6802      	ldr	r2, [r0, #0]
    3324:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3326:	21ab      	movs	r1, #171	; 0xab
    3328:	0049      	lsls	r1, r1, #1
    332a:	5a42      	ldrh	r2, [r0, r1]
    332c:	431a      	orrs	r2, r3
    332e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3330:	6802      	ldr	r2, [r0, #0]
    3332:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    3334:	2000      	movs	r0, #0
    3336:	4770      	bx	lr
    3338:	000048d4 	.word	0x000048d4

0000333c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    333c:	0049      	lsls	r1, r1, #1
    333e:	4b05      	ldr	r3, [pc, #20]	; (3354 <usb_device_disable_callback+0x18>)
    3340:	5aca      	ldrh	r2, [r1, r3]
    3342:	21ab      	movs	r1, #171	; 0xab
    3344:	0049      	lsls	r1, r1, #1
    3346:	5a43      	ldrh	r3, [r0, r1]
    3348:	4393      	bics	r3, r2
    334a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    334c:	6803      	ldr	r3, [r0, #0]
    334e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3350:	2000      	movs	r0, #0
    3352:	4770      	bx	lr
    3354:	000048d4 	.word	0x000048d4

00003358 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3358:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    335a:	008c      	lsls	r4, r1, #2
    335c:	18a4      	adds	r4, r4, r2
    335e:	3434      	adds	r4, #52	; 0x34
    3360:	00a4      	lsls	r4, r4, #2
    3362:	1904      	adds	r4, r0, r4
    3364:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3366:	1840      	adds	r0, r0, r1
    3368:	3059      	adds	r0, #89	; 0x59
    336a:	30ff      	adds	r0, #255	; 0xff
    336c:	7803      	ldrb	r3, [r0, #0]
    336e:	4903      	ldr	r1, [pc, #12]	; (337c <usb_device_endpoint_register_callback+0x24>)
    3370:	5c8a      	ldrb	r2, [r1, r2]
    3372:	4313      	orrs	r3, r2
    3374:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3376:	2000      	movs	r0, #0
    3378:	bd10      	pop	{r4, pc}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	000048e4 	.word	0x000048e4

00003380 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3380:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3382:	008b      	lsls	r3, r1, #2
    3384:	189b      	adds	r3, r3, r2
    3386:	3334      	adds	r3, #52	; 0x34
    3388:	009b      	lsls	r3, r3, #2
    338a:	18c3      	adds	r3, r0, r3
    338c:	2400      	movs	r4, #0
    338e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3390:	1840      	adds	r0, r0, r1
    3392:	3059      	adds	r0, #89	; 0x59
    3394:	30ff      	adds	r0, #255	; 0xff
    3396:	4b03      	ldr	r3, [pc, #12]	; (33a4 <usb_device_endpoint_unregister_callback+0x24>)
    3398:	5c9a      	ldrb	r2, [r3, r2]
    339a:	7803      	ldrb	r3, [r0, #0]
    339c:	4393      	bics	r3, r2
    339e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    33a0:	2000      	movs	r0, #0
    33a2:	bd10      	pop	{r4, pc}
    33a4:	000048e4 	.word	0x000048e4

000033a8 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    33a8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    33aa:	230f      	movs	r3, #15
    33ac:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    33ae:	18c4      	adds	r4, r0, r3
    33b0:	3461      	adds	r4, #97	; 0x61
    33b2:	34ff      	adds	r4, #255	; 0xff
    33b4:	7825      	ldrb	r5, [r4, #0]
    33b6:	4e2f      	ldr	r6, [pc, #188]	; (3474 <usb_device_endpoint_enable_callback+0xcc>)
    33b8:	5cb6      	ldrb	r6, [r6, r2]
    33ba:	4335      	orrs	r5, r6
    33bc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    33be:	2a00      	cmp	r2, #0
    33c0:	d129      	bne.n	3416 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    33c2:	2b00      	cmp	r3, #0
    33c4:	d112      	bne.n	33ec <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    33c6:	2503      	movs	r5, #3
    33c8:	240a      	movs	r4, #10
    33ca:	34ff      	adds	r4, #255	; 0xff
    33cc:	6806      	ldr	r6, [r0, #0]
    33ce:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    33d0:	2a03      	cmp	r2, #3
    33d2:	d109      	bne.n	33e8 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    33d4:	b249      	sxtb	r1, r1
    33d6:	2900      	cmp	r1, #0
    33d8:	db44      	blt.n	3464 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    33da:	6802      	ldr	r2, [r0, #0]
    33dc:	015b      	lsls	r3, r3, #5
    33de:	18d3      	adds	r3, r2, r3
    33e0:	330a      	adds	r3, #10
    33e2:	33ff      	adds	r3, #255	; 0xff
    33e4:	2220      	movs	r2, #32
    33e6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    33e8:	2000      	movs	r0, #0
    33ea:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    33ec:	b24c      	sxtb	r4, r1
    33ee:	2c00      	cmp	r4, #0
    33f0:	db08      	blt.n	3404 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    33f2:	015c      	lsls	r4, r3, #5
    33f4:	6805      	ldr	r5, [r0, #0]
    33f6:	46ac      	mov	ip, r5
    33f8:	4464      	add	r4, ip
    33fa:	340a      	adds	r4, #10
    33fc:	34ff      	adds	r4, #255	; 0xff
    33fe:	2501      	movs	r5, #1
    3400:	7025      	strb	r5, [r4, #0]
    3402:	e7e5      	b.n	33d0 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3404:	015c      	lsls	r4, r3, #5
    3406:	6805      	ldr	r5, [r0, #0]
    3408:	46ac      	mov	ip, r5
    340a:	4464      	add	r4, ip
    340c:	340a      	adds	r4, #10
    340e:	34ff      	adds	r4, #255	; 0xff
    3410:	2502      	movs	r5, #2
    3412:	7025      	strb	r5, [r4, #0]
    3414:	e7dc      	b.n	33d0 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3416:	2a01      	cmp	r2, #1
    3418:	d11a      	bne.n	3450 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    341a:	2b00      	cmp	r3, #0
    341c:	d105      	bne.n	342a <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    341e:	6802      	ldr	r2, [r0, #0]
    3420:	210c      	movs	r1, #12
    3422:	230a      	movs	r3, #10
    3424:	33ff      	adds	r3, #255	; 0xff
    3426:	54d1      	strb	r1, [r2, r3]
    3428:	e7de      	b.n	33e8 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    342a:	b249      	sxtb	r1, r1
    342c:	2900      	cmp	r1, #0
    342e:	db07      	blt.n	3440 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3430:	6802      	ldr	r2, [r0, #0]
    3432:	015b      	lsls	r3, r3, #5
    3434:	18d3      	adds	r3, r2, r3
    3436:	330a      	adds	r3, #10
    3438:	33ff      	adds	r3, #255	; 0xff
    343a:	2204      	movs	r2, #4
    343c:	701a      	strb	r2, [r3, #0]
    343e:	e7d3      	b.n	33e8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3440:	6802      	ldr	r2, [r0, #0]
    3442:	015b      	lsls	r3, r3, #5
    3444:	18d3      	adds	r3, r2, r3
    3446:	330a      	adds	r3, #10
    3448:	33ff      	adds	r3, #255	; 0xff
    344a:	2208      	movs	r2, #8
    344c:	701a      	strb	r2, [r3, #0]
    344e:	e7cb      	b.n	33e8 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3450:	2a02      	cmp	r2, #2
    3452:	d1bd      	bne.n	33d0 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3454:	6802      	ldr	r2, [r0, #0]
    3456:	015b      	lsls	r3, r3, #5
    3458:	18d3      	adds	r3, r2, r3
    345a:	330a      	adds	r3, #10
    345c:	33ff      	adds	r3, #255	; 0xff
    345e:	2210      	movs	r2, #16
    3460:	701a      	strb	r2, [r3, #0]
    3462:	e7c1      	b.n	33e8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3464:	6802      	ldr	r2, [r0, #0]
    3466:	015b      	lsls	r3, r3, #5
    3468:	18d3      	adds	r3, r2, r3
    346a:	330a      	adds	r3, #10
    346c:	33ff      	adds	r3, #255	; 0xff
    346e:	2240      	movs	r2, #64	; 0x40
    3470:	701a      	strb	r2, [r3, #0]
    3472:	e7b9      	b.n	33e8 <usb_device_endpoint_enable_callback+0x40>
    3474:	000048e4 	.word	0x000048e4

00003478 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3478:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    347a:	230f      	movs	r3, #15
    347c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    347e:	18c4      	adds	r4, r0, r3
    3480:	3461      	adds	r4, #97	; 0x61
    3482:	34ff      	adds	r4, #255	; 0xff
    3484:	4d2f      	ldr	r5, [pc, #188]	; (3544 <usb_device_endpoint_disable_callback+0xcc>)
    3486:	5cae      	ldrb	r6, [r5, r2]
    3488:	7825      	ldrb	r5, [r4, #0]
    348a:	43b5      	bics	r5, r6
    348c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    348e:	2a00      	cmp	r2, #0
    3490:	d129      	bne.n	34e6 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3492:	2b00      	cmp	r3, #0
    3494:	d112      	bne.n	34bc <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3496:	2503      	movs	r5, #3
    3498:	2484      	movs	r4, #132	; 0x84
    349a:	0064      	lsls	r4, r4, #1
    349c:	6806      	ldr	r6, [r0, #0]
    349e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    34a0:	2a03      	cmp	r2, #3
    34a2:	d109      	bne.n	34b8 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    34a4:	b249      	sxtb	r1, r1
    34a6:	2900      	cmp	r1, #0
    34a8:	db44      	blt.n	3534 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    34aa:	6802      	ldr	r2, [r0, #0]
    34ac:	015b      	lsls	r3, r3, #5
    34ae:	18d3      	adds	r3, r2, r3
    34b0:	3309      	adds	r3, #9
    34b2:	33ff      	adds	r3, #255	; 0xff
    34b4:	2220      	movs	r2, #32
    34b6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    34b8:	2000      	movs	r0, #0
    34ba:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    34bc:	b24c      	sxtb	r4, r1
    34be:	2c00      	cmp	r4, #0
    34c0:	db08      	blt.n	34d4 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    34c2:	015c      	lsls	r4, r3, #5
    34c4:	6805      	ldr	r5, [r0, #0]
    34c6:	46ac      	mov	ip, r5
    34c8:	4464      	add	r4, ip
    34ca:	3409      	adds	r4, #9
    34cc:	34ff      	adds	r4, #255	; 0xff
    34ce:	2501      	movs	r5, #1
    34d0:	7025      	strb	r5, [r4, #0]
    34d2:	e7e5      	b.n	34a0 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    34d4:	015c      	lsls	r4, r3, #5
    34d6:	6805      	ldr	r5, [r0, #0]
    34d8:	46ac      	mov	ip, r5
    34da:	4464      	add	r4, ip
    34dc:	3409      	adds	r4, #9
    34de:	34ff      	adds	r4, #255	; 0xff
    34e0:	2502      	movs	r5, #2
    34e2:	7025      	strb	r5, [r4, #0]
    34e4:	e7dc      	b.n	34a0 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    34e6:	2a01      	cmp	r2, #1
    34e8:	d11a      	bne.n	3520 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    34ea:	2b00      	cmp	r3, #0
    34ec:	d105      	bne.n	34fa <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    34ee:	6802      	ldr	r2, [r0, #0]
    34f0:	210c      	movs	r1, #12
    34f2:	3309      	adds	r3, #9
    34f4:	33ff      	adds	r3, #255	; 0xff
    34f6:	54d1      	strb	r1, [r2, r3]
    34f8:	e7de      	b.n	34b8 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    34fa:	b249      	sxtb	r1, r1
    34fc:	2900      	cmp	r1, #0
    34fe:	db07      	blt.n	3510 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3500:	6802      	ldr	r2, [r0, #0]
    3502:	015b      	lsls	r3, r3, #5
    3504:	18d3      	adds	r3, r2, r3
    3506:	3309      	adds	r3, #9
    3508:	33ff      	adds	r3, #255	; 0xff
    350a:	2204      	movs	r2, #4
    350c:	701a      	strb	r2, [r3, #0]
    350e:	e7d3      	b.n	34b8 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3510:	6802      	ldr	r2, [r0, #0]
    3512:	015b      	lsls	r3, r3, #5
    3514:	18d3      	adds	r3, r2, r3
    3516:	3309      	adds	r3, #9
    3518:	33ff      	adds	r3, #255	; 0xff
    351a:	2208      	movs	r2, #8
    351c:	701a      	strb	r2, [r3, #0]
    351e:	e7cb      	b.n	34b8 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3520:	2a02      	cmp	r2, #2
    3522:	d1bd      	bne.n	34a0 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3524:	6802      	ldr	r2, [r0, #0]
    3526:	015b      	lsls	r3, r3, #5
    3528:	18d3      	adds	r3, r2, r3
    352a:	3309      	adds	r3, #9
    352c:	33ff      	adds	r3, #255	; 0xff
    352e:	2210      	movs	r2, #16
    3530:	701a      	strb	r2, [r3, #0]
    3532:	e7c1      	b.n	34b8 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    3534:	6802      	ldr	r2, [r0, #0]
    3536:	015b      	lsls	r3, r3, #5
    3538:	18d3      	adds	r3, r2, r3
    353a:	3309      	adds	r3, #9
    353c:	33ff      	adds	r3, #255	; 0xff
    353e:	2240      	movs	r2, #64	; 0x40
    3540:	701a      	strb	r2, [r3, #0]
    3542:	e7b9      	b.n	34b8 <usb_device_endpoint_disable_callback+0x40>
    3544:	000048e4 	.word	0x000048e4

00003548 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3548:	2300      	movs	r3, #0
    354a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    354c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    354e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3550:	3301      	adds	r3, #1
    3552:	70c3      	strb	r3, [r0, #3]
}
    3554:	4770      	bx	lr
	...

00003558 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3558:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    355a:	780c      	ldrb	r4, [r1, #0]
    355c:	230f      	movs	r3, #15
    355e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3560:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3562:	78ca      	ldrb	r2, [r1, #3]
    3564:	2a04      	cmp	r2, #4
    3566:	d870      	bhi.n	364a <usb_device_endpoint_set_config+0xf2>
    3568:	0092      	lsls	r2, r2, #2
    356a:	4d89      	ldr	r5, [pc, #548]	; (3790 <usb_device_endpoint_set_config+0x238>)
    356c:	58aa      	ldr	r2, [r5, r2]
    356e:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3570:	6802      	ldr	r2, [r0, #0]
    3572:	3308      	adds	r3, #8
    3574:	015b      	lsls	r3, r3, #5
    3576:	2100      	movs	r1, #0
    3578:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    357a:	2200      	movs	r2, #0
    357c:	e082      	b.n	3684 <usb_device_endpoint_set_config+0x12c>
    357e:	015c      	lsls	r4, r3, #5
    3580:	6802      	ldr	r2, [r0, #0]
    3582:	4694      	mov	ip, r2
    3584:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3586:	2280      	movs	r2, #128	; 0x80
    3588:	0052      	lsls	r2, r2, #1
    358a:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    358c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    358e:	076d      	lsls	r5, r5, #29
    3590:	d178      	bne.n	3684 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3592:	32e4      	adds	r2, #228	; 0xe4
    3594:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3596:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3598:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    359a:	422e      	tst	r6, r5
    359c:	d172      	bne.n	3684 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    359e:	3d5f      	subs	r5, #95	; 0x5f
    35a0:	32e4      	adds	r2, #228	; 0xe4
    35a2:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    35a4:	001a      	movs	r2, r3
    35a6:	3208      	adds	r2, #8
    35a8:	0152      	lsls	r2, r2, #5
    35aa:	6804      	ldr	r4, [r0, #0]
    35ac:	18a4      	adds	r4, r4, r2
    35ae:	352f      	adds	r5, #47	; 0x2f
    35b0:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    35b2:	6800      	ldr	r0, [r0, #0]
    35b4:	1882      	adds	r2, r0, r2
    35b6:	2080      	movs	r0, #128	; 0x80
    35b8:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    35ba:	788a      	ldrb	r2, [r1, #2]
    35bc:	2a00      	cmp	r2, #0
    35be:	d01f      	beq.n	3600 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    35c0:	0158      	lsls	r0, r3, #5
    35c2:	4a74      	ldr	r2, [pc, #464]	; (3794 <usb_device_endpoint_set_config+0x23c>)
    35c4:	1812      	adds	r2, r2, r0
    35c6:	6854      	ldr	r4, [r2, #4]
    35c8:	2080      	movs	r0, #128	; 0x80
    35ca:	0600      	lsls	r0, r0, #24
    35cc:	4304      	orrs	r4, r0
    35ce:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    35d0:	6954      	ldr	r4, [r2, #20]
    35d2:	4320      	orrs	r0, r4
    35d4:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    35d6:	2507      	movs	r5, #7
    35d8:	784c      	ldrb	r4, [r1, #1]
    35da:	015a      	lsls	r2, r3, #5
    35dc:	4b6d      	ldr	r3, [pc, #436]	; (3794 <usb_device_endpoint_set_config+0x23c>)
    35de:	189b      	adds	r3, r3, r2
    35e0:	6858      	ldr	r0, [r3, #4]
    35e2:	402c      	ands	r4, r5
    35e4:	0724      	lsls	r4, r4, #28
    35e6:	4e6c      	ldr	r6, [pc, #432]	; (3798 <usb_device_endpoint_set_config+0x240>)
    35e8:	4030      	ands	r0, r6
    35ea:	4320      	orrs	r0, r4
    35ec:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    35ee:	7849      	ldrb	r1, [r1, #1]
    35f0:	695a      	ldr	r2, [r3, #20]
    35f2:	4029      	ands	r1, r5
    35f4:	0709      	lsls	r1, r1, #28
    35f6:	4032      	ands	r2, r6
    35f8:	430a      	orrs	r2, r1
    35fa:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    35fc:	2200      	movs	r2, #0
    35fe:	e041      	b.n	3684 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3600:	0158      	lsls	r0, r3, #5
    3602:	4a64      	ldr	r2, [pc, #400]	; (3794 <usb_device_endpoint_set_config+0x23c>)
    3604:	1812      	adds	r2, r2, r0
    3606:	6850      	ldr	r0, [r2, #4]
    3608:	0040      	lsls	r0, r0, #1
    360a:	0840      	lsrs	r0, r0, #1
    360c:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    360e:	6950      	ldr	r0, [r2, #20]
    3610:	0040      	lsls	r0, r0, #1
    3612:	0840      	lsrs	r0, r0, #1
    3614:	6150      	str	r0, [r2, #20]
    3616:	e7de      	b.n	35d6 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3618:	2c00      	cmp	r4, #0
    361a:	db35      	blt.n	3688 <usb_device_endpoint_set_config+0x130>
    361c:	015d      	lsls	r5, r3, #5
    361e:	6802      	ldr	r2, [r0, #0]
    3620:	4694      	mov	ip, r2
    3622:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3624:	2280      	movs	r2, #128	; 0x80
    3626:	0052      	lsls	r2, r2, #1
    3628:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    362a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    362c:	0776      	lsls	r6, r6, #29
    362e:	d129      	bne.n	3684 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3630:	2680      	movs	r6, #128	; 0x80
    3632:	0076      	lsls	r6, r6, #1
    3634:	5daa      	ldrb	r2, [r5, r6]
    3636:	2702      	movs	r7, #2
    3638:	433a      	orrs	r2, r7
    363a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    363c:	6802      	ldr	r2, [r0, #0]
    363e:	0018      	movs	r0, r3
    3640:	3008      	adds	r0, #8
    3642:	0140      	lsls	r0, r0, #5
    3644:	1812      	adds	r2, r2, r0
    3646:	2040      	movs	r0, #64	; 0x40
    3648:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    364a:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    364c:	784f      	ldrb	r7, [r1, #1]
    364e:	005d      	lsls	r5, r3, #1
    3650:	18ad      	adds	r5, r5, r2
    3652:	012d      	lsls	r5, r5, #4
    3654:	4e4f      	ldr	r6, [pc, #316]	; (3794 <usb_device_endpoint_set_config+0x23c>)
    3656:	1975      	adds	r5, r6, r5
    3658:	6868      	ldr	r0, [r5, #4]
    365a:	2407      	movs	r4, #7
    365c:	403c      	ands	r4, r7
    365e:	0724      	lsls	r4, r4, #28
    3660:	4e4d      	ldr	r6, [pc, #308]	; (3798 <usb_device_endpoint_set_config+0x240>)
    3662:	4030      	ands	r0, r6
    3664:	4320      	orrs	r0, r4
    3666:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    3668:	7889      	ldrb	r1, [r1, #2]
    366a:	2900      	cmp	r1, #0
    366c:	d000      	beq.n	3670 <usb_device_endpoint_set_config+0x118>
    366e:	e088      	b.n	3782 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3670:	005b      	lsls	r3, r3, #1
    3672:	189b      	adds	r3, r3, r2
    3674:	011b      	lsls	r3, r3, #4
    3676:	4a47      	ldr	r2, [pc, #284]	; (3794 <usb_device_endpoint_set_config+0x23c>)
    3678:	18d3      	adds	r3, r2, r3
    367a:	685a      	ldr	r2, [r3, #4]
    367c:	0052      	lsls	r2, r2, #1
    367e:	0852      	lsrs	r2, r2, #1
    3680:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3682:	2200      	movs	r2, #0
}
    3684:	0010      	movs	r0, r2
    3686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3688:	015d      	lsls	r5, r3, #5
    368a:	6802      	ldr	r2, [r0, #0]
    368c:	4694      	mov	ip, r2
    368e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3690:	2280      	movs	r2, #128	; 0x80
    3692:	0052      	lsls	r2, r2, #1
    3694:	5caf      	ldrb	r7, [r5, r2]
    3696:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3698:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    369a:	4237      	tst	r7, r6
    369c:	d1f2      	bne.n	3684 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    369e:	3690      	adds	r6, #144	; 0x90
    36a0:	5daa      	ldrb	r2, [r5, r6]
    36a2:	2720      	movs	r7, #32
    36a4:	433a      	orrs	r2, r7
    36a6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    36a8:	6802      	ldr	r2, [r0, #0]
    36aa:	0018      	movs	r0, r3
    36ac:	3008      	adds	r0, #8
    36ae:	0140      	lsls	r0, r0, #5
    36b0:	1812      	adds	r2, r2, r0
    36b2:	2080      	movs	r0, #128	; 0x80
    36b4:	7110      	strb	r0, [r2, #4]
    36b6:	e7c8      	b.n	364a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    36b8:	2c00      	cmp	r4, #0
    36ba:	db17      	blt.n	36ec <usb_device_endpoint_set_config+0x194>
    36bc:	015d      	lsls	r5, r3, #5
    36be:	6802      	ldr	r2, [r0, #0]
    36c0:	4694      	mov	ip, r2
    36c2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    36c4:	2280      	movs	r2, #128	; 0x80
    36c6:	0052      	lsls	r2, r2, #1
    36c8:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    36ca:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    36cc:	0776      	lsls	r6, r6, #29
    36ce:	d1d9      	bne.n	3684 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    36d0:	2680      	movs	r6, #128	; 0x80
    36d2:	0076      	lsls	r6, r6, #1
    36d4:	5daa      	ldrb	r2, [r5, r6]
    36d6:	2703      	movs	r7, #3
    36d8:	433a      	orrs	r2, r7
    36da:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    36dc:	6802      	ldr	r2, [r0, #0]
    36de:	0018      	movs	r0, r3
    36e0:	3008      	adds	r0, #8
    36e2:	0140      	lsls	r0, r0, #5
    36e4:	1812      	adds	r2, r2, r0
    36e6:	2040      	movs	r0, #64	; 0x40
    36e8:	7150      	strb	r0, [r2, #5]
    36ea:	e7ae      	b.n	364a <usb_device_endpoint_set_config+0xf2>
    36ec:	015d      	lsls	r5, r3, #5
    36ee:	6802      	ldr	r2, [r0, #0]
    36f0:	4694      	mov	ip, r2
    36f2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    36f4:	2280      	movs	r2, #128	; 0x80
    36f6:	0052      	lsls	r2, r2, #1
    36f8:	5caf      	ldrb	r7, [r5, r2]
    36fa:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    36fc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    36fe:	4237      	tst	r7, r6
    3700:	d1c0      	bne.n	3684 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3702:	3690      	adds	r6, #144	; 0x90
    3704:	5daa      	ldrb	r2, [r5, r6]
    3706:	2730      	movs	r7, #48	; 0x30
    3708:	433a      	orrs	r2, r7
    370a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    370c:	6802      	ldr	r2, [r0, #0]
    370e:	0018      	movs	r0, r3
    3710:	3008      	adds	r0, #8
    3712:	0140      	lsls	r0, r0, #5
    3714:	1812      	adds	r2, r2, r0
    3716:	2080      	movs	r0, #128	; 0x80
    3718:	7110      	strb	r0, [r2, #4]
    371a:	e796      	b.n	364a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    371c:	2c00      	cmp	r4, #0
    371e:	db17      	blt.n	3750 <usb_device_endpoint_set_config+0x1f8>
    3720:	015d      	lsls	r5, r3, #5
    3722:	6802      	ldr	r2, [r0, #0]
    3724:	4694      	mov	ip, r2
    3726:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3728:	2280      	movs	r2, #128	; 0x80
    372a:	0052      	lsls	r2, r2, #1
    372c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    372e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3730:	0776      	lsls	r6, r6, #29
    3732:	d1a7      	bne.n	3684 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    3734:	2680      	movs	r6, #128	; 0x80
    3736:	0076      	lsls	r6, r6, #1
    3738:	5daa      	ldrb	r2, [r5, r6]
    373a:	2704      	movs	r7, #4
    373c:	433a      	orrs	r2, r7
    373e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3740:	6802      	ldr	r2, [r0, #0]
    3742:	0018      	movs	r0, r3
    3744:	3008      	adds	r0, #8
    3746:	0140      	lsls	r0, r0, #5
    3748:	1812      	adds	r2, r2, r0
    374a:	2040      	movs	r0, #64	; 0x40
    374c:	7150      	strb	r0, [r2, #5]
    374e:	e77c      	b.n	364a <usb_device_endpoint_set_config+0xf2>
    3750:	015d      	lsls	r5, r3, #5
    3752:	6802      	ldr	r2, [r0, #0]
    3754:	4694      	mov	ip, r2
    3756:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3758:	2280      	movs	r2, #128	; 0x80
    375a:	0052      	lsls	r2, r2, #1
    375c:	5caf      	ldrb	r7, [r5, r2]
    375e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3760:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3762:	4237      	tst	r7, r6
    3764:	d000      	beq.n	3768 <usb_device_endpoint_set_config+0x210>
    3766:	e78d      	b.n	3684 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    3768:	3690      	adds	r6, #144	; 0x90
    376a:	5daa      	ldrb	r2, [r5, r6]
    376c:	2740      	movs	r7, #64	; 0x40
    376e:	433a      	orrs	r2, r7
    3770:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3772:	6802      	ldr	r2, [r0, #0]
    3774:	0018      	movs	r0, r3
    3776:	3008      	adds	r0, #8
    3778:	0140      	lsls	r0, r0, #5
    377a:	1812      	adds	r2, r2, r0
    377c:	2080      	movs	r0, #128	; 0x80
    377e:	7110      	strb	r0, [r2, #4]
    3780:	e763      	b.n	364a <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3782:	6869      	ldr	r1, [r5, #4]
    3784:	2380      	movs	r3, #128	; 0x80
    3786:	061b      	lsls	r3, r3, #24
    3788:	430b      	orrs	r3, r1
    378a:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    378c:	2200      	movs	r2, #0
    378e:	e779      	b.n	3684 <usb_device_endpoint_set_config+0x12c>
    3790:	000048c0 	.word	0x000048c0
    3794:	20000588 	.word	0x20000588
    3798:	8fffffff 	.word	0x8fffffff

0000379c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    379c:	230f      	movs	r3, #15
    379e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    37a0:	b249      	sxtb	r1, r1
    37a2:	2900      	cmp	r1, #0
    37a4:	db0a      	blt.n	37bc <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    37a6:	3308      	adds	r3, #8
    37a8:	015b      	lsls	r3, r3, #5
    37aa:	6802      	ldr	r2, [r0, #0]
    37ac:	18d2      	adds	r2, r2, r3
    37ae:	2140      	movs	r1, #64	; 0x40
    37b0:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    37b2:	6802      	ldr	r2, [r0, #0]
    37b4:	18d3      	adds	r3, r2, r3
    37b6:	2201      	movs	r2, #1
    37b8:	71da      	strb	r2, [r3, #7]
	}
}
    37ba:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    37bc:	3308      	adds	r3, #8
    37be:	015b      	lsls	r3, r3, #5
    37c0:	6802      	ldr	r2, [r0, #0]
    37c2:	18d2      	adds	r2, r2, r3
    37c4:	2180      	movs	r1, #128	; 0x80
    37c6:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    37c8:	6802      	ldr	r2, [r0, #0]
    37ca:	18d3      	adds	r3, r2, r3
    37cc:	2202      	movs	r2, #2
    37ce:	71da      	strb	r2, [r3, #7]
    37d0:	e7f3      	b.n	37ba <usb_device_endpoint_abort_job+0x1e>

000037d2 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    37d2:	230f      	movs	r3, #15
    37d4:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    37d6:	b249      	sxtb	r1, r1
    37d8:	2900      	cmp	r1, #0
    37da:	db07      	blt.n	37ec <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    37dc:	6802      	ldr	r2, [r0, #0]
    37de:	3308      	adds	r3, #8
    37e0:	015b      	lsls	r3, r3, #5
    37e2:	18d3      	adds	r3, r2, r3
    37e4:	7998      	ldrb	r0, [r3, #6]
    37e6:	06c0      	lsls	r0, r0, #27
    37e8:	0fc0      	lsrs	r0, r0, #31
	}
}
    37ea:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    37ec:	6802      	ldr	r2, [r0, #0]
    37ee:	3308      	adds	r3, #8
    37f0:	015b      	lsls	r3, r3, #5
    37f2:	18d3      	adds	r3, r2, r3
    37f4:	7998      	ldrb	r0, [r3, #6]
    37f6:	0680      	lsls	r0, r0, #26
    37f8:	0fc0      	lsrs	r0, r0, #31
    37fa:	e7f6      	b.n	37ea <usb_device_endpoint_is_halted+0x18>

000037fc <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    37fc:	230f      	movs	r3, #15
    37fe:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3800:	b249      	sxtb	r1, r1
    3802:	2900      	cmp	r1, #0
    3804:	db06      	blt.n	3814 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    3806:	6802      	ldr	r2, [r0, #0]
    3808:	3308      	adds	r3, #8
    380a:	015b      	lsls	r3, r3, #5
    380c:	18d3      	adds	r3, r2, r3
    380e:	2210      	movs	r2, #16
    3810:	715a      	strb	r2, [r3, #5]
	}
}
    3812:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3814:	6802      	ldr	r2, [r0, #0]
    3816:	3308      	adds	r3, #8
    3818:	015b      	lsls	r3, r3, #5
    381a:	18d3      	adds	r3, r2, r3
    381c:	2220      	movs	r2, #32
    381e:	715a      	strb	r2, [r3, #5]
    3820:	e7f7      	b.n	3812 <usb_device_endpoint_set_halt+0x16>

00003822 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    3822:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3824:	230f      	movs	r3, #15
    3826:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3828:	b249      	sxtb	r1, r1
    382a:	2900      	cmp	r1, #0
    382c:	db1d      	blt.n	386a <usb_device_endpoint_clear_halt+0x48>
    382e:	0159      	lsls	r1, r3, #5
    3830:	6802      	ldr	r2, [r0, #0]
    3832:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    3834:	2483      	movs	r4, #131	; 0x83
    3836:	0064      	lsls	r4, r4, #1
    3838:	5d14      	ldrb	r4, [r2, r4]
    383a:	06e4      	lsls	r4, r4, #27
    383c:	d514      	bpl.n	3868 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    383e:	2510      	movs	r5, #16
    3840:	2482      	movs	r4, #130	; 0x82
    3842:	0064      	lsls	r4, r4, #1
    3844:	5515      	strb	r5, [r2, r4]
    3846:	6802      	ldr	r2, [r0, #0]
    3848:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    384a:	2108      	movs	r1, #8
    384c:	31ff      	adds	r1, #255	; 0xff
    384e:	5c51      	ldrb	r1, [r2, r1]
    3850:	0689      	lsls	r1, r1, #26
    3852:	d509      	bpl.n	3868 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3854:	3ce4      	subs	r4, #228	; 0xe4
    3856:	2108      	movs	r1, #8
    3858:	31ff      	adds	r1, #255	; 0xff
    385a:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    385c:	6802      	ldr	r2, [r0, #0]
    385e:	3308      	adds	r3, #8
    3860:	015b      	lsls	r3, r3, #5
    3862:	18d3      	adds	r3, r2, r3
    3864:	2201      	movs	r2, #1
    3866:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    3868:	bd30      	pop	{r4, r5, pc}
    386a:	0159      	lsls	r1, r3, #5
    386c:	6802      	ldr	r2, [r0, #0]
    386e:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3870:	2483      	movs	r4, #131	; 0x83
    3872:	0064      	lsls	r4, r4, #1
    3874:	5d14      	ldrb	r4, [r2, r4]
    3876:	06a4      	lsls	r4, r4, #26
    3878:	d5f6      	bpl.n	3868 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    387a:	2520      	movs	r5, #32
    387c:	2482      	movs	r4, #130	; 0x82
    387e:	0064      	lsls	r4, r4, #1
    3880:	5515      	strb	r5, [r2, r4]
    3882:	6802      	ldr	r2, [r0, #0]
    3884:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3886:	2108      	movs	r1, #8
    3888:	31ff      	adds	r1, #255	; 0xff
    388a:	5c51      	ldrb	r1, [r2, r1]
    388c:	0649      	lsls	r1, r1, #25
    388e:	d5eb      	bpl.n	3868 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3890:	3cc4      	subs	r4, #196	; 0xc4
    3892:	2108      	movs	r1, #8
    3894:	31ff      	adds	r1, #255	; 0xff
    3896:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    3898:	6802      	ldr	r2, [r0, #0]
    389a:	3308      	adds	r3, #8
    389c:	015b      	lsls	r3, r3, #5
    389e:	18d3      	adds	r3, r2, r3
    38a0:	2202      	movs	r2, #2
    38a2:	711a      	strb	r2, [r3, #4]
    38a4:	e7e0      	b.n	3868 <usb_device_endpoint_clear_halt+0x46>
	...

000038a8 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    38a8:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    38aa:	000c      	movs	r4, r1
    38ac:	3408      	adds	r4, #8
    38ae:	0164      	lsls	r4, r4, #5
    38b0:	6805      	ldr	r5, [r0, #0]
    38b2:	5d64      	ldrb	r4, [r4, r5]
    38b4:	0664      	lsls	r4, r4, #25
    38b6:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    38b8:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    38ba:	2c00      	cmp	r4, #0
    38bc:	d101      	bne.n	38c2 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    38be:	0028      	movs	r0, r5
    38c0:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    38c2:	014c      	lsls	r4, r1, #5
    38c4:	4d0b      	ldr	r5, [pc, #44]	; (38f4 <usb_device_endpoint_write_buffer_job+0x4c>)
    38c6:	192d      	adds	r5, r5, r4
    38c8:	002c      	movs	r4, r5
    38ca:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    38cc:	696a      	ldr	r2, [r5, #20]
    38ce:	4d0a      	ldr	r5, [pc, #40]	; (38f8 <usb_device_endpoint_write_buffer_job+0x50>)
    38d0:	402a      	ands	r2, r5
    38d2:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    38d4:	6962      	ldr	r2, [r4, #20]
    38d6:	049b      	lsls	r3, r3, #18
    38d8:	0c9b      	lsrs	r3, r3, #18
    38da:	0b92      	lsrs	r2, r2, #14
    38dc:	0392      	lsls	r2, r2, #14
    38de:	4313      	orrs	r3, r2
    38e0:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    38e2:	6803      	ldr	r3, [r0, #0]
    38e4:	3108      	adds	r1, #8
    38e6:	0149      	lsls	r1, r1, #5
    38e8:	1859      	adds	r1, r3, r1
    38ea:	2380      	movs	r3, #128	; 0x80
    38ec:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    38ee:	2500      	movs	r5, #0
    38f0:	e7e5      	b.n	38be <usb_device_endpoint_write_buffer_job+0x16>
    38f2:	46c0      	nop			; (mov r8, r8)
    38f4:	20000588 	.word	0x20000588
    38f8:	f0003fff 	.word	0xf0003fff

000038fc <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    38fc:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    38fe:	000c      	movs	r4, r1
    3900:	3408      	adds	r4, #8
    3902:	0164      	lsls	r4, r4, #5
    3904:	6805      	ldr	r5, [r0, #0]
    3906:	5d64      	ldrb	r4, [r4, r5]
    3908:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    390a:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    390c:	2c00      	cmp	r4, #0
    390e:	d101      	bne.n	3914 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    3910:	0028      	movs	r0, r5
    3912:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3914:	4c0b      	ldr	r4, [pc, #44]	; (3944 <usb_device_endpoint_read_buffer_job+0x48>)
    3916:	014d      	lsls	r5, r1, #5
    3918:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    391a:	1962      	adds	r2, r4, r5
    391c:	6854      	ldr	r4, [r2, #4]
    391e:	049b      	lsls	r3, r3, #18
    3920:	091b      	lsrs	r3, r3, #4
    3922:	4d09      	ldr	r5, [pc, #36]	; (3948 <usb_device_endpoint_read_buffer_job+0x4c>)
    3924:	402c      	ands	r4, r5
    3926:	4323      	orrs	r3, r4
    3928:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    392a:	6853      	ldr	r3, [r2, #4]
    392c:	0b9b      	lsrs	r3, r3, #14
    392e:	039b      	lsls	r3, r3, #14
    3930:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3932:	6803      	ldr	r3, [r0, #0]
    3934:	3108      	adds	r1, #8
    3936:	0149      	lsls	r1, r1, #5
    3938:	1859      	adds	r1, r3, r1
    393a:	2340      	movs	r3, #64	; 0x40
    393c:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    393e:	2500      	movs	r5, #0
    3940:	e7e6      	b.n	3910 <usb_device_endpoint_read_buffer_job+0x14>
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	20000588 	.word	0x20000588
    3948:	f0003fff 	.word	0xf0003fff

0000394c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    394c:	4b09      	ldr	r3, [pc, #36]	; (3974 <usb_device_endpoint_setup_buffer_job+0x28>)
    394e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3950:	685a      	ldr	r2, [r3, #4]
    3952:	4909      	ldr	r1, [pc, #36]	; (3978 <usb_device_endpoint_setup_buffer_job+0x2c>)
    3954:	4011      	ands	r1, r2
    3956:	2280      	movs	r2, #128	; 0x80
    3958:	0292      	lsls	r2, r2, #10
    395a:	430a      	orrs	r2, r1
    395c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    395e:	685a      	ldr	r2, [r3, #4]
    3960:	0b92      	lsrs	r2, r2, #14
    3962:	0392      	lsls	r2, r2, #14
    3964:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3966:	6802      	ldr	r2, [r0, #0]
    3968:	2140      	movs	r1, #64	; 0x40
    396a:	2382      	movs	r3, #130	; 0x82
    396c:	005b      	lsls	r3, r3, #1
    396e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    3970:	2000      	movs	r0, #0
    3972:	4770      	bx	lr
    3974:	20000588 	.word	0x20000588
    3978:	f0003fff 	.word	0xf0003fff

0000397c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    397c:	6802      	ldr	r2, [r0, #0]
    397e:	7813      	ldrb	r3, [r2, #0]
    3980:	2102      	movs	r1, #2
    3982:	430b      	orrs	r3, r1
    3984:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3986:	6802      	ldr	r2, [r0, #0]
    3988:	7893      	ldrb	r3, [r2, #2]
    398a:	2b02      	cmp	r3, #2
    398c:	d0fc      	beq.n	3988 <usb_enable+0xc>
}
    398e:	4770      	bx	lr

00003990 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3990:	b5f0      	push	{r4, r5, r6, r7, lr}
    3992:	46de      	mov	lr, fp
    3994:	4657      	mov	r7, sl
    3996:	464e      	mov	r6, r9
    3998:	4645      	mov	r5, r8
    399a:	b5e0      	push	{r5, r6, r7, lr}
    399c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    399e:	4bc4      	ldr	r3, [pc, #784]	; (3cb0 <USB_Handler+0x320>)
    39a0:	681f      	ldr	r7, [r3, #0]
    39a2:	683d      	ldr	r5, [r7, #0]
    39a4:	782b      	ldrb	r3, [r5, #0]
    39a6:	09db      	lsrs	r3, r3, #7
    39a8:	d114      	bne.n	39d4 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    39aa:	8c2e      	ldrh	r6, [r5, #32]
    39ac:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    39ae:	2e00      	cmp	r6, #0
    39b0:	d000      	beq.n	39b4 <USB_Handler+0x24>
    39b2:	e22d      	b.n	3e10 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    39b4:	8bae      	ldrh	r6, [r5, #28]
    39b6:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    39b8:	23ab      	movs	r3, #171	; 0xab
    39ba:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    39bc:	5afb      	ldrh	r3, [r7, r3]
    39be:	22aa      	movs	r2, #170	; 0xaa
    39c0:	0052      	lsls	r2, r2, #1
    39c2:	5abd      	ldrh	r5, [r7, r2]
    39c4:	401d      	ands	r5, r3
    39c6:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    39c8:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    39ca:	4fba      	ldr	r7, [pc, #744]	; (3cb4 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    39cc:	4bb8      	ldr	r3, [pc, #736]	; (3cb0 <USB_Handler+0x320>)
    39ce:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    39d0:	4698      	mov	r8, r3
    39d2:	e208      	b.n	3de6 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    39d4:	8c2b      	ldrh	r3, [r5, #32]
    39d6:	b29b      	uxth	r3, r3
    39d8:	2b00      	cmp	r3, #0
    39da:	d100      	bne.n	39de <USB_Handler+0x4e>
    39dc:	e13d      	b.n	3c5a <USB_Handler+0x2ca>
    39de:	8c28      	ldrh	r0, [r5, #32]
    39e0:	b280      	uxth	r0, r0
    39e2:	4bb5      	ldr	r3, [pc, #724]	; (3cb8 <USB_Handler+0x328>)
    39e4:	4798      	blx	r3
    39e6:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    39e8:	281f      	cmp	r0, #31
    39ea:	d900      	bls.n	39ee <USB_Handler+0x5e>
    39ec:	e135      	b.n	3c5a <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    39ee:	0003      	movs	r3, r0
    39f0:	3308      	adds	r3, #8
    39f2:	015b      	lsls	r3, r3, #5
    39f4:	18ed      	adds	r5, r5, r3
    39f6:	79ed      	ldrb	r5, [r5, #7]
    39f8:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    39fa:	07ab      	lsls	r3, r5, #30
    39fc:	d041      	beq.n	3a82 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    39fe:	4aaf      	ldr	r2, [pc, #700]	; (3cbc <USB_Handler+0x32c>)
    3a00:	2301      	movs	r3, #1
    3a02:	4083      	lsls	r3, r0
    3a04:	6811      	ldr	r1, [r2, #0]
    3a06:	4399      	bics	r1, r3
    3a08:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a0a:	0003      	movs	r3, r0
    3a0c:	3308      	adds	r3, #8
    3a0e:	015b      	lsls	r3, r3, #5
    3a10:	683a      	ldr	r2, [r7, #0]
    3a12:	4694      	mov	ip, r2
    3a14:	4463      	add	r3, ip
    3a16:	2203      	movs	r2, #3
    3a18:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a1a:	183b      	adds	r3, r7, r0
    3a1c:	33ae      	adds	r3, #174	; 0xae
    3a1e:	781b      	ldrb	r3, [r3, #0]
    3a20:	07db      	lsls	r3, r3, #31
    3a22:	d52e      	bpl.n	3a82 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    3a24:	4ba6      	ldr	r3, [pc, #664]	; (3cc0 <USB_Handler+0x330>)
    3a26:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3a28:	683a      	ldr	r2, [r7, #0]
    3a2a:	0003      	movs	r3, r0
    3a2c:	3308      	adds	r3, #8
    3a2e:	015b      	lsls	r3, r3, #5
    3a30:	5c9b      	ldrb	r3, [r3, r2]
    3a32:	079b      	lsls	r3, r3, #30
    3a34:	0f9b      	lsrs	r3, r3, #30
    3a36:	2b01      	cmp	r3, #1
    3a38:	d100      	bne.n	3a3c <USB_Handler+0xac>
    3a3a:	e094      	b.n	3b66 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3a3c:	0142      	lsls	r2, r0, #5
    3a3e:	4ba1      	ldr	r3, [pc, #644]	; (3cc4 <USB_Handler+0x334>)
    3a40:	189b      	adds	r3, r3, r2
    3a42:	685a      	ldr	r2, [r3, #4]
    3a44:	0112      	lsls	r2, r2, #4
    3a46:	0c92      	lsrs	r2, r2, #18
    3a48:	b290      	uxth	r0, r2
    3a4a:	499d      	ldr	r1, [pc, #628]	; (3cc0 <USB_Handler+0x330>)
    3a4c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3a4e:	685a      	ldr	r2, [r3, #4]
    3a50:	0492      	lsls	r2, r2, #18
    3a52:	0c92      	lsrs	r2, r2, #18
    3a54:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3a56:	685a      	ldr	r2, [r3, #4]
    3a58:	499b      	ldr	r1, [pc, #620]	; (3cc8 <USB_Handler+0x338>)
    3a5a:	400a      	ands	r2, r1
    3a5c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3a5e:	2800      	cmp	r0, #0
    3a60:	d107      	bne.n	3a72 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3a62:	0162      	lsls	r2, r4, #5
    3a64:	4b97      	ldr	r3, [pc, #604]	; (3cc4 <USB_Handler+0x334>)
    3a66:	189b      	adds	r3, r3, r2
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	049b      	lsls	r3, r3, #18
    3a6c:	0c9b      	lsrs	r3, r3, #18
    3a6e:	4a94      	ldr	r2, [pc, #592]	; (3cc0 <USB_Handler+0x330>)
    3a70:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    3a72:	4b8f      	ldr	r3, [pc, #572]	; (3cb0 <USB_Handler+0x320>)
    3a74:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3a76:	1ca3      	adds	r3, r4, #2
    3a78:	011b      	lsls	r3, r3, #4
    3a7a:	18c3      	adds	r3, r0, r3
    3a7c:	685b      	ldr	r3, [r3, #4]
    3a7e:	4990      	ldr	r1, [pc, #576]	; (3cc0 <USB_Handler+0x330>)
    3a80:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3a82:	076b      	lsls	r3, r5, #29
    3a84:	d51f      	bpl.n	3ac6 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3a86:	4b8a      	ldr	r3, [pc, #552]	; (3cb0 <USB_Handler+0x320>)
    3a88:	6818      	ldr	r0, [r3, #0]
    3a8a:	6802      	ldr	r2, [r0, #0]
    3a8c:	0023      	movs	r3, r4
    3a8e:	3308      	adds	r3, #8
    3a90:	015b      	lsls	r3, r3, #5
    3a92:	5c9b      	ldrb	r3, [r3, r2]
    3a94:	069b      	lsls	r3, r3, #26
    3a96:	0f5b      	lsrs	r3, r3, #29
    3a98:	2b02      	cmp	r3, #2
    3a9a:	d075      	beq.n	3b88 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3a9c:	0023      	movs	r3, r4
    3a9e:	3308      	adds	r3, #8
    3aa0:	015b      	lsls	r3, r3, #5
    3aa2:	5c9b      	ldrb	r3, [r3, r2]
    3aa4:	069b      	lsls	r3, r3, #26
    3aa6:	0f5b      	lsrs	r3, r3, #29
    3aa8:	2b03      	cmp	r3, #3
    3aaa:	d100      	bne.n	3aae <USB_Handler+0x11e>
    3aac:	e09e      	b.n	3bec <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3aae:	0162      	lsls	r2, r4, #5
    3ab0:	4b84      	ldr	r3, [pc, #528]	; (3cc4 <USB_Handler+0x334>)
    3ab2:	189b      	adds	r3, r3, r2
    3ab4:	2200      	movs	r2, #0
    3ab6:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3ab8:	6803      	ldr	r3, [r0, #0]
    3aba:	0022      	movs	r2, r4
    3abc:	3208      	adds	r2, #8
    3abe:	0152      	lsls	r2, r2, #5
    3ac0:	189b      	adds	r3, r3, r2
    3ac2:	2204      	movs	r2, #4
    3ac4:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3ac6:	072b      	lsls	r3, r5, #28
    3ac8:	d515      	bpl.n	3af6 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3aca:	4a7c      	ldr	r2, [pc, #496]	; (3cbc <USB_Handler+0x32c>)
    3acc:	2301      	movs	r3, #1
    3ace:	40a3      	lsls	r3, r4
    3ad0:	6811      	ldr	r1, [r2, #0]
    3ad2:	4399      	bics	r1, r3
    3ad4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3ad6:	4b76      	ldr	r3, [pc, #472]	; (3cb0 <USB_Handler+0x320>)
    3ad8:	6818      	ldr	r0, [r3, #0]
    3ada:	0023      	movs	r3, r4
    3adc:	3308      	adds	r3, #8
    3ade:	015b      	lsls	r3, r3, #5
    3ae0:	6802      	ldr	r2, [r0, #0]
    3ae2:	4694      	mov	ip, r2
    3ae4:	4463      	add	r3, ip
    3ae6:	2208      	movs	r2, #8
    3ae8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3aea:	1903      	adds	r3, r0, r4
    3aec:	33ae      	adds	r3, #174	; 0xae
    3aee:	781b      	ldrb	r3, [r3, #0]
    3af0:	079b      	lsls	r3, r3, #30
    3af2:	d500      	bpl.n	3af6 <USB_Handler+0x166>
    3af4:	e094      	b.n	3c20 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3af6:	06eb      	lsls	r3, r5, #27
    3af8:	d515      	bpl.n	3b26 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3afa:	4a70      	ldr	r2, [pc, #448]	; (3cbc <USB_Handler+0x32c>)
    3afc:	2301      	movs	r3, #1
    3afe:	40a3      	lsls	r3, r4
    3b00:	6811      	ldr	r1, [r2, #0]
    3b02:	4399      	bics	r1, r3
    3b04:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3b06:	4b6a      	ldr	r3, [pc, #424]	; (3cb0 <USB_Handler+0x320>)
    3b08:	6818      	ldr	r0, [r3, #0]
    3b0a:	0023      	movs	r3, r4
    3b0c:	3308      	adds	r3, #8
    3b0e:	015b      	lsls	r3, r3, #5
    3b10:	6802      	ldr	r2, [r0, #0]
    3b12:	4694      	mov	ip, r2
    3b14:	4463      	add	r3, ip
    3b16:	2210      	movs	r2, #16
    3b18:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3b1a:	1903      	adds	r3, r0, r4
    3b1c:	33ae      	adds	r3, #174	; 0xae
    3b1e:	781b      	ldrb	r3, [r3, #0]
    3b20:	075b      	lsls	r3, r3, #29
    3b22:	d500      	bpl.n	3b26 <USB_Handler+0x196>
    3b24:	e08a      	b.n	3c3c <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3b26:	06ab      	lsls	r3, r5, #26
    3b28:	d400      	bmi.n	3b2c <USB_Handler+0x19c>
    3b2a:	e12f      	b.n	3d8c <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3b2c:	4a63      	ldr	r2, [pc, #396]	; (3cbc <USB_Handler+0x32c>)
    3b2e:	2301      	movs	r3, #1
    3b30:	40a3      	lsls	r3, r4
    3b32:	6811      	ldr	r1, [r2, #0]
    3b34:	4399      	bics	r1, r3
    3b36:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3b38:	4b5d      	ldr	r3, [pc, #372]	; (3cb0 <USB_Handler+0x320>)
    3b3a:	6818      	ldr	r0, [r3, #0]
    3b3c:	0023      	movs	r3, r4
    3b3e:	3308      	adds	r3, #8
    3b40:	015b      	lsls	r3, r3, #5
    3b42:	6802      	ldr	r2, [r0, #0]
    3b44:	4694      	mov	ip, r2
    3b46:	4463      	add	r3, ip
    3b48:	2220      	movs	r2, #32
    3b4a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3b4c:	1903      	adds	r3, r0, r4
    3b4e:	33ae      	adds	r3, #174	; 0xae
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	071b      	lsls	r3, r3, #28
    3b54:	d400      	bmi.n	3b58 <USB_Handler+0x1c8>
    3b56:	e119      	b.n	3d8c <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    3b58:	4959      	ldr	r1, [pc, #356]	; (3cc0 <USB_Handler+0x330>)
    3b5a:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3b5c:	0124      	lsls	r4, r4, #4
    3b5e:	1904      	adds	r4, r0, r4
    3b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3b62:	4798      	blx	r3
    3b64:	e112      	b.n	3d8c <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3b66:	0142      	lsls	r2, r0, #5
    3b68:	4b56      	ldr	r3, [pc, #344]	; (3cc4 <USB_Handler+0x334>)
    3b6a:	189b      	adds	r3, r3, r2
    3b6c:	685a      	ldr	r2, [r3, #4]
    3b6e:	0492      	lsls	r2, r2, #18
    3b70:	0c92      	lsrs	r2, r2, #18
    3b72:	4953      	ldr	r1, [pc, #332]	; (3cc0 <USB_Handler+0x330>)
    3b74:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3b76:	685a      	ldr	r2, [r3, #4]
    3b78:	0112      	lsls	r2, r2, #4
    3b7a:	0c92      	lsrs	r2, r2, #18
    3b7c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3b7e:	685a      	ldr	r2, [r3, #4]
    3b80:	0b92      	lsrs	r2, r2, #14
    3b82:	0392      	lsls	r2, r2, #14
    3b84:	605a      	str	r2, [r3, #4]
    3b86:	e774      	b.n	3a72 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3b88:	0023      	movs	r3, r4
    3b8a:	3308      	adds	r3, #8
    3b8c:	015b      	lsls	r3, r3, #5
    3b8e:	5c9b      	ldrb	r3, [r3, r2]
    3b90:	079b      	lsls	r3, r3, #30
    3b92:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3b94:	2b01      	cmp	r3, #1
    3b96:	d181      	bne.n	3a9c <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3b98:	0161      	lsls	r1, r4, #5
    3b9a:	4b4a      	ldr	r3, [pc, #296]	; (3cc4 <USB_Handler+0x334>)
    3b9c:	185b      	adds	r3, r3, r1
    3b9e:	3308      	adds	r3, #8
    3ba0:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3ba2:	07db      	lsls	r3, r3, #31
    3ba4:	d400      	bmi.n	3ba8 <USB_Handler+0x218>
    3ba6:	e779      	b.n	3a9c <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    3ba8:	4a44      	ldr	r2, [pc, #272]	; (3cbc <USB_Handler+0x32c>)
    3baa:	2301      	movs	r3, #1
    3bac:	40a3      	lsls	r3, r4
    3bae:	6811      	ldr	r1, [r2, #0]
    3bb0:	4399      	bics	r1, r3
    3bb2:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3bb4:	0162      	lsls	r2, r4, #5
    3bb6:	4b43      	ldr	r3, [pc, #268]	; (3cc4 <USB_Handler+0x334>)
    3bb8:	189b      	adds	r3, r3, r2
    3bba:	2200      	movs	r2, #0
    3bbc:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3bbe:	0023      	movs	r3, r4
    3bc0:	3308      	adds	r3, #8
    3bc2:	015b      	lsls	r3, r3, #5
    3bc4:	6802      	ldr	r2, [r0, #0]
    3bc6:	4694      	mov	ip, r2
    3bc8:	4463      	add	r3, ip
    3bca:	2204      	movs	r2, #4
    3bcc:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3bce:	1903      	adds	r3, r0, r4
    3bd0:	33ae      	adds	r3, #174	; 0xae
    3bd2:	781b      	ldrb	r3, [r3, #0]
    3bd4:	079b      	lsls	r3, r3, #30
    3bd6:	d400      	bmi.n	3bda <USB_Handler+0x24a>
    3bd8:	e775      	b.n	3ac6 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    3bda:	4939      	ldr	r1, [pc, #228]	; (3cc0 <USB_Handler+0x330>)
    3bdc:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    3bde:	2310      	movs	r3, #16
    3be0:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3be2:	0123      	lsls	r3, r4, #4
    3be4:	18c3      	adds	r3, r0, r3
    3be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3be8:	4798      	blx	r3
    3bea:	e76c      	b.n	3ac6 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    3bec:	0023      	movs	r3, r4
    3bee:	3308      	adds	r3, #8
    3bf0:	015b      	lsls	r3, r3, #5
    3bf2:	5c9b      	ldrb	r3, [r3, r2]
    3bf4:	079b      	lsls	r3, r3, #30
    3bf6:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3bf8:	2b01      	cmp	r3, #1
    3bfa:	d000      	beq.n	3bfe <USB_Handler+0x26e>
    3bfc:	e757      	b.n	3aae <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3bfe:	0162      	lsls	r2, r4, #5
    3c00:	4b30      	ldr	r3, [pc, #192]	; (3cc4 <USB_Handler+0x334>)
    3c02:	189b      	adds	r3, r3, r2
    3c04:	2200      	movs	r2, #0
    3c06:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3c08:	0023      	movs	r3, r4
    3c0a:	3308      	adds	r3, #8
    3c0c:	015b      	lsls	r3, r3, #5
    3c0e:	6802      	ldr	r2, [r0, #0]
    3c10:	18d2      	adds	r2, r2, r3
    3c12:	2104      	movs	r1, #4
    3c14:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    3c16:	6802      	ldr	r2, [r0, #0]
    3c18:	18d3      	adds	r3, r2, r3
    3c1a:	2210      	movs	r2, #16
    3c1c:	715a      	strb	r2, [r3, #5]
    3c1e:	e752      	b.n	3ac6 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    3c20:	4927      	ldr	r1, [pc, #156]	; (3cc0 <USB_Handler+0x330>)
    3c22:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3c24:	0162      	lsls	r2, r4, #5
    3c26:	4b27      	ldr	r3, [pc, #156]	; (3cc4 <USB_Handler+0x334>)
    3c28:	189b      	adds	r3, r3, r2
    3c2a:	89db      	ldrh	r3, [r3, #14]
    3c2c:	221f      	movs	r2, #31
    3c2e:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3c30:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3c32:	0123      	lsls	r3, r4, #4
    3c34:	18c3      	adds	r3, r0, r3
    3c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c38:	4798      	blx	r3
    3c3a:	e75c      	b.n	3af6 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    3c3c:	4920      	ldr	r1, [pc, #128]	; (3cc0 <USB_Handler+0x330>)
    3c3e:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3c40:	0162      	lsls	r2, r4, #5
    3c42:	4b20      	ldr	r3, [pc, #128]	; (3cc4 <USB_Handler+0x334>)
    3c44:	189b      	adds	r3, r3, r2
    3c46:	685b      	ldr	r3, [r3, #4]
    3c48:	011b      	lsls	r3, r3, #4
    3c4a:	0c9b      	lsrs	r3, r3, #18
    3c4c:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3c4e:	0123      	lsls	r3, r4, #4
    3c50:	18c3      	adds	r3, r0, r3
    3c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c54:	2100      	movs	r1, #0
    3c56:	4798      	blx	r3
    3c58:	e765      	b.n	3b26 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3c5a:	8bac      	ldrh	r4, [r5, #28]
    3c5c:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3c5e:	0763      	lsls	r3, r4, #29
    3c60:	d538      	bpl.n	3cd4 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3c62:	2304      	movs	r3, #4
    3c64:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3c66:	4b15      	ldr	r3, [pc, #84]	; (3cbc <USB_Handler+0x32c>)
    3c68:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3c6a:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3c6c:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3c6e:	2610      	movs	r6, #16
    3c70:	e002      	b.n	3c78 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3c72:	3301      	adds	r3, #1
    3c74:	2b08      	cmp	r3, #8
    3c76:	d029      	beq.n	3ccc <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3c78:	0002      	movs	r2, r0
    3c7a:	409a      	lsls	r2, r3
    3c7c:	4215      	tst	r5, r2
    3c7e:	d0f8      	beq.n	3c72 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3c80:	6839      	ldr	r1, [r7, #0]
    3c82:	001a      	movs	r2, r3
    3c84:	3208      	adds	r2, #8
    3c86:	0152      	lsls	r2, r2, #5
    3c88:	5c52      	ldrb	r2, [r2, r1]
    3c8a:	0692      	lsls	r2, r2, #26
    3c8c:	0f52      	lsrs	r2, r2, #29
    3c8e:	2a03      	cmp	r2, #3
    3c90:	d1ef      	bne.n	3c72 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3c92:	001a      	movs	r2, r3
    3c94:	3208      	adds	r2, #8
    3c96:	0152      	lsls	r2, r2, #5
    3c98:	5c52      	ldrb	r2, [r2, r1]
    3c9a:	0792      	lsls	r2, r2, #30
    3c9c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3c9e:	2a01      	cmp	r2, #1
    3ca0:	d1e7      	bne.n	3c72 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3ca2:	001a      	movs	r2, r3
    3ca4:	3208      	adds	r2, #8
    3ca6:	0152      	lsls	r2, r2, #5
    3ca8:	1889      	adds	r1, r1, r2
    3caa:	710e      	strb	r6, [r1, #4]
    3cac:	e7e1      	b.n	3c72 <USB_Handler+0x2e2>
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	20000188 	.word	0x20000188
    3cb4:	000048d4 	.word	0x000048d4
    3cb8:	0000464d 	.word	0x0000464d
    3cbc:	20000198 	.word	0x20000198
    3cc0:	2000019c 	.word	0x2000019c
    3cc4:	20000588 	.word	0x20000588
    3cc8:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3ccc:	339d      	adds	r3, #157	; 0x9d
    3cce:	5cfb      	ldrb	r3, [r7, r3]
    3cd0:	07db      	lsls	r3, r3, #31
    3cd2:	d462      	bmi.n	3d9a <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    3cd4:	0723      	lsls	r3, r4, #28
    3cd6:	d50b      	bpl.n	3cf0 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    3cd8:	2200      	movs	r2, #0
    3cda:	4baf      	ldr	r3, [pc, #700]	; (3f98 <USB_Handler+0x608>)
    3cdc:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3cde:	4baf      	ldr	r3, [pc, #700]	; (3f9c <USB_Handler+0x60c>)
    3ce0:	6818      	ldr	r0, [r3, #0]
    3ce2:	2308      	movs	r3, #8
    3ce4:	6802      	ldr	r2, [r0, #0]
    3ce6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3ce8:	339d      	adds	r3, #157	; 0x9d
    3cea:	5cc3      	ldrb	r3, [r0, r3]
    3cec:	079b      	lsls	r3, r3, #30
    3cee:	d458      	bmi.n	3da2 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3cf0:	0663      	lsls	r3, r4, #25
    3cf2:	d508      	bpl.n	3d06 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3cf4:	4ba9      	ldr	r3, [pc, #676]	; (3f9c <USB_Handler+0x60c>)
    3cf6:	6818      	ldr	r0, [r3, #0]
    3cf8:	2340      	movs	r3, #64	; 0x40
    3cfa:	6802      	ldr	r2, [r0, #0]
    3cfc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3cfe:	3365      	adds	r3, #101	; 0x65
    3d00:	5cc3      	ldrb	r3, [r0, r3]
    3d02:	06db      	lsls	r3, r3, #27
    3d04:	d450      	bmi.n	3da8 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3d06:	06a3      	lsls	r3, r4, #26
    3d08:	d508      	bpl.n	3d1c <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3d0a:	4ba4      	ldr	r3, [pc, #656]	; (3f9c <USB_Handler+0x60c>)
    3d0c:	6818      	ldr	r0, [r3, #0]
    3d0e:	2320      	movs	r3, #32
    3d10:	6802      	ldr	r2, [r0, #0]
    3d12:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3d14:	3385      	adds	r3, #133	; 0x85
    3d16:	5cc3      	ldrb	r3, [r0, r3]
    3d18:	071b      	lsls	r3, r3, #28
    3d1a:	d448      	bmi.n	3dae <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3d1c:	06e3      	lsls	r3, r4, #27
    3d1e:	d508      	bpl.n	3d32 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3d20:	4b9e      	ldr	r3, [pc, #632]	; (3f9c <USB_Handler+0x60c>)
    3d22:	6818      	ldr	r0, [r3, #0]
    3d24:	2310      	movs	r3, #16
    3d26:	6802      	ldr	r2, [r0, #0]
    3d28:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3d2a:	3395      	adds	r3, #149	; 0x95
    3d2c:	5cc3      	ldrb	r3, [r0, r3]
    3d2e:	075b      	lsls	r3, r3, #29
    3d30:	d440      	bmi.n	3db4 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3d32:	0623      	lsls	r3, r4, #24
    3d34:	d50b      	bpl.n	3d4e <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    3d36:	2200      	movs	r2, #0
    3d38:	4b97      	ldr	r3, [pc, #604]	; (3f98 <USB_Handler+0x608>)
    3d3a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3d3c:	4b97      	ldr	r3, [pc, #604]	; (3f9c <USB_Handler+0x60c>)
    3d3e:	6818      	ldr	r0, [r3, #0]
    3d40:	2380      	movs	r3, #128	; 0x80
    3d42:	6802      	ldr	r2, [r0, #0]
    3d44:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3d46:	3325      	adds	r3, #37	; 0x25
    3d48:	5cc3      	ldrb	r3, [r0, r3]
    3d4a:	069b      	lsls	r3, r3, #26
    3d4c:	d435      	bmi.n	3dba <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3d4e:	05e3      	lsls	r3, r4, #23
    3d50:	d50c      	bpl.n	3d6c <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    3d52:	2200      	movs	r2, #0
    3d54:	4b90      	ldr	r3, [pc, #576]	; (3f98 <USB_Handler+0x608>)
    3d56:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3d58:	4b90      	ldr	r3, [pc, #576]	; (3f9c <USB_Handler+0x60c>)
    3d5a:	6818      	ldr	r0, [r3, #0]
    3d5c:	2380      	movs	r3, #128	; 0x80
    3d5e:	005b      	lsls	r3, r3, #1
    3d60:	6802      	ldr	r2, [r0, #0]
    3d62:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3d64:	3b5b      	subs	r3, #91	; 0x5b
    3d66:	5cc3      	ldrb	r3, [r0, r3]
    3d68:	065b      	lsls	r3, r3, #25
    3d6a:	d429      	bmi.n	3dc0 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3d6c:	05a3      	lsls	r3, r4, #22
    3d6e:	d50d      	bpl.n	3d8c <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    3d70:	2200      	movs	r2, #0
    3d72:	4b89      	ldr	r3, [pc, #548]	; (3f98 <USB_Handler+0x608>)
    3d74:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3d76:	4b89      	ldr	r3, [pc, #548]	; (3f9c <USB_Handler+0x60c>)
    3d78:	6818      	ldr	r0, [r3, #0]
    3d7a:	2380      	movs	r3, #128	; 0x80
    3d7c:	009b      	lsls	r3, r3, #2
    3d7e:	6802      	ldr	r2, [r0, #0]
    3d80:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3d82:	3b5c      	subs	r3, #92	; 0x5c
    3d84:	3bff      	subs	r3, #255	; 0xff
    3d86:	5cc3      	ldrb	r3, [r0, r3]
    3d88:	2b7f      	cmp	r3, #127	; 0x7f
    3d8a:	d81c      	bhi.n	3dc6 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3d8c:	b003      	add	sp, #12
    3d8e:	bc3c      	pop	{r2, r3, r4, r5}
    3d90:	4690      	mov	r8, r2
    3d92:	4699      	mov	r9, r3
    3d94:	46a2      	mov	sl, r4
    3d96:	46ab      	mov	fp, r5
    3d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3d9a:	687b      	ldr	r3, [r7, #4]
    3d9c:	0038      	movs	r0, r7
    3d9e:	4798      	blx	r3
    3da0:	e798      	b.n	3cd4 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3da2:	6883      	ldr	r3, [r0, #8]
    3da4:	4798      	blx	r3
    3da6:	e7a3      	b.n	3cf0 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3da8:	6943      	ldr	r3, [r0, #20]
    3daa:	4798      	blx	r3
    3dac:	e7ab      	b.n	3d06 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3dae:	6903      	ldr	r3, [r0, #16]
    3db0:	4798      	blx	r3
    3db2:	e7b3      	b.n	3d1c <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3db4:	68c3      	ldr	r3, [r0, #12]
    3db6:	4798      	blx	r3
    3db8:	e7bb      	b.n	3d32 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3dba:	6983      	ldr	r3, [r0, #24]
    3dbc:	4798      	blx	r3
    3dbe:	e7c6      	b.n	3d4e <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3dc0:	69c3      	ldr	r3, [r0, #28]
    3dc2:	4798      	blx	r3
    3dc4:	e7d2      	b.n	3d6c <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3dc6:	6a03      	ldr	r3, [r0, #32]
    3dc8:	4798      	blx	r3
    3dca:	e7df      	b.n	3d8c <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3dcc:	0023      	movs	r3, r4
    3dce:	332e      	adds	r3, #46	; 0x2e
    3dd0:	009b      	lsls	r3, r3, #2
    3dd2:	4642      	mov	r2, r8
    3dd4:	6812      	ldr	r2, [r2, #0]
    3dd6:	589b      	ldr	r3, [r3, r2]
    3dd8:	4971      	ldr	r1, [pc, #452]	; (3fa0 <USB_Handler+0x610>)
    3dda:	4642      	mov	r2, r8
    3ddc:	6810      	ldr	r0, [r2, #0]
    3dde:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3de0:	3401      	adds	r4, #1
    3de2:	2c07      	cmp	r4, #7
    3de4:	d0d2      	beq.n	3d8c <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    3de6:	0063      	lsls	r3, r4, #1
    3de8:	5bdb      	ldrh	r3, [r3, r7]
    3dea:	4233      	tst	r3, r6
    3dec:	d003      	beq.n	3df6 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3dee:	464a      	mov	r2, r9
    3df0:	6812      	ldr	r2, [r2, #0]
    3df2:	6812      	ldr	r2, [r2, #0]
    3df4:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    3df6:	422b      	tst	r3, r5
    3df8:	d0f2      	beq.n	3de0 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    3dfa:	2c06      	cmp	r4, #6
    3dfc:	d1e6      	bne.n	3dcc <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3dfe:	4b69      	ldr	r3, [pc, #420]	; (3fa4 <USB_Handler+0x614>)
    3e00:	891b      	ldrh	r3, [r3, #8]
    3e02:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3e04:	2280      	movs	r2, #128	; 0x80
    3e06:	0052      	lsls	r2, r2, #1
    3e08:	4013      	ands	r3, r2
    3e0a:	4a65      	ldr	r2, [pc, #404]	; (3fa0 <USB_Handler+0x610>)
    3e0c:	6013      	str	r3, [r2, #0]
    3e0e:	e7dd      	b.n	3dcc <USB_Handler+0x43c>
    3e10:	003c      	movs	r4, r7
    3e12:	3459      	adds	r4, #89	; 0x59
    3e14:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    3e16:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    3e18:	2201      	movs	r2, #1
    3e1a:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3e1c:	325f      	adds	r2, #95	; 0x5f
    3e1e:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3e20:	3a50      	subs	r2, #80	; 0x50
    3e22:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3e24:	3a0d      	subs	r2, #13
    3e26:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3e28:	46b8      	mov	r8, r7
    3e2a:	002f      	movs	r7, r5
    3e2c:	e0c3      	b.n	3fb6 <USB_Handler+0x626>
    3e2e:	002a      	movs	r2, r5
    3e30:	003d      	movs	r5, r7
    3e32:	4647      	mov	r7, r8
    3e34:	4690      	mov	r8, r2
    3e36:	015b      	lsls	r3, r3, #5
    3e38:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3e3a:	2308      	movs	r3, #8
    3e3c:	33ff      	adds	r3, #255	; 0xff
    3e3e:	5ceb      	ldrb	r3, [r5, r3]
    3e40:	065b      	lsls	r3, r3, #25
    3e42:	d515      	bpl.n	3e70 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3e44:	2240      	movs	r2, #64	; 0x40
    3e46:	2308      	movs	r3, #8
    3e48:	33ff      	adds	r3, #255	; 0xff
    3e4a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3e4c:	3b88      	subs	r3, #136	; 0x88
    3e4e:	3bff      	subs	r3, #255	; 0xff
    3e50:	4642      	mov	r2, r8
    3e52:	4313      	orrs	r3, r2
    3e54:	4a54      	ldr	r2, [pc, #336]	; (3fa8 <USB_Handler+0x618>)
    3e56:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3e58:	2360      	movs	r3, #96	; 0x60
    3e5a:	420b      	tst	r3, r1
    3e5c:	d096      	beq.n	3d8c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3e5e:	9b01      	ldr	r3, [sp, #4]
    3e60:	011b      	lsls	r3, r3, #4
    3e62:	18fb      	adds	r3, r7, r3
    3e64:	33e0      	adds	r3, #224	; 0xe0
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	494f      	ldr	r1, [pc, #316]	; (3fa8 <USB_Handler+0x618>)
    3e6a:	0038      	movs	r0, r7
    3e6c:	4798      	blx	r3
    3e6e:	e78d      	b.n	3d8c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3e70:	2308      	movs	r3, #8
    3e72:	33ff      	adds	r3, #255	; 0xff
    3e74:	5ceb      	ldrb	r3, [r5, r3]
    3e76:	069b      	lsls	r3, r3, #26
    3e78:	d5ee      	bpl.n	3e58 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3e7a:	2220      	movs	r2, #32
    3e7c:	2308      	movs	r3, #8
    3e7e:	33ff      	adds	r3, #255	; 0xff
    3e80:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3e82:	4b49      	ldr	r3, [pc, #292]	; (3fa8 <USB_Handler+0x618>)
    3e84:	4642      	mov	r2, r8
    3e86:	719a      	strb	r2, [r3, #6]
    3e88:	e7e6      	b.n	3e58 <USB_Handler+0x4c8>
    3e8a:	003d      	movs	r5, r7
    3e8c:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3e8e:	9a01      	ldr	r2, [sp, #4]
    3e90:	0013      	movs	r3, r2
    3e92:	3308      	adds	r3, #8
    3e94:	015b      	lsls	r3, r3, #5
    3e96:	18ed      	adds	r5, r5, r3
    3e98:	2310      	movs	r3, #16
    3e9a:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3e9c:	18bb      	adds	r3, r7, r2
    3e9e:	3361      	adds	r3, #97	; 0x61
    3ea0:	33ff      	adds	r3, #255	; 0xff
    3ea2:	781b      	ldrb	r3, [r3, #0]
    3ea4:	06db      	lsls	r3, r3, #27
    3ea6:	d400      	bmi.n	3eaa <USB_Handler+0x51a>
    3ea8:	e770      	b.n	3d8c <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3eaa:	0010      	movs	r0, r2
    3eac:	0152      	lsls	r2, r2, #5
    3eae:	4b3d      	ldr	r3, [pc, #244]	; (3fa4 <USB_Handler+0x614>)
    3eb0:	189b      	adds	r3, r3, r2
    3eb2:	685b      	ldr	r3, [r3, #4]
    3eb4:	049b      	lsls	r3, r3, #18
    3eb6:	0c9b      	lsrs	r3, r3, #18
    3eb8:	493b      	ldr	r1, [pc, #236]	; (3fa8 <USB_Handler+0x618>)
    3eba:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3ebc:	0103      	lsls	r3, r0, #4
    3ebe:	18fb      	adds	r3, r7, r3
    3ec0:	33dc      	adds	r3, #220	; 0xdc
    3ec2:	681b      	ldr	r3, [r3, #0]
    3ec4:	4640      	mov	r0, r8
    3ec6:	4798      	blx	r3
    3ec8:	e760      	b.n	3d8c <USB_Handler+0x3fc>
    3eca:	002a      	movs	r2, r5
    3ecc:	003d      	movs	r5, r7
    3ece:	4647      	mov	r7, r8
    3ed0:	4690      	mov	r8, r2
    3ed2:	015b      	lsls	r3, r3, #5
    3ed4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3ed6:	2308      	movs	r3, #8
    3ed8:	33ff      	adds	r3, #255	; 0xff
    3eda:	5ceb      	ldrb	r3, [r5, r3]
    3edc:	079b      	lsls	r3, r3, #30
    3ede:	d51e      	bpl.n	3f1e <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3ee0:	2202      	movs	r2, #2
    3ee2:	2308      	movs	r3, #8
    3ee4:	33ff      	adds	r3, #255	; 0xff
    3ee6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3ee8:	482f      	ldr	r0, [pc, #188]	; (3fa8 <USB_Handler+0x618>)
    3eea:	3b88      	subs	r3, #136	; 0x88
    3eec:	3bff      	subs	r3, #255	; 0xff
    3eee:	4642      	mov	r2, r8
    3ef0:	4313      	orrs	r3, r2
    3ef2:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3ef4:	9b01      	ldr	r3, [sp, #4]
    3ef6:	015a      	lsls	r2, r3, #5
    3ef8:	4b2a      	ldr	r3, [pc, #168]	; (3fa4 <USB_Handler+0x614>)
    3efa:	189b      	adds	r3, r3, r2
    3efc:	3310      	adds	r3, #16
    3efe:	685b      	ldr	r3, [r3, #4]
    3f00:	049b      	lsls	r3, r3, #18
    3f02:	0c9b      	lsrs	r3, r3, #18
    3f04:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3f06:	078b      	lsls	r3, r1, #30
    3f08:	d100      	bne.n	3f0c <USB_Handler+0x57c>
    3f0a:	e73f      	b.n	3d8c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3f0c:	9b01      	ldr	r3, [sp, #4]
    3f0e:	330d      	adds	r3, #13
    3f10:	011b      	lsls	r3, r3, #4
    3f12:	18fb      	adds	r3, r7, r3
    3f14:	685b      	ldr	r3, [r3, #4]
    3f16:	4924      	ldr	r1, [pc, #144]	; (3fa8 <USB_Handler+0x618>)
    3f18:	0038      	movs	r0, r7
    3f1a:	4798      	blx	r3
    3f1c:	e736      	b.n	3d8c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3f1e:	2308      	movs	r3, #8
    3f20:	33ff      	adds	r3, #255	; 0xff
    3f22:	5ceb      	ldrb	r3, [r5, r3]
    3f24:	07db      	lsls	r3, r3, #31
    3f26:	d5ee      	bpl.n	3f06 <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3f28:	2201      	movs	r2, #1
    3f2a:	2308      	movs	r3, #8
    3f2c:	33ff      	adds	r3, #255	; 0xff
    3f2e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3f30:	481d      	ldr	r0, [pc, #116]	; (3fa8 <USB_Handler+0x618>)
    3f32:	4643      	mov	r3, r8
    3f34:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3f36:	9b01      	ldr	r3, [sp, #4]
    3f38:	015b      	lsls	r3, r3, #5
    3f3a:	4a1a      	ldr	r2, [pc, #104]	; (3fa4 <USB_Handler+0x614>)
    3f3c:	18d2      	adds	r2, r2, r3
    3f3e:	6853      	ldr	r3, [r2, #4]
    3f40:	049b      	lsls	r3, r3, #18
    3f42:	0c9b      	lsrs	r3, r3, #18
    3f44:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3f46:	6853      	ldr	r3, [r2, #4]
    3f48:	011b      	lsls	r3, r3, #4
    3f4a:	0c9b      	lsrs	r3, r3, #18
    3f4c:	8083      	strh	r3, [r0, #4]
    3f4e:	e7da      	b.n	3f06 <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3f50:	2208      	movs	r2, #8
    3f52:	32ff      	adds	r2, #255	; 0xff
    3f54:	5c9a      	ldrb	r2, [r3, r2]
    3f56:	0752      	lsls	r2, r2, #29
    3f58:	d579      	bpl.n	404e <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3f5a:	2004      	movs	r0, #4
    3f5c:	2208      	movs	r2, #8
    3f5e:	32ff      	adds	r2, #255	; 0xff
    3f60:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3f62:	9801      	ldr	r0, [sp, #4]
    3f64:	0142      	lsls	r2, r0, #5
    3f66:	4b0f      	ldr	r3, [pc, #60]	; (3fa4 <USB_Handler+0x614>)
    3f68:	189b      	adds	r3, r3, r2
    3f6a:	7a9b      	ldrb	r3, [r3, #10]
    3f6c:	079b      	lsls	r3, r3, #30
    3f6e:	d505      	bpl.n	3f7c <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3f70:	4b0c      	ldr	r3, [pc, #48]	; (3fa4 <USB_Handler+0x614>)
    3f72:	189b      	adds	r3, r3, r2
    3f74:	7a9a      	ldrb	r2, [r3, #10]
    3f76:	2002      	movs	r0, #2
    3f78:	4382      	bics	r2, r0
    3f7a:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3f7c:	4b0a      	ldr	r3, [pc, #40]	; (3fa8 <USB_Handler+0x618>)
    3f7e:	4642      	mov	r2, r8
    3f80:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3f82:	9b01      	ldr	r3, [sp, #4]
    3f84:	3308      	adds	r3, #8
    3f86:	015b      	lsls	r3, r3, #5
    3f88:	683a      	ldr	r2, [r7, #0]
    3f8a:	4694      	mov	ip, r2
    3f8c:	4463      	add	r3, ip
    3f8e:	79db      	ldrb	r3, [r3, #7]
    3f90:	07db      	lsls	r3, r3, #31
    3f92:	d55c      	bpl.n	404e <USB_Handler+0x6be>
    3f94:	e6fa      	b.n	3d8c <USB_Handler+0x3fc>
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	20000198 	.word	0x20000198
    3f9c:	20000188 	.word	0x20000188
    3fa0:	2000018c 	.word	0x2000018c
    3fa4:	20000588 	.word	0x20000588
    3fa8:	20000190 	.word	0x20000190
    3fac:	3301      	adds	r3, #1
    3fae:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3fb0:	2b08      	cmp	r3, #8
    3fb2:	d100      	bne.n	3fb6 <USB_Handler+0x626>
    3fb4:	e6ea      	b.n	3d8c <USB_Handler+0x3fc>
    3fb6:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3fb8:	9301      	str	r3, [sp, #4]
    3fba:	0032      	movs	r2, r6
    3fbc:	411a      	asrs	r2, r3
    3fbe:	4661      	mov	r1, ip
    3fc0:	4211      	tst	r1, r2
    3fc2:	d0f3      	beq.n	3fac <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3fc4:	001a      	movs	r2, r3
    3fc6:	3208      	adds	r2, #8
    3fc8:	0152      	lsls	r2, r2, #5
    3fca:	18ba      	adds	r2, r7, r2
    3fcc:	79d2      	ldrb	r2, [r2, #7]
    3fce:	b2d2      	uxtb	r2, r2
    3fd0:	7a21      	ldrb	r1, [r4, #8]
    3fd2:	4011      	ands	r1, r2
    3fd4:	7820      	ldrb	r0, [r4, #0]
    3fd6:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3fd8:	4648      	mov	r0, r9
    3fda:	4210      	tst	r0, r2
    3fdc:	d000      	beq.n	3fe0 <USB_Handler+0x650>
    3fde:	e726      	b.n	3e2e <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3fe0:	4650      	mov	r0, sl
    3fe2:	4210      	tst	r0, r2
    3fe4:	d000      	beq.n	3fe8 <USB_Handler+0x658>
    3fe6:	e750      	b.n	3e8a <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3fe8:	4658      	mov	r0, fp
    3fea:	4210      	tst	r0, r2
    3fec:	d000      	beq.n	3ff0 <USB_Handler+0x660>
    3fee:	e76c      	b.n	3eca <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3ff0:	200c      	movs	r0, #12
    3ff2:	4210      	tst	r0, r2
    3ff4:	d0da      	beq.n	3fac <USB_Handler+0x61c>
    3ff6:	002a      	movs	r2, r5
    3ff8:	003d      	movs	r5, r7
    3ffa:	4647      	mov	r7, r8
    3ffc:	4690      	mov	r8, r2
    3ffe:	015b      	lsls	r3, r3, #5
    4000:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4002:	2208      	movs	r2, #8
    4004:	32ff      	adds	r2, #255	; 0xff
    4006:	5c9a      	ldrb	r2, [r3, r2]
    4008:	0712      	lsls	r2, r2, #28
    400a:	d5a1      	bpl.n	3f50 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    400c:	3804      	subs	r0, #4
    400e:	2208      	movs	r2, #8
    4010:	32ff      	adds	r2, #255	; 0xff
    4012:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4014:	9801      	ldr	r0, [sp, #4]
    4016:	0142      	lsls	r2, r0, #5
    4018:	4b13      	ldr	r3, [pc, #76]	; (4068 <USB_Handler+0x6d8>)
    401a:	189b      	adds	r3, r3, r2
    401c:	7e9b      	ldrb	r3, [r3, #26]
    401e:	079b      	lsls	r3, r3, #30
    4020:	d505      	bpl.n	402e <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4022:	4b11      	ldr	r3, [pc, #68]	; (4068 <USB_Handler+0x6d8>)
    4024:	189b      	adds	r3, r3, r2
    4026:	7e9a      	ldrb	r2, [r3, #26]
    4028:	2002      	movs	r0, #2
    402a:	4382      	bics	r2, r0
    402c:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    402e:	2380      	movs	r3, #128	; 0x80
    4030:	425b      	negs	r3, r3
    4032:	4642      	mov	r2, r8
    4034:	4313      	orrs	r3, r2
    4036:	4a0d      	ldr	r2, [pc, #52]	; (406c <USB_Handler+0x6dc>)
    4038:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    403a:	9b01      	ldr	r3, [sp, #4]
    403c:	3308      	adds	r3, #8
    403e:	015b      	lsls	r3, r3, #5
    4040:	683a      	ldr	r2, [r7, #0]
    4042:	4694      	mov	ip, r2
    4044:	4463      	add	r3, ip
    4046:	79db      	ldrb	r3, [r3, #7]
    4048:	079b      	lsls	r3, r3, #30
    404a:	d500      	bpl.n	404e <USB_Handler+0x6be>
    404c:	e69e      	b.n	3d8c <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    404e:	230c      	movs	r3, #12
    4050:	420b      	tst	r3, r1
    4052:	d100      	bne.n	4056 <USB_Handler+0x6c6>
    4054:	e69a      	b.n	3d8c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4056:	9b01      	ldr	r3, [sp, #4]
    4058:	011b      	lsls	r3, r3, #4
    405a:	18fb      	adds	r3, r7, r3
    405c:	33d8      	adds	r3, #216	; 0xd8
    405e:	681b      	ldr	r3, [r3, #0]
    4060:	4902      	ldr	r1, [pc, #8]	; (406c <USB_Handler+0x6dc>)
    4062:	0038      	movs	r0, r7
    4064:	4798      	blx	r3
    4066:	e691      	b.n	3d8c <USB_Handler+0x3fc>
    4068:	20000588 	.word	0x20000588
    406c:	20000190 	.word	0x20000190

00004070 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4070:	2300      	movs	r3, #0
    4072:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    4074:	3301      	adds	r3, #1
    4076:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    4078:	2203      	movs	r2, #3
    407a:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    407c:	70c3      	strb	r3, [r0, #3]
}
    407e:	4770      	bx	lr

00004080 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4080:	b5f0      	push	{r4, r5, r6, r7, lr}
    4082:	46ce      	mov	lr, r9
    4084:	4647      	mov	r7, r8
    4086:	b580      	push	{r7, lr}
    4088:	b083      	sub	sp, #12
    408a:	0004      	movs	r4, r0
    408c:	000d      	movs	r5, r1
    408e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    4090:	2300      	movs	r3, #0
    4092:	4a67      	ldr	r2, [pc, #412]	; (4230 <usb_init+0x1b0>)
    4094:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4096:	4a67      	ldr	r2, [pc, #412]	; (4234 <usb_init+0x1b4>)
    4098:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    409a:	6021      	str	r1, [r4, #0]
			MCLK->APBBMASK.reg |= mask;
    409c:	4866      	ldr	r0, [pc, #408]	; (4238 <usb_init+0x1b8>)
    409e:	6982      	ldr	r2, [r0, #24]
    40a0:	2101      	movs	r1, #1
    40a2:	430a      	orrs	r2, r1
    40a4:	6182      	str	r2, [r0, #24]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    40a6:	af01      	add	r7, sp, #4
    40a8:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    40aa:	70b9      	strb	r1, [r7, #2]
	config->powersave    = false;
    40ac:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    40ae:	3306      	adds	r3, #6
    40b0:	4699      	mov	r9, r3
    40b2:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    40b4:	0039      	movs	r1, r7
    40b6:	2018      	movs	r0, #24
    40b8:	4b60      	ldr	r3, [pc, #384]	; (423c <usb_init+0x1bc>)
    40ba:	4698      	mov	r8, r3
    40bc:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    40be:	464b      	mov	r3, r9
    40c0:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    40c2:	0039      	movs	r1, r7
    40c4:	2019      	movs	r0, #25
    40c6:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    40c8:	78b3      	ldrb	r3, [r6, #2]
    40ca:	466a      	mov	r2, sp
    40cc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    40ce:	4669      	mov	r1, sp
    40d0:	2004      	movs	r0, #4
    40d2:	4b5b      	ldr	r3, [pc, #364]	; (4240 <usb_init+0x1c0>)
    40d4:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    40d6:	2004      	movs	r0, #4
    40d8:	4b5a      	ldr	r3, [pc, #360]	; (4244 <usb_init+0x1c4>)
    40da:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    40dc:	782b      	ldrb	r3, [r5, #0]
    40de:	2201      	movs	r2, #1
    40e0:	4313      	orrs	r3, r2
    40e2:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    40e4:	78ab      	ldrb	r3, [r5, #2]
    40e6:	07db      	lsls	r3, r3, #31
    40e8:	d4fc      	bmi.n	40e4 <usb_init+0x64>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    40ea:	4b57      	ldr	r3, [pc, #348]	; (4248 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    40ec:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    40ee:	039b      	lsls	r3, r3, #14
    40f0:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    40f2:	2b1f      	cmp	r3, #31
    40f4:	d100      	bne.n	40f8 <usb_init+0x78>
    40f6:	e08f      	b.n	4218 <usb_init+0x198>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    40f8:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    40fa:	019b      	lsls	r3, r3, #6
    40fc:	4953      	ldr	r1, [pc, #332]	; (424c <usb_init+0x1cc>)
    40fe:	400a      	ands	r2, r1
    4100:	4313      	orrs	r3, r2
    4102:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4104:	4b50      	ldr	r3, [pc, #320]	; (4248 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4106:	681b      	ldr	r3, [r3, #0]
    4108:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    410a:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    410c:	2b1f      	cmp	r3, #31
    410e:	d100      	bne.n	4112 <usb_init+0x92>
    4110:	e084      	b.n	421c <usb_init+0x19c>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    4112:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4114:	211f      	movs	r1, #31
    4116:	438a      	bics	r2, r1
    4118:	4313      	orrs	r3, r2
    411a:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    411c:	4b4a      	ldr	r3, [pc, #296]	; (4248 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    411e:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4120:	019b      	lsls	r3, r3, #6
    4122:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4124:	2b07      	cmp	r3, #7
    4126:	d100      	bne.n	412a <usb_init+0xaa>
    4128:	e07a      	b.n	4220 <usb_init+0x1a0>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    412a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    412c:	031b      	lsls	r3, r3, #12
    412e:	4948      	ldr	r1, [pc, #288]	; (4250 <usb_init+0x1d0>)
    4130:	400a      	ands	r2, r1
    4132:	4313      	orrs	r3, r2
    4134:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4136:	7832      	ldrb	r2, [r6, #0]
    4138:	7829      	ldrb	r1, [r5, #0]
    413a:	01d2      	lsls	r2, r2, #7
    413c:	237f      	movs	r3, #127	; 0x7f
    413e:	400b      	ands	r3, r1
    4140:	4313      	orrs	r3, r2
    4142:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4144:	7871      	ldrb	r1, [r6, #1]
    4146:	782b      	ldrb	r3, [r5, #0]
    4148:	2201      	movs	r2, #1
    414a:	400a      	ands	r2, r1
    414c:	0092      	lsls	r2, r2, #2
    414e:	2104      	movs	r1, #4
    4150:	438b      	bics	r3, r1
    4152:	4313      	orrs	r3, r2
    4154:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4156:	4b3f      	ldr	r3, [pc, #252]	; (4254 <usb_init+0x1d4>)
    4158:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    415a:	78f3      	ldrb	r3, [r6, #3]
    415c:	2b01      	cmp	r3, #1
    415e:	d061      	beq.n	4224 <usb_init+0x1a4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4160:	2b00      	cmp	r3, #0
    4162:	d106      	bne.n	4172 <usb_init+0xf2>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4164:	6822      	ldr	r2, [r4, #0]
    4166:	8913      	ldrh	r3, [r2, #8]
    4168:	210c      	movs	r1, #12
    416a:	438b      	bics	r3, r1
    416c:	2104      	movs	r1, #4
    416e:	430b      	orrs	r3, r1
    4170:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    4172:	2280      	movs	r2, #128	; 0x80
    4174:	0052      	lsls	r2, r2, #1
    4176:	2100      	movs	r1, #0
    4178:	4836      	ldr	r0, [pc, #216]	; (4254 <usb_init+0x1d4>)
    417a:	4b37      	ldr	r3, [pc, #220]	; (4258 <usb_init+0x1d8>)
    417c:	4798      	blx	r3
    417e:	1d23      	adds	r3, r4, #4
    4180:	0021      	movs	r1, r4
    4182:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4184:	2200      	movs	r2, #0
    4186:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4188:	428b      	cmp	r3, r1
    418a:	d1fc      	bne.n	4186 <usb_init+0x106>
    418c:	0021      	movs	r1, r4
    418e:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4190:	2200      	movs	r2, #0
    4192:	601a      	str	r2, [r3, #0]
    4194:	605a      	str	r2, [r3, #4]
    4196:	609a      	str	r2, [r3, #8]
    4198:	60da      	str	r2, [r3, #12]
    419a:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    419c:	428b      	cmp	r3, r1
    419e:	d1f8      	bne.n	4192 <usb_init+0x112>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    41a0:	2300      	movs	r3, #0
    41a2:	22a4      	movs	r2, #164	; 0xa4
    41a4:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    41a6:	3201      	adds	r2, #1
    41a8:	54a3      	strb	r3, [r4, r2]
    41aa:	0023      	movs	r3, r4
    41ac:	33a6      	adds	r3, #166	; 0xa6
    41ae:	0021      	movs	r1, r4
    41b0:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    41b2:	2200      	movs	r2, #0
    41b4:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    41b6:	721a      	strb	r2, [r3, #8]
    41b8:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    41ba:	4299      	cmp	r1, r3
    41bc:	d1fa      	bne.n	41b4 <usb_init+0x134>
    41be:	0023      	movs	r3, r4
    41c0:	33b8      	adds	r3, #184	; 0xb8
    41c2:	0021      	movs	r1, r4
    41c4:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    41c6:	2200      	movs	r2, #0
    41c8:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    41ca:	428b      	cmp	r3, r1
    41cc:	d1fc      	bne.n	41c8 <usb_init+0x148>
    41ce:	0021      	movs	r1, r4
    41d0:	3155      	adds	r1, #85	; 0x55
    41d2:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    41d4:	2200      	movs	r2, #0
    41d6:	601a      	str	r2, [r3, #0]
    41d8:	605a      	str	r2, [r3, #4]
    41da:	609a      	str	r2, [r3, #8]
    41dc:	60da      	str	r2, [r3, #12]
    41de:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    41e0:	428b      	cmp	r3, r1
    41e2:	d1f8      	bne.n	41d6 <usb_init+0x156>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    41e4:	2300      	movs	r3, #0
    41e6:	22aa      	movs	r2, #170	; 0xaa
    41e8:	0052      	lsls	r2, r2, #1
    41ea:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    41ec:	3202      	adds	r2, #2
    41ee:	52a3      	strh	r3, [r4, r2]
    41f0:	0023      	movs	r3, r4
    41f2:	3359      	adds	r3, #89	; 0x59
    41f4:	33ff      	adds	r3, #255	; 0xff
    41f6:	3461      	adds	r4, #97	; 0x61
    41f8:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    41fa:	2200      	movs	r2, #0
    41fc:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    41fe:	721a      	strb	r2, [r3, #8]
    4200:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    4202:	42a3      	cmp	r3, r4
    4204:	d1fa      	bne.n	41fc <usb_init+0x17c>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4206:	2240      	movs	r2, #64	; 0x40
    4208:	4b14      	ldr	r3, [pc, #80]	; (425c <usb_init+0x1dc>)
    420a:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    420c:	2000      	movs	r0, #0
    420e:	b003      	add	sp, #12
    4210:	bc0c      	pop	{r2, r3}
    4212:	4690      	mov	r8, r2
    4214:	4699      	mov	r9, r3
    4216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4218:	3b1a      	subs	r3, #26
    421a:	e76d      	b.n	40f8 <usb_init+0x78>
		pad_transp = 29;
    421c:	3b02      	subs	r3, #2
    421e:	e778      	b.n	4112 <usb_init+0x92>
		pad_trim = 3;
    4220:	3b04      	subs	r3, #4
    4222:	e782      	b.n	412a <usb_init+0xaa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4224:	6822      	ldr	r2, [r4, #0]
    4226:	8913      	ldrh	r3, [r2, #8]
    4228:	3108      	adds	r1, #8
    422a:	438b      	bics	r3, r1
    422c:	8113      	strh	r3, [r2, #8]
    422e:	e7a0      	b.n	4172 <usb_init+0xf2>
    4230:	20000198 	.word	0x20000198
    4234:	20000188 	.word	0x20000188
    4238:	40000400 	.word	0x40000400
    423c:	000025e9 	.word	0x000025e9
    4240:	000024ed 	.word	0x000024ed
    4244:	0000247d 	.word	0x0000247d
    4248:	0080601c 	.word	0x0080601c
    424c:	fffff83f 	.word	0xfffff83f
    4250:	ffff8fff 	.word	0xffff8fff
    4254:	20000588 	.word	0x20000588
    4258:	000046e7 	.word	0x000046e7
    425c:	e000e100 	.word	0xe000e100

00004260 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4260:	e7fe      	b.n	4260 <Dummy_Handler>
	...

00004264 <Reset_Handler>:
{
    4264:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    4266:	4a1a      	ldr	r2, [pc, #104]	; (42d0 <Reset_Handler+0x6c>)
    4268:	4b1a      	ldr	r3, [pc, #104]	; (42d4 <Reset_Handler+0x70>)
    426a:	429a      	cmp	r2, r3
    426c:	d011      	beq.n	4292 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    426e:	001a      	movs	r2, r3
    4270:	4b19      	ldr	r3, [pc, #100]	; (42d8 <Reset_Handler+0x74>)
    4272:	429a      	cmp	r2, r3
    4274:	d20d      	bcs.n	4292 <Reset_Handler+0x2e>
    4276:	4a19      	ldr	r2, [pc, #100]	; (42dc <Reset_Handler+0x78>)
    4278:	3303      	adds	r3, #3
    427a:	1a9b      	subs	r3, r3, r2
    427c:	089b      	lsrs	r3, r3, #2
    427e:	3301      	adds	r3, #1
    4280:	009b      	lsls	r3, r3, #2
    4282:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4284:	4813      	ldr	r0, [pc, #76]	; (42d4 <Reset_Handler+0x70>)
    4286:	4912      	ldr	r1, [pc, #72]	; (42d0 <Reset_Handler+0x6c>)
    4288:	588c      	ldr	r4, [r1, r2]
    428a:	5084      	str	r4, [r0, r2]
    428c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    428e:	429a      	cmp	r2, r3
    4290:	d1fa      	bne.n	4288 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4292:	4a13      	ldr	r2, [pc, #76]	; (42e0 <Reset_Handler+0x7c>)
    4294:	4b13      	ldr	r3, [pc, #76]	; (42e4 <Reset_Handler+0x80>)
    4296:	429a      	cmp	r2, r3
    4298:	d20a      	bcs.n	42b0 <Reset_Handler+0x4c>
    429a:	43d3      	mvns	r3, r2
    429c:	4911      	ldr	r1, [pc, #68]	; (42e4 <Reset_Handler+0x80>)
    429e:	185b      	adds	r3, r3, r1
    42a0:	2103      	movs	r1, #3
    42a2:	438b      	bics	r3, r1
    42a4:	3304      	adds	r3, #4
    42a6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    42a8:	2100      	movs	r1, #0
    42aa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    42ac:	4293      	cmp	r3, r2
    42ae:	d1fc      	bne.n	42aa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    42b0:	4a0d      	ldr	r2, [pc, #52]	; (42e8 <Reset_Handler+0x84>)
    42b2:	21ff      	movs	r1, #255	; 0xff
    42b4:	4b0d      	ldr	r3, [pc, #52]	; (42ec <Reset_Handler+0x88>)
    42b6:	438b      	bics	r3, r1
    42b8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    42ba:	4a0d      	ldr	r2, [pc, #52]	; (42f0 <Reset_Handler+0x8c>)
    42bc:	6853      	ldr	r3, [r2, #4]
    42be:	397f      	subs	r1, #127	; 0x7f
    42c0:	430b      	orrs	r3, r1
    42c2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    42c4:	4b0b      	ldr	r3, [pc, #44]	; (42f4 <Reset_Handler+0x90>)
    42c6:	4798      	blx	r3
        main();
    42c8:	4b0b      	ldr	r3, [pc, #44]	; (42f8 <Reset_Handler+0x94>)
    42ca:	4798      	blx	r3
    42cc:	e7fe      	b.n	42cc <Reset_Handler+0x68>
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	00004908 	.word	0x00004908
    42d4:	20000000 	.word	0x20000000
    42d8:	200000dc 	.word	0x200000dc
    42dc:	20000004 	.word	0x20000004
    42e0:	200000dc 	.word	0x200000dc
    42e4:	20000688 	.word	0x20000688
    42e8:	e000ed00 	.word	0xe000ed00
    42ec:	00000000 	.word	0x00000000
    42f0:	41004000 	.word	0x41004000
    42f4:	0000468d 	.word	0x0000468d
    42f8:	000042fd 	.word	0x000042fd

000042fc <main>:
#include "keyboard.h"

#define EVER (;;)

int main (void)
{
    42fc:	b510      	push	{r4, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    42fe:	2201      	movs	r2, #1
    4300:	4b09      	ldr	r3, [pc, #36]	; (4328 <main+0x2c>)
    4302:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4304:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4308:	b662      	cpsie	i
		
	board_init();
    430a:	4b08      	ldr	r3, [pc, #32]	; (432c <main+0x30>)
    430c:	4798      	blx	r3
	system_init();
    430e:	4b08      	ldr	r3, [pc, #32]	; (4330 <main+0x34>)
    4310:	4798      	blx	r3
	
	delay_init();
    4312:	4b08      	ldr	r3, [pc, #32]	; (4334 <main+0x38>)
    4314:	4798      	blx	r3
	
	init_timing();
    4316:	4b08      	ldr	r3, [pc, #32]	; (4338 <main+0x3c>)
    4318:	4798      	blx	r3
	
	/* Insert application code here, after the board has been initialized. */
	keyboard_init();
    431a:	4b08      	ldr	r3, [pc, #32]	; (433c <main+0x40>)
    431c:	4798      	blx	r3
	
	udc_start();
    431e:	4b08      	ldr	r3, [pc, #32]	; (4340 <main+0x44>)
    4320:	4798      	blx	r3
	
	for EVER {
		 keyboard_update();
    4322:	4c08      	ldr	r4, [pc, #32]	; (4344 <main+0x48>)
    4324:	47a0      	blx	r4
    4326:	e7fd      	b.n	4324 <main+0x28>
    4328:	200000d8 	.word	0x200000d8
    432c:	00001e19 	.word	0x00001e19
    4330:	0000261d 	.word	0x0000261d
    4334:	000011e1 	.word	0x000011e1
    4338:	00001189 	.word	0x00001189
    433c:	000001ed 	.word	0x000001ed
    4340:	00001821 	.word	0x00001821
    4344:	0000022d 	.word	0x0000022d

00004348 <main_kbd_enable>:
	}
	
}

bool main_kbd_enable(void)
{
    4348:	b510      	push	{r4, lr}
	return keyboard_set_kbd_enabled();
    434a:	4b01      	ldr	r3, [pc, #4]	; (4350 <main_kbd_enable+0x8>)
    434c:	4798      	blx	r3
}
    434e:	bd10      	pop	{r4, pc}
    4350:	00000ec1 	.word	0x00000ec1

00004354 <main_kbd_disable>:

void main_kbd_disable(void)
{
    4354:	b510      	push	{r4, lr}
	keyboard_set_kbd_disabled();
    4356:	4b01      	ldr	r3, [pc, #4]	; (435c <main_kbd_disable+0x8>)
    4358:	4798      	blx	r3
    435a:	bd10      	pop	{r4, pc}
    435c:	00000ed1 	.word	0x00000ed1

00004360 <__udivsi3>:
    4360:	2200      	movs	r2, #0
    4362:	0843      	lsrs	r3, r0, #1
    4364:	428b      	cmp	r3, r1
    4366:	d374      	bcc.n	4452 <__udivsi3+0xf2>
    4368:	0903      	lsrs	r3, r0, #4
    436a:	428b      	cmp	r3, r1
    436c:	d35f      	bcc.n	442e <__udivsi3+0xce>
    436e:	0a03      	lsrs	r3, r0, #8
    4370:	428b      	cmp	r3, r1
    4372:	d344      	bcc.n	43fe <__udivsi3+0x9e>
    4374:	0b03      	lsrs	r3, r0, #12
    4376:	428b      	cmp	r3, r1
    4378:	d328      	bcc.n	43cc <__udivsi3+0x6c>
    437a:	0c03      	lsrs	r3, r0, #16
    437c:	428b      	cmp	r3, r1
    437e:	d30d      	bcc.n	439c <__udivsi3+0x3c>
    4380:	22ff      	movs	r2, #255	; 0xff
    4382:	0209      	lsls	r1, r1, #8
    4384:	ba12      	rev	r2, r2
    4386:	0c03      	lsrs	r3, r0, #16
    4388:	428b      	cmp	r3, r1
    438a:	d302      	bcc.n	4392 <__udivsi3+0x32>
    438c:	1212      	asrs	r2, r2, #8
    438e:	0209      	lsls	r1, r1, #8
    4390:	d065      	beq.n	445e <__udivsi3+0xfe>
    4392:	0b03      	lsrs	r3, r0, #12
    4394:	428b      	cmp	r3, r1
    4396:	d319      	bcc.n	43cc <__udivsi3+0x6c>
    4398:	e000      	b.n	439c <__udivsi3+0x3c>
    439a:	0a09      	lsrs	r1, r1, #8
    439c:	0bc3      	lsrs	r3, r0, #15
    439e:	428b      	cmp	r3, r1
    43a0:	d301      	bcc.n	43a6 <__udivsi3+0x46>
    43a2:	03cb      	lsls	r3, r1, #15
    43a4:	1ac0      	subs	r0, r0, r3
    43a6:	4152      	adcs	r2, r2
    43a8:	0b83      	lsrs	r3, r0, #14
    43aa:	428b      	cmp	r3, r1
    43ac:	d301      	bcc.n	43b2 <__udivsi3+0x52>
    43ae:	038b      	lsls	r3, r1, #14
    43b0:	1ac0      	subs	r0, r0, r3
    43b2:	4152      	adcs	r2, r2
    43b4:	0b43      	lsrs	r3, r0, #13
    43b6:	428b      	cmp	r3, r1
    43b8:	d301      	bcc.n	43be <__udivsi3+0x5e>
    43ba:	034b      	lsls	r3, r1, #13
    43bc:	1ac0      	subs	r0, r0, r3
    43be:	4152      	adcs	r2, r2
    43c0:	0b03      	lsrs	r3, r0, #12
    43c2:	428b      	cmp	r3, r1
    43c4:	d301      	bcc.n	43ca <__udivsi3+0x6a>
    43c6:	030b      	lsls	r3, r1, #12
    43c8:	1ac0      	subs	r0, r0, r3
    43ca:	4152      	adcs	r2, r2
    43cc:	0ac3      	lsrs	r3, r0, #11
    43ce:	428b      	cmp	r3, r1
    43d0:	d301      	bcc.n	43d6 <__udivsi3+0x76>
    43d2:	02cb      	lsls	r3, r1, #11
    43d4:	1ac0      	subs	r0, r0, r3
    43d6:	4152      	adcs	r2, r2
    43d8:	0a83      	lsrs	r3, r0, #10
    43da:	428b      	cmp	r3, r1
    43dc:	d301      	bcc.n	43e2 <__udivsi3+0x82>
    43de:	028b      	lsls	r3, r1, #10
    43e0:	1ac0      	subs	r0, r0, r3
    43e2:	4152      	adcs	r2, r2
    43e4:	0a43      	lsrs	r3, r0, #9
    43e6:	428b      	cmp	r3, r1
    43e8:	d301      	bcc.n	43ee <__udivsi3+0x8e>
    43ea:	024b      	lsls	r3, r1, #9
    43ec:	1ac0      	subs	r0, r0, r3
    43ee:	4152      	adcs	r2, r2
    43f0:	0a03      	lsrs	r3, r0, #8
    43f2:	428b      	cmp	r3, r1
    43f4:	d301      	bcc.n	43fa <__udivsi3+0x9a>
    43f6:	020b      	lsls	r3, r1, #8
    43f8:	1ac0      	subs	r0, r0, r3
    43fa:	4152      	adcs	r2, r2
    43fc:	d2cd      	bcs.n	439a <__udivsi3+0x3a>
    43fe:	09c3      	lsrs	r3, r0, #7
    4400:	428b      	cmp	r3, r1
    4402:	d301      	bcc.n	4408 <__udivsi3+0xa8>
    4404:	01cb      	lsls	r3, r1, #7
    4406:	1ac0      	subs	r0, r0, r3
    4408:	4152      	adcs	r2, r2
    440a:	0983      	lsrs	r3, r0, #6
    440c:	428b      	cmp	r3, r1
    440e:	d301      	bcc.n	4414 <__udivsi3+0xb4>
    4410:	018b      	lsls	r3, r1, #6
    4412:	1ac0      	subs	r0, r0, r3
    4414:	4152      	adcs	r2, r2
    4416:	0943      	lsrs	r3, r0, #5
    4418:	428b      	cmp	r3, r1
    441a:	d301      	bcc.n	4420 <__udivsi3+0xc0>
    441c:	014b      	lsls	r3, r1, #5
    441e:	1ac0      	subs	r0, r0, r3
    4420:	4152      	adcs	r2, r2
    4422:	0903      	lsrs	r3, r0, #4
    4424:	428b      	cmp	r3, r1
    4426:	d301      	bcc.n	442c <__udivsi3+0xcc>
    4428:	010b      	lsls	r3, r1, #4
    442a:	1ac0      	subs	r0, r0, r3
    442c:	4152      	adcs	r2, r2
    442e:	08c3      	lsrs	r3, r0, #3
    4430:	428b      	cmp	r3, r1
    4432:	d301      	bcc.n	4438 <__udivsi3+0xd8>
    4434:	00cb      	lsls	r3, r1, #3
    4436:	1ac0      	subs	r0, r0, r3
    4438:	4152      	adcs	r2, r2
    443a:	0883      	lsrs	r3, r0, #2
    443c:	428b      	cmp	r3, r1
    443e:	d301      	bcc.n	4444 <__udivsi3+0xe4>
    4440:	008b      	lsls	r3, r1, #2
    4442:	1ac0      	subs	r0, r0, r3
    4444:	4152      	adcs	r2, r2
    4446:	0843      	lsrs	r3, r0, #1
    4448:	428b      	cmp	r3, r1
    444a:	d301      	bcc.n	4450 <__udivsi3+0xf0>
    444c:	004b      	lsls	r3, r1, #1
    444e:	1ac0      	subs	r0, r0, r3
    4450:	4152      	adcs	r2, r2
    4452:	1a41      	subs	r1, r0, r1
    4454:	d200      	bcs.n	4458 <__udivsi3+0xf8>
    4456:	4601      	mov	r1, r0
    4458:	4152      	adcs	r2, r2
    445a:	4610      	mov	r0, r2
    445c:	4770      	bx	lr
    445e:	e7ff      	b.n	4460 <__udivsi3+0x100>
    4460:	b501      	push	{r0, lr}
    4462:	2000      	movs	r0, #0
    4464:	f000 f8f0 	bl	4648 <__aeabi_idiv0>
    4468:	bd02      	pop	{r1, pc}
    446a:	46c0      	nop			; (mov r8, r8)

0000446c <__aeabi_uidivmod>:
    446c:	2900      	cmp	r1, #0
    446e:	d0f7      	beq.n	4460 <__udivsi3+0x100>
    4470:	e776      	b.n	4360 <__udivsi3>
    4472:	4770      	bx	lr

00004474 <__divsi3>:
    4474:	4603      	mov	r3, r0
    4476:	430b      	orrs	r3, r1
    4478:	d47f      	bmi.n	457a <__divsi3+0x106>
    447a:	2200      	movs	r2, #0
    447c:	0843      	lsrs	r3, r0, #1
    447e:	428b      	cmp	r3, r1
    4480:	d374      	bcc.n	456c <__divsi3+0xf8>
    4482:	0903      	lsrs	r3, r0, #4
    4484:	428b      	cmp	r3, r1
    4486:	d35f      	bcc.n	4548 <__divsi3+0xd4>
    4488:	0a03      	lsrs	r3, r0, #8
    448a:	428b      	cmp	r3, r1
    448c:	d344      	bcc.n	4518 <__divsi3+0xa4>
    448e:	0b03      	lsrs	r3, r0, #12
    4490:	428b      	cmp	r3, r1
    4492:	d328      	bcc.n	44e6 <__divsi3+0x72>
    4494:	0c03      	lsrs	r3, r0, #16
    4496:	428b      	cmp	r3, r1
    4498:	d30d      	bcc.n	44b6 <__divsi3+0x42>
    449a:	22ff      	movs	r2, #255	; 0xff
    449c:	0209      	lsls	r1, r1, #8
    449e:	ba12      	rev	r2, r2
    44a0:	0c03      	lsrs	r3, r0, #16
    44a2:	428b      	cmp	r3, r1
    44a4:	d302      	bcc.n	44ac <__divsi3+0x38>
    44a6:	1212      	asrs	r2, r2, #8
    44a8:	0209      	lsls	r1, r1, #8
    44aa:	d065      	beq.n	4578 <__divsi3+0x104>
    44ac:	0b03      	lsrs	r3, r0, #12
    44ae:	428b      	cmp	r3, r1
    44b0:	d319      	bcc.n	44e6 <__divsi3+0x72>
    44b2:	e000      	b.n	44b6 <__divsi3+0x42>
    44b4:	0a09      	lsrs	r1, r1, #8
    44b6:	0bc3      	lsrs	r3, r0, #15
    44b8:	428b      	cmp	r3, r1
    44ba:	d301      	bcc.n	44c0 <__divsi3+0x4c>
    44bc:	03cb      	lsls	r3, r1, #15
    44be:	1ac0      	subs	r0, r0, r3
    44c0:	4152      	adcs	r2, r2
    44c2:	0b83      	lsrs	r3, r0, #14
    44c4:	428b      	cmp	r3, r1
    44c6:	d301      	bcc.n	44cc <__divsi3+0x58>
    44c8:	038b      	lsls	r3, r1, #14
    44ca:	1ac0      	subs	r0, r0, r3
    44cc:	4152      	adcs	r2, r2
    44ce:	0b43      	lsrs	r3, r0, #13
    44d0:	428b      	cmp	r3, r1
    44d2:	d301      	bcc.n	44d8 <__divsi3+0x64>
    44d4:	034b      	lsls	r3, r1, #13
    44d6:	1ac0      	subs	r0, r0, r3
    44d8:	4152      	adcs	r2, r2
    44da:	0b03      	lsrs	r3, r0, #12
    44dc:	428b      	cmp	r3, r1
    44de:	d301      	bcc.n	44e4 <__divsi3+0x70>
    44e0:	030b      	lsls	r3, r1, #12
    44e2:	1ac0      	subs	r0, r0, r3
    44e4:	4152      	adcs	r2, r2
    44e6:	0ac3      	lsrs	r3, r0, #11
    44e8:	428b      	cmp	r3, r1
    44ea:	d301      	bcc.n	44f0 <__divsi3+0x7c>
    44ec:	02cb      	lsls	r3, r1, #11
    44ee:	1ac0      	subs	r0, r0, r3
    44f0:	4152      	adcs	r2, r2
    44f2:	0a83      	lsrs	r3, r0, #10
    44f4:	428b      	cmp	r3, r1
    44f6:	d301      	bcc.n	44fc <__divsi3+0x88>
    44f8:	028b      	lsls	r3, r1, #10
    44fa:	1ac0      	subs	r0, r0, r3
    44fc:	4152      	adcs	r2, r2
    44fe:	0a43      	lsrs	r3, r0, #9
    4500:	428b      	cmp	r3, r1
    4502:	d301      	bcc.n	4508 <__divsi3+0x94>
    4504:	024b      	lsls	r3, r1, #9
    4506:	1ac0      	subs	r0, r0, r3
    4508:	4152      	adcs	r2, r2
    450a:	0a03      	lsrs	r3, r0, #8
    450c:	428b      	cmp	r3, r1
    450e:	d301      	bcc.n	4514 <__divsi3+0xa0>
    4510:	020b      	lsls	r3, r1, #8
    4512:	1ac0      	subs	r0, r0, r3
    4514:	4152      	adcs	r2, r2
    4516:	d2cd      	bcs.n	44b4 <__divsi3+0x40>
    4518:	09c3      	lsrs	r3, r0, #7
    451a:	428b      	cmp	r3, r1
    451c:	d301      	bcc.n	4522 <__divsi3+0xae>
    451e:	01cb      	lsls	r3, r1, #7
    4520:	1ac0      	subs	r0, r0, r3
    4522:	4152      	adcs	r2, r2
    4524:	0983      	lsrs	r3, r0, #6
    4526:	428b      	cmp	r3, r1
    4528:	d301      	bcc.n	452e <__divsi3+0xba>
    452a:	018b      	lsls	r3, r1, #6
    452c:	1ac0      	subs	r0, r0, r3
    452e:	4152      	adcs	r2, r2
    4530:	0943      	lsrs	r3, r0, #5
    4532:	428b      	cmp	r3, r1
    4534:	d301      	bcc.n	453a <__divsi3+0xc6>
    4536:	014b      	lsls	r3, r1, #5
    4538:	1ac0      	subs	r0, r0, r3
    453a:	4152      	adcs	r2, r2
    453c:	0903      	lsrs	r3, r0, #4
    453e:	428b      	cmp	r3, r1
    4540:	d301      	bcc.n	4546 <__divsi3+0xd2>
    4542:	010b      	lsls	r3, r1, #4
    4544:	1ac0      	subs	r0, r0, r3
    4546:	4152      	adcs	r2, r2
    4548:	08c3      	lsrs	r3, r0, #3
    454a:	428b      	cmp	r3, r1
    454c:	d301      	bcc.n	4552 <__divsi3+0xde>
    454e:	00cb      	lsls	r3, r1, #3
    4550:	1ac0      	subs	r0, r0, r3
    4552:	4152      	adcs	r2, r2
    4554:	0883      	lsrs	r3, r0, #2
    4556:	428b      	cmp	r3, r1
    4558:	d301      	bcc.n	455e <__divsi3+0xea>
    455a:	008b      	lsls	r3, r1, #2
    455c:	1ac0      	subs	r0, r0, r3
    455e:	4152      	adcs	r2, r2
    4560:	0843      	lsrs	r3, r0, #1
    4562:	428b      	cmp	r3, r1
    4564:	d301      	bcc.n	456a <__divsi3+0xf6>
    4566:	004b      	lsls	r3, r1, #1
    4568:	1ac0      	subs	r0, r0, r3
    456a:	4152      	adcs	r2, r2
    456c:	1a41      	subs	r1, r0, r1
    456e:	d200      	bcs.n	4572 <__divsi3+0xfe>
    4570:	4601      	mov	r1, r0
    4572:	4152      	adcs	r2, r2
    4574:	4610      	mov	r0, r2
    4576:	4770      	bx	lr
    4578:	e05d      	b.n	4636 <__divsi3+0x1c2>
    457a:	0fca      	lsrs	r2, r1, #31
    457c:	d000      	beq.n	4580 <__divsi3+0x10c>
    457e:	4249      	negs	r1, r1
    4580:	1003      	asrs	r3, r0, #32
    4582:	d300      	bcc.n	4586 <__divsi3+0x112>
    4584:	4240      	negs	r0, r0
    4586:	4053      	eors	r3, r2
    4588:	2200      	movs	r2, #0
    458a:	469c      	mov	ip, r3
    458c:	0903      	lsrs	r3, r0, #4
    458e:	428b      	cmp	r3, r1
    4590:	d32d      	bcc.n	45ee <__divsi3+0x17a>
    4592:	0a03      	lsrs	r3, r0, #8
    4594:	428b      	cmp	r3, r1
    4596:	d312      	bcc.n	45be <__divsi3+0x14a>
    4598:	22fc      	movs	r2, #252	; 0xfc
    459a:	0189      	lsls	r1, r1, #6
    459c:	ba12      	rev	r2, r2
    459e:	0a03      	lsrs	r3, r0, #8
    45a0:	428b      	cmp	r3, r1
    45a2:	d30c      	bcc.n	45be <__divsi3+0x14a>
    45a4:	0189      	lsls	r1, r1, #6
    45a6:	1192      	asrs	r2, r2, #6
    45a8:	428b      	cmp	r3, r1
    45aa:	d308      	bcc.n	45be <__divsi3+0x14a>
    45ac:	0189      	lsls	r1, r1, #6
    45ae:	1192      	asrs	r2, r2, #6
    45b0:	428b      	cmp	r3, r1
    45b2:	d304      	bcc.n	45be <__divsi3+0x14a>
    45b4:	0189      	lsls	r1, r1, #6
    45b6:	d03a      	beq.n	462e <__divsi3+0x1ba>
    45b8:	1192      	asrs	r2, r2, #6
    45ba:	e000      	b.n	45be <__divsi3+0x14a>
    45bc:	0989      	lsrs	r1, r1, #6
    45be:	09c3      	lsrs	r3, r0, #7
    45c0:	428b      	cmp	r3, r1
    45c2:	d301      	bcc.n	45c8 <__divsi3+0x154>
    45c4:	01cb      	lsls	r3, r1, #7
    45c6:	1ac0      	subs	r0, r0, r3
    45c8:	4152      	adcs	r2, r2
    45ca:	0983      	lsrs	r3, r0, #6
    45cc:	428b      	cmp	r3, r1
    45ce:	d301      	bcc.n	45d4 <__divsi3+0x160>
    45d0:	018b      	lsls	r3, r1, #6
    45d2:	1ac0      	subs	r0, r0, r3
    45d4:	4152      	adcs	r2, r2
    45d6:	0943      	lsrs	r3, r0, #5
    45d8:	428b      	cmp	r3, r1
    45da:	d301      	bcc.n	45e0 <__divsi3+0x16c>
    45dc:	014b      	lsls	r3, r1, #5
    45de:	1ac0      	subs	r0, r0, r3
    45e0:	4152      	adcs	r2, r2
    45e2:	0903      	lsrs	r3, r0, #4
    45e4:	428b      	cmp	r3, r1
    45e6:	d301      	bcc.n	45ec <__divsi3+0x178>
    45e8:	010b      	lsls	r3, r1, #4
    45ea:	1ac0      	subs	r0, r0, r3
    45ec:	4152      	adcs	r2, r2
    45ee:	08c3      	lsrs	r3, r0, #3
    45f0:	428b      	cmp	r3, r1
    45f2:	d301      	bcc.n	45f8 <__divsi3+0x184>
    45f4:	00cb      	lsls	r3, r1, #3
    45f6:	1ac0      	subs	r0, r0, r3
    45f8:	4152      	adcs	r2, r2
    45fa:	0883      	lsrs	r3, r0, #2
    45fc:	428b      	cmp	r3, r1
    45fe:	d301      	bcc.n	4604 <__divsi3+0x190>
    4600:	008b      	lsls	r3, r1, #2
    4602:	1ac0      	subs	r0, r0, r3
    4604:	4152      	adcs	r2, r2
    4606:	d2d9      	bcs.n	45bc <__divsi3+0x148>
    4608:	0843      	lsrs	r3, r0, #1
    460a:	428b      	cmp	r3, r1
    460c:	d301      	bcc.n	4612 <__divsi3+0x19e>
    460e:	004b      	lsls	r3, r1, #1
    4610:	1ac0      	subs	r0, r0, r3
    4612:	4152      	adcs	r2, r2
    4614:	1a41      	subs	r1, r0, r1
    4616:	d200      	bcs.n	461a <__divsi3+0x1a6>
    4618:	4601      	mov	r1, r0
    461a:	4663      	mov	r3, ip
    461c:	4152      	adcs	r2, r2
    461e:	105b      	asrs	r3, r3, #1
    4620:	4610      	mov	r0, r2
    4622:	d301      	bcc.n	4628 <__divsi3+0x1b4>
    4624:	4240      	negs	r0, r0
    4626:	2b00      	cmp	r3, #0
    4628:	d500      	bpl.n	462c <__divsi3+0x1b8>
    462a:	4249      	negs	r1, r1
    462c:	4770      	bx	lr
    462e:	4663      	mov	r3, ip
    4630:	105b      	asrs	r3, r3, #1
    4632:	d300      	bcc.n	4636 <__divsi3+0x1c2>
    4634:	4240      	negs	r0, r0
    4636:	b501      	push	{r0, lr}
    4638:	2000      	movs	r0, #0
    463a:	f000 f805 	bl	4648 <__aeabi_idiv0>
    463e:	bd02      	pop	{r1, pc}

00004640 <__aeabi_idivmod>:
    4640:	2900      	cmp	r1, #0
    4642:	d0f8      	beq.n	4636 <__divsi3+0x1c2>
    4644:	e716      	b.n	4474 <__divsi3>
    4646:	4770      	bx	lr

00004648 <__aeabi_idiv0>:
    4648:	4770      	bx	lr
    464a:	46c0      	nop			; (mov r8, r8)

0000464c <__ctzsi2>:
    464c:	4241      	negs	r1, r0
    464e:	4008      	ands	r0, r1
    4650:	211c      	movs	r1, #28
    4652:	2301      	movs	r3, #1
    4654:	041b      	lsls	r3, r3, #16
    4656:	4298      	cmp	r0, r3
    4658:	d301      	bcc.n	465e <__ctzsi2+0x12>
    465a:	0c00      	lsrs	r0, r0, #16
    465c:	3910      	subs	r1, #16
    465e:	0a1b      	lsrs	r3, r3, #8
    4660:	4298      	cmp	r0, r3
    4662:	d301      	bcc.n	4668 <__ctzsi2+0x1c>
    4664:	0a00      	lsrs	r0, r0, #8
    4666:	3908      	subs	r1, #8
    4668:	091b      	lsrs	r3, r3, #4
    466a:	4298      	cmp	r0, r3
    466c:	d301      	bcc.n	4672 <__ctzsi2+0x26>
    466e:	0900      	lsrs	r0, r0, #4
    4670:	3904      	subs	r1, #4
    4672:	a202      	add	r2, pc, #8	; (adr r2, 467c <__ctzsi2+0x30>)
    4674:	5c10      	ldrb	r0, [r2, r0]
    4676:	1a40      	subs	r0, r0, r1
    4678:	4770      	bx	lr
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	1d1d1c1b 	.word	0x1d1d1c1b
    4680:	1e1e1e1e 	.word	0x1e1e1e1e
    4684:	1f1f1f1f 	.word	0x1f1f1f1f
    4688:	1f1f1f1f 	.word	0x1f1f1f1f

0000468c <__libc_init_array>:
    468c:	b570      	push	{r4, r5, r6, lr}
    468e:	2600      	movs	r6, #0
    4690:	4d0c      	ldr	r5, [pc, #48]	; (46c4 <__libc_init_array+0x38>)
    4692:	4c0d      	ldr	r4, [pc, #52]	; (46c8 <__libc_init_array+0x3c>)
    4694:	1b64      	subs	r4, r4, r5
    4696:	10a4      	asrs	r4, r4, #2
    4698:	42a6      	cmp	r6, r4
    469a:	d109      	bne.n	46b0 <__libc_init_array+0x24>
    469c:	2600      	movs	r6, #0
    469e:	f000 f923 	bl	48e8 <_init>
    46a2:	4d0a      	ldr	r5, [pc, #40]	; (46cc <__libc_init_array+0x40>)
    46a4:	4c0a      	ldr	r4, [pc, #40]	; (46d0 <__libc_init_array+0x44>)
    46a6:	1b64      	subs	r4, r4, r5
    46a8:	10a4      	asrs	r4, r4, #2
    46aa:	42a6      	cmp	r6, r4
    46ac:	d105      	bne.n	46ba <__libc_init_array+0x2e>
    46ae:	bd70      	pop	{r4, r5, r6, pc}
    46b0:	00b3      	lsls	r3, r6, #2
    46b2:	58eb      	ldr	r3, [r5, r3]
    46b4:	4798      	blx	r3
    46b6:	3601      	adds	r6, #1
    46b8:	e7ee      	b.n	4698 <__libc_init_array+0xc>
    46ba:	00b3      	lsls	r3, r6, #2
    46bc:	58eb      	ldr	r3, [r5, r3]
    46be:	4798      	blx	r3
    46c0:	3601      	adds	r6, #1
    46c2:	e7f2      	b.n	46aa <__libc_init_array+0x1e>
    46c4:	000048f4 	.word	0x000048f4
    46c8:	000048f4 	.word	0x000048f4
    46cc:	000048f4 	.word	0x000048f4
    46d0:	000048f8 	.word	0x000048f8

000046d4 <memcpy>:
    46d4:	2300      	movs	r3, #0
    46d6:	b510      	push	{r4, lr}
    46d8:	429a      	cmp	r2, r3
    46da:	d100      	bne.n	46de <memcpy+0xa>
    46dc:	bd10      	pop	{r4, pc}
    46de:	5ccc      	ldrb	r4, [r1, r3]
    46e0:	54c4      	strb	r4, [r0, r3]
    46e2:	3301      	adds	r3, #1
    46e4:	e7f8      	b.n	46d8 <memcpy+0x4>

000046e6 <memset>:
    46e6:	0003      	movs	r3, r0
    46e8:	1882      	adds	r2, r0, r2
    46ea:	4293      	cmp	r3, r2
    46ec:	d100      	bne.n	46f0 <memset+0xa>
    46ee:	4770      	bx	lr
    46f0:	7019      	strb	r1, [r3, #0]
    46f2:	3301      	adds	r3, #1
    46f4:	e7f9      	b.n	46ea <memset+0x4>
	...

000046f8 <key_0>:
    46f8:	0009 0000 0000 0000                         ........

00004700 <key_1>:
	...

00004708 <key_2>:
    4708:	0001 0000 0000 0000                         ........

00004710 <key_3>:
    4710:	0002 0000 0000 0000                         ........

00004718 <key_4>:
    4718:	0003 0000 0000 0000                         ........

00004720 <key_5>:
    4720:	0004 0000 0000 0000                         ........

00004728 <key_6>:
    4728:	0005 0000 0000 0000                         ........

00004730 <key_7>:
    4730:	0006 0000 0000 0000                         ........

00004738 <key_8>:
    4738:	0007 0000 0000 0000                         ........

00004740 <key_9>:
    4740:	0008 0000 0000 0000                         ........

00004748 <key_A>:
    4748:	0001 0000 0002 0000                         ........

00004750 <key_B>:
    4750:	0005 0000 0003 0000                         ........

00004758 <key_BCKSP>:
    4758:	0003 0000 0005 0000                         ........

00004760 <key_C>:
    4760:	0003 0000 0003 0000                         ........

00004768 <key_COMMA>:
    4768:	0008 0000 0003 0000                         ........

00004770 <key_CPSLCK>:
    4770:	0000 0000 0002 0000                         ........

00004778 <key_D>:
    4778:	0003 0000 0002 0000                         ........

00004780 <key_DOT>:
    4780:	0009 0000 0003 0000                         ........

00004788 <key_DOWN>:
    4788:	0007 0000 0005 0000                         ........

00004790 <key_E>:
    4790:	0003 0000 0001 0000                         ........

00004798 <key_ENT>:
    4798:	0009 0000 0004 0000                         ........

000047a0 <key_F>:
    47a0:	0004 0000 0002 0000                         ........

000047a8 <key_G>:
    47a8:	0005 0000 0002 0000                         ........

000047b0 <key_H>:
    47b0:	0006 0000 0002 0000                         ........

000047b8 <key_I>:
    47b8:	0008 0000 0001 0000                         ........

000047c0 <key_J>:
    47c0:	0007 0000 0002 0000                         ........

000047c8 <key_K>:
    47c8:	0008 0000 0002 0000                         ........

000047d0 <key_L>:
    47d0:	0009 0000 0002 0000                         ........

000047d8 <key_LEFT>:
    47d8:	0006 0000 0005 0000                         ........

000047e0 <key_M>:
    47e0:	0007 0000 0003 0000                         ........

000047e8 <key_N>:
    47e8:	0006 0000 0003 0000                         ........

000047f0 <key_O>:
    47f0:	0009 0000 0001 0000                         ........

000047f8 <key_P>:
    47f8:	000a 0000 0001 0000                         ........

00004800 <key_Q>:
    4800:	0001 0000 0001 0000                         ........

00004808 <key_QUEST>:
    4808:	0001 0000 0005 0000                         ........

00004810 <key_R>:
    4810:	0004 0000 0001 0000                         ........

00004818 <key_RIGHT>:
    4818:	0008 0000 0005 0000                         ........

00004820 <key_S>:
    4820:	0002 0000 0002 0000                         ........

00004828 <key_SPC>:
    4828:	0005 0000 0005 0000                         ........

00004830 <key_T>:
    4830:	0005 0000 0001 0000                         ........

00004838 <key_TAB>:
    4838:	0000 0000 0001 0000                         ........

00004840 <key_U>:
    4840:	0007 0000 0001 0000                         ........

00004848 <key_UP>:
    4848:	0009 0000 0005 0000                         ........

00004850 <key_V>:
    4850:	0004 0000 0003 0000                         ........

00004858 <key_W>:
    4858:	0002 0000 0001 0000                         ........

00004860 <key_X>:
    4860:	0002 0000 0003 0000                         ........

00004868 <key_Y>:
    4868:	0001 0000 0003 0000                         ........

00004870 <key_Z>:
    4870:	0006 0000 0001 0000 1e9e 0000 1e9a 0000     ................
    4880:	1e9a 0000 1f04 0000 1f04 0000 1eb4 0000     ................
    4890:	1ea4 0000 1eba 0000 1ef2 0000 2074 0000     ............t ..
    48a0:	2054 0000 2054 0000 2100 0000 2066 0000     T ..T ...!..f ..
    48b0:	2082 0000 2058 0000 2090 0000 20e4 0000     . ..X ... ... ..
    48c0:	3570 0000 357e 0000 3618 0000 36b8 0000     p5..~5...6...6..
    48d0:	371c 0000                                   .7..

000048d4 <_usb_device_irq_bits>:
    48d4:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

000048e4 <_usb_endpoint_irq_bits>:
    48e4:	0c03 6010                                   ...`

000048e8 <_init>:
    48e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ea:	46c0      	nop			; (mov r8, r8)
    48ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48ee:	bc08      	pop	{r3}
    48f0:	469e      	mov	lr, r3
    48f2:	4770      	bx	lr

000048f4 <__init_array_start>:
    48f4:	000000dd 	.word	0x000000dd

000048f8 <_fini>:
    48f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48fe:	bc08      	pop	{r3}
    4900:	469e      	mov	lr, r3
    4902:	4770      	bx	lr

00004904 <__fini_array_start>:
    4904:	000000b5 	.word	0x000000b5
