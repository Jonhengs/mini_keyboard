
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004068  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000200e0  2**0
                  CONTENTS
  3 .bss          00000580  200000e0  00004148  000200e0  2**2
                  ALLOC
  4 .stack        00000800  20000660  000046c8  000200e0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  7 .debug_info   00027f35  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000047c6  00000000  00000000  00048096  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000660f  00000000  00000000  0004c85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000780  00000000  00000000  00052e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008b0  00000000  00000000  000535eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002050f  00000000  00000000  00053e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001166f  00000000  00000000  000743aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009d568  00000000  00000000  00085a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001284  00000000  00000000  00122f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 0e 00 20 45 37 00 00 41 37 00 00 41 37 00 00     `.. E7..A7..A7..
	...
      2c:	41 37 00 00 00 00 00 00 00 00 00 00 41 37 00 00     A7..........A7..
      3c:	75 06 00 00 41 37 00 00 41 37 00 00 41 37 00 00     u...A7..A7..A7..
      4c:	e1 11 00 00 41 37 00 00 41 37 00 00 71 2e 00 00     ....A7..A7..q...
      5c:	41 37 00 00 41 37 00 00 41 37 00 00 41 37 00 00     A7..A7..A7..A7..
      6c:	41 37 00 00 41 37 00 00 41 37 00 00 41 37 00 00     A7..A7..A7..A7..
      7c:	41 37 00 00 41 37 00 00 41 37 00 00 41 37 00 00     A7..A7..A7..A7..
      8c:	41 37 00 00 41 37 00 00 41 37 00 00 41 37 00 00     A7..A7..A7..A7..
      9c:	41 37 00 00 41 37 00 00 41 37 00 00 41 37 00 00     A7..A7..A7..A7..
      ac:	41 37 00 00 00 00 00 00                             A7......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000e0 	.word	0x200000e0
      d4:	00000000 	.word	0x00000000
      d8:	00004068 	.word	0x00004068

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e4 	.word	0x200000e4
     108:	00004068 	.word	0x00004068
     10c:	00004068 	.word	0x00004068
     110:	00000000 	.word	0x00000000

00000114 <usb_set_kbd_key>:
static volatile bool main_b_kbd_enable = false;

/************************************************************************/
/* Send signal (up / down) via USB to PC								*/
/************************************************************************/
static bool usb_set_kbd_key(uint8_t key, bool down) {
     114:	b570      	push	{r4, r5, r6, lr}
     116:	000d      	movs	r5, r1
	if (!main_b_kbd_enable) {
     118:	4b07      	ldr	r3, [pc, #28]	; (138 <usb_set_kbd_key+0x24>)
     11a:	781c      	ldrb	r4, [r3, #0]
     11c:	b2e4      	uxtb	r4, r4
     11e:	2c00      	cmp	r4, #0
     120:	d003      	beq.n	12a <usb_set_kbd_key+0x16>
		return false;
	}
	
	if (down) {
     122:	2900      	cmp	r1, #0
     124:	d103      	bne.n	12e <usb_set_kbd_key+0x1a>
		udi_hid_kbd_down(key);
	}
	else {
		udi_hid_kbd_up(key);
     126:	4b05      	ldr	r3, [pc, #20]	; (13c <usb_set_kbd_key+0x28>)
     128:	4798      	blx	r3
	}
	
	return true;
}
     12a:	0020      	movs	r0, r4
     12c:	bd70      	pop	{r4, r5, r6, pc}
		udi_hid_kbd_down(key);
     12e:	4b04      	ldr	r3, [pc, #16]	; (140 <usb_set_kbd_key+0x2c>)
     130:	4798      	blx	r3
	return true;
     132:	002c      	movs	r4, r5
     134:	e7f9      	b.n	12a <usb_set_kbd_key+0x16>
     136:	46c0      	nop			; (mov r8, r8)
     138:	20000100 	.word	0x20000100
     13c:	000008f9 	.word	0x000008f9
     140:	000009b9 	.word	0x000009b9

00000144 <usb_set_kbd_modifier>:
static bool usb_set_kbd_modifier(uint8_t key, bool down) {
     144:	b570      	push	{r4, r5, r6, lr}
     146:	000d      	movs	r5, r1
	if (!main_b_kbd_enable) {
     148:	4b07      	ldr	r3, [pc, #28]	; (168 <usb_set_kbd_modifier+0x24>)
     14a:	781c      	ldrb	r4, [r3, #0]
     14c:	b2e4      	uxtb	r4, r4
     14e:	2c00      	cmp	r4, #0
     150:	d003      	beq.n	15a <usb_set_kbd_modifier+0x16>
		return false;
	}
	
	if (down) {
     152:	2900      	cmp	r1, #0
     154:	d103      	bne.n	15e <usb_set_kbd_modifier+0x1a>
		udi_hid_kbd_modifier_down(key);
	}
	else {
		udi_hid_kbd_modifier_up(key);
     156:	4b05      	ldr	r3, [pc, #20]	; (16c <usb_set_kbd_modifier+0x28>)
     158:	4798      	blx	r3
	}
	
	return true;
}
     15a:	0020      	movs	r0, r4
     15c:	bd70      	pop	{r4, r5, r6, pc}
		udi_hid_kbd_modifier_down(key);
     15e:	4b04      	ldr	r3, [pc, #16]	; (170 <usb_set_kbd_modifier+0x2c>)
     160:	4798      	blx	r3
	return true;
     162:	002c      	movs	r4, r5
     164:	e7f9      	b.n	15a <usb_set_kbd_modifier+0x16>
     166:	46c0      	nop			; (mov r8, r8)
     168:	20000100 	.word	0x20000100
     16c:	00000851 	.word	0x00000851
     170:	000008a5 	.word	0x000008a5

00000174 <keyboard_init>:
/* Pupblic functions													*/
/************************************************************************/
/************************************************************************/
/* Init function														*/
/************************************************************************/
void keyboard_init(void) {
     174:	b5f0      	push	{r4, r5, r6, r7, lr}
     176:	b083      	sub	sp, #12
	matrix_setup();
     178:	4b14      	ldr	r3, [pc, #80]	; (1cc <keyboard_init+0x58>)
     17a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     17c:	ac01      	add	r4, sp, #4
     17e:	2700      	movs	r7, #0
     180:	7027      	strb	r7, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     182:	2601      	movs	r6, #1
     184:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     186:	70a7      	strb	r7, [r4, #2]
	port_pin_set_config(PIN_CAPS,	&config_port_pin);
     188:	0021      	movs	r1, r4
     18a:	2006      	movs	r0, #6
     18c:	4d10      	ldr	r5, [pc, #64]	; (1d0 <keyboard_init+0x5c>)
     18e:	47a8      	blx	r5
	port_pin_set_config(PIN_CNTRL,	&config_port_pin);
     190:	0021      	movs	r1, r4
     192:	2004      	movs	r0, #4
     194:	47a8      	blx	r5
	port_pin_set_config(PIN_SHIFT,  &config_port_pin);
     196:	0021      	movs	r1, r4
     198:	2005      	movs	r0, #5
     19a:	47a8      	blx	r5
	port_pin_set_config(PIN_ALT,	&config_port_pin);
     19c:	0021      	movs	r1, r4
     19e:	2027      	movs	r0, #39	; 0x27
     1a0:	47a8      	blx	r5
	port_pin_set_config(PIN_ALT_GR,	&config_port_pin);
     1a2:	0021      	movs	r1, r4
     1a4:	2022      	movs	r0, #34	; 0x22
     1a6:	47a8      	blx	r5
	port_pin_set_config(PIN_SUP,	&config_port_pin);
     1a8:	0021      	movs	r1, r4
     1aa:	2028      	movs	r0, #40	; 0x28
     1ac:	47a8      	blx	r5
	port_pin_set_config(PIN_FN, 	&config_port_pin);
     1ae:	0021      	movs	r1, r4
     1b0:	2023      	movs	r0, #35	; 0x23
     1b2:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     1b4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1b6:	70a7      	strb	r7, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     1b8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(PIN_LED_FN, &config_port_pin);
     1ba:	0021      	movs	r1, r4
     1bc:	2021      	movs	r0, #33	; 0x21
     1be:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1c0:	2202      	movs	r2, #2
     1c2:	4b04      	ldr	r3, [pc, #16]	; (1d4 <keyboard_init+0x60>)
     1c4:	619a      	str	r2, [r3, #24]
	setup_gpio_pins();
}
     1c6:	b003      	add	sp, #12
     1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	00000461 	.word	0x00000461
     1d0:	000012d5 	.word	0x000012d5
     1d4:	40002880 	.word	0x40002880

000001d8 <keyboard_update>:

/************************************************************************/
/* keyboard update function, periodically called						*/
/************************************************************************/
void keyboard_update(void) {
     1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1da:	46de      	mov	lr, fp
     1dc:	4657      	mov	r7, sl
     1de:	464e      	mov	r6, r9
     1e0:	4645      	mov	r5, r8
     1e2:	b5e0      	push	{r5, r6, r7, lr}
     1e4:	b085      	sub	sp, #20
	return (port_base->IN.reg & pin_mask);
     1e6:	4b6b      	ldr	r3, [pc, #428]	; (394 <keyboard_update+0x1bc>)
     1e8:	6a1b      	ldr	r3, [r3, #32]
     1ea:	2208      	movs	r2, #8
     1ec:	401a      	ands	r2, r3
     1ee:	0013      	movs	r3, r2
     1f0:	1e59      	subs	r1, r3, #1
     1f2:	418b      	sbcs	r3, r1
     1f4:	b2db      	uxtb	r3, r3
	if (current_fn_led_state != state) {
     1f6:	4968      	ldr	r1, [pc, #416]	; (398 <keyboard_update+0x1c0>)
     1f8:	7809      	ldrb	r1, [r1, #0]
     1fa:	4299      	cmp	r1, r3
     1fc:	d006      	beq.n	20c <keyboard_update+0x34>
	if (level) {
     1fe:	2a00      	cmp	r2, #0
     200:	d077      	beq.n	2f2 <keyboard_update+0x11a>
		port_base->OUTSET.reg = pin_mask;
     202:	2102      	movs	r1, #2
     204:	4a63      	ldr	r2, [pc, #396]	; (394 <keyboard_update+0x1bc>)
     206:	6191      	str	r1, [r2, #24]
		current_fn_led_state = state;
     208:	4a63      	ldr	r2, [pc, #396]	; (398 <keyboard_update+0x1c0>)
     20a:	7013      	strb	r3, [r2, #0]
	update_fn_led();
	
	matrix_update_states();
     20c:	4b63      	ldr	r3, [pc, #396]	; (39c <keyboard_update+0x1c4>)
     20e:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
     210:	4b63      	ldr	r3, [pc, #396]	; (3a0 <keyboard_update+0x1c8>)
     212:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_CAPS);
     214:	099b      	lsrs	r3, r3, #6
     216:	2201      	movs	r2, #1
     218:	4053      	eors	r3, r2
     21a:	2401      	movs	r4, #1
     21c:	401c      	ands	r4, r3
	if (state != caps_key_pressed) {
     21e:	4b61      	ldr	r3, [pc, #388]	; (3a4 <keyboard_update+0x1cc>)
     220:	781b      	ldrb	r3, [r3, #0]
     222:	42a3      	cmp	r3, r4
     224:	d005      	beq.n	232 <keyboard_update+0x5a>
		usb_set_kbd_key(HID_CAPS_LOCK, state);
     226:	0021      	movs	r1, r4
     228:	2039      	movs	r0, #57	; 0x39
     22a:	4b5f      	ldr	r3, [pc, #380]	; (3a8 <keyboard_update+0x1d0>)
     22c:	4798      	blx	r3
		caps_key_pressed = state;
     22e:	4b5d      	ldr	r3, [pc, #372]	; (3a4 <keyboard_update+0x1cc>)
     230:	701c      	strb	r4, [r3, #0]
     232:	4b5b      	ldr	r3, [pc, #364]	; (3a0 <keyboard_update+0x1c8>)
     234:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_CNTRL);
     236:	091b      	lsrs	r3, r3, #4
     238:	2201      	movs	r2, #1
     23a:	4053      	eors	r3, r2
     23c:	2401      	movs	r4, #1
     23e:	401c      	ands	r4, r3
	if (state != cntrl_key_pressed) {
     240:	4b5a      	ldr	r3, [pc, #360]	; (3ac <keyboard_update+0x1d4>)
     242:	781b      	ldrb	r3, [r3, #0]
     244:	42a3      	cmp	r3, r4
     246:	d005      	beq.n	254 <keyboard_update+0x7c>
		usb_set_kbd_modifier(HID_MODIFIER_LEFT_CTRL, state);
     248:	0021      	movs	r1, r4
     24a:	2001      	movs	r0, #1
     24c:	4b58      	ldr	r3, [pc, #352]	; (3b0 <keyboard_update+0x1d8>)
     24e:	4798      	blx	r3
		cntrl_key_pressed = state;
     250:	4b56      	ldr	r3, [pc, #344]	; (3ac <keyboard_update+0x1d4>)
     252:	701c      	strb	r4, [r3, #0]
     254:	4b52      	ldr	r3, [pc, #328]	; (3a0 <keyboard_update+0x1c8>)
     256:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_SHIFT);
     258:	095b      	lsrs	r3, r3, #5
     25a:	2201      	movs	r2, #1
     25c:	4053      	eors	r3, r2
     25e:	2401      	movs	r4, #1
     260:	401c      	ands	r4, r3
	if (state != shift_key_pressed) {
     262:	4b54      	ldr	r3, [pc, #336]	; (3b4 <keyboard_update+0x1dc>)
     264:	781b      	ldrb	r3, [r3, #0]
     266:	42a3      	cmp	r3, r4
     268:	d005      	beq.n	276 <keyboard_update+0x9e>
		usb_set_kbd_modifier(HID_MODIFIER_LEFT_SHIFT, state);
     26a:	0021      	movs	r1, r4
     26c:	2002      	movs	r0, #2
     26e:	4b50      	ldr	r3, [pc, #320]	; (3b0 <keyboard_update+0x1d8>)
     270:	4798      	blx	r3
		shift_key_pressed = state;
     272:	4b50      	ldr	r3, [pc, #320]	; (3b4 <keyboard_update+0x1dc>)
     274:	701c      	strb	r4, [r3, #0]
     276:	4b47      	ldr	r3, [pc, #284]	; (394 <keyboard_update+0x1bc>)
     278:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_ALT);
     27a:	09db      	lsrs	r3, r3, #7
     27c:	2201      	movs	r2, #1
     27e:	4053      	eors	r3, r2
     280:	2401      	movs	r4, #1
     282:	401c      	ands	r4, r3
	if (state != alt_key_pressed) {
     284:	4b4c      	ldr	r3, [pc, #304]	; (3b8 <keyboard_update+0x1e0>)
     286:	781b      	ldrb	r3, [r3, #0]
     288:	42a3      	cmp	r3, r4
     28a:	d005      	beq.n	298 <keyboard_update+0xc0>
		usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, state);
     28c:	0021      	movs	r1, r4
     28e:	2040      	movs	r0, #64	; 0x40
     290:	4b47      	ldr	r3, [pc, #284]	; (3b0 <keyboard_update+0x1d8>)
     292:	4798      	blx	r3
		alt_key_pressed = state;
     294:	4b48      	ldr	r3, [pc, #288]	; (3b8 <keyboard_update+0x1e0>)
     296:	701c      	strb	r4, [r3, #0]
     298:	4b3e      	ldr	r3, [pc, #248]	; (394 <keyboard_update+0x1bc>)
     29a:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_ALT_GR);
     29c:	089b      	lsrs	r3, r3, #2
     29e:	2201      	movs	r2, #1
     2a0:	4053      	eors	r3, r2
     2a2:	2401      	movs	r4, #1
     2a4:	401c      	ands	r4, r3
	if (state != altGr_key_pressed) {
     2a6:	4b45      	ldr	r3, [pc, #276]	; (3bc <keyboard_update+0x1e4>)
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	42a3      	cmp	r3, r4
     2ac:	d005      	beq.n	2ba <keyboard_update+0xe2>
		usb_set_kbd_modifier(HID_MODIFIER_RIGHT_ALT, state);
     2ae:	0021      	movs	r1, r4
     2b0:	2040      	movs	r0, #64	; 0x40
     2b2:	4b3f      	ldr	r3, [pc, #252]	; (3b0 <keyboard_update+0x1d8>)
     2b4:	4798      	blx	r3
		altGr_key_pressed = state;
     2b6:	4b41      	ldr	r3, [pc, #260]	; (3bc <keyboard_update+0x1e4>)
     2b8:	701c      	strb	r4, [r3, #0]
     2ba:	4b36      	ldr	r3, [pc, #216]	; (394 <keyboard_update+0x1bc>)
     2bc:	6a1b      	ldr	r3, [r3, #32]
	bool state = !port_pin_get_input_level(PIN_SUP);
     2be:	0a1b      	lsrs	r3, r3, #8
     2c0:	2201      	movs	r2, #1
     2c2:	4053      	eors	r3, r2
     2c4:	2401      	movs	r4, #1
     2c6:	401c      	ands	r4, r3
	if (state != super_key_pressed) {
     2c8:	4b3d      	ldr	r3, [pc, #244]	; (3c0 <keyboard_update+0x1e8>)
     2ca:	781b      	ldrb	r3, [r3, #0]
     2cc:	42a3      	cmp	r3, r4
     2ce:	d005      	beq.n	2dc <keyboard_update+0x104>
		usb_set_kbd_modifier(HID_MODIFIER_LEFT_UI, state);
     2d0:	0021      	movs	r1, r4
     2d2:	2008      	movs	r0, #8
     2d4:	4b36      	ldr	r3, [pc, #216]	; (3b0 <keyboard_update+0x1d8>)
     2d6:	4798      	blx	r3
		super_key_pressed = state;
     2d8:	4b39      	ldr	r3, [pc, #228]	; (3c0 <keyboard_update+0x1e8>)
     2da:	701c      	strb	r4, [r3, #0]
     2dc:	4b39      	ldr	r3, [pc, #228]	; (3c4 <keyboard_update+0x1ec>)
     2de:	9303      	str	r3, [sp, #12]
void keyboard_update(void) {
     2e0:	2300      	movs	r3, #0
     2e2:	4699      	mov	r9, r3
		for (uint y=0; y<MATRIX_Y; y++) {
			if (keys[y][x].normal < 0) {
				// unused
				continue;
			}
			state = matrix_get_state(keys[y][x], true);
     2e4:	4b37      	ldr	r3, [pc, #220]	; (3c4 <keyboard_update+0x1ec>)
     2e6:	469a      	mov	sl, r3
     2e8:	4b37      	ldr	r3, [pc, #220]	; (3c8 <keyboard_update+0x1f0>)
     2ea:	469b      	mov	fp, r3
	return matrix_key_pressed[key.x_pos][key.y_pos];
     2ec:	4b37      	ldr	r3, [pc, #220]	; (3cc <keyboard_update+0x1f4>)
     2ee:	4698      	mov	r8, r3
     2f0:	e045      	b.n	37e <keyboard_update+0x1a6>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2f2:	2102      	movs	r1, #2
     2f4:	4a27      	ldr	r2, [pc, #156]	; (394 <keyboard_update+0x1bc>)
     2f6:	6151      	str	r1, [r2, #20]
     2f8:	e786      	b.n	208 <keyboard_update+0x30>
					// FN modifier
					usb_set_kbd_key(keys[y][x].mod_fn, state);
				}
				else {
					// normal key
					usb_set_kbd_key(keys[y][x].normal, state);
     2fa:	b2f0      	uxtb	r0, r6
     2fc:	9902      	ldr	r1, [sp, #8]
     2fe:	4b2a      	ldr	r3, [pc, #168]	; (3a8 <keyboard_update+0x1d0>)
     300:	4798      	blx	r3
	matrix_key_pressed[key.x_pos][key.y_pos] = isPressed;
     302:	683a      	ldr	r2, [r7, #0]
     304:	6879      	ldr	r1, [r7, #4]
     306:	0093      	lsls	r3, r2, #2
     308:	189b      	adds	r3, r3, r2
     30a:	4a30      	ldr	r2, [pc, #192]	; (3cc <keyboard_update+0x1f4>)
     30c:	4694      	mov	ip, r2
     30e:	4463      	add	r3, ip
     310:	466a      	mov	r2, sp
     312:	7a12      	ldrb	r2, [r2, #8]
     314:	545a      	strb	r2, [r3, r1]
		for (uint y=0; y<MATRIX_Y; y++) {
     316:	3501      	adds	r5, #1
     318:	34c0      	adds	r4, #192	; 0xc0
     31a:	2d05      	cmp	r5, #5
     31c:	d026      	beq.n	36c <keyboard_update+0x194>
     31e:	0027      	movs	r7, r4
			if (keys[y][x].normal < 0) {
     320:	68a6      	ldr	r6, [r4, #8]
     322:	2e00      	cmp	r6, #0
     324:	dbf7      	blt.n	316 <keyboard_update+0x13e>
			state = matrix_get_state(keys[y][x], true);
     326:	006b      	lsls	r3, r5, #1
     328:	195b      	adds	r3, r3, r5
     32a:	009b      	lsls	r3, r3, #2
     32c:	444b      	add	r3, r9
     32e:	011b      	lsls	r3, r3, #4
     330:	2201      	movs	r2, #1
     332:	9200      	str	r2, [sp, #0]
     334:	4652      	mov	r2, sl
     336:	5898      	ldr	r0, [r3, r2]
     338:	4453      	add	r3, sl
     33a:	6859      	ldr	r1, [r3, #4]
     33c:	689a      	ldr	r2, [r3, #8]
     33e:	68db      	ldr	r3, [r3, #12]
     340:	47d8      	blx	fp
     342:	0001      	movs	r1, r0
     344:	9002      	str	r0, [sp, #8]
	return matrix_key_pressed[key.x_pos][key.y_pos];
     346:	6822      	ldr	r2, [r4, #0]
     348:	0093      	lsls	r3, r2, #2
     34a:	189b      	adds	r3, r3, r2
     34c:	4443      	add	r3, r8
			if (state != get_matrix_key_pressed(keys[y][x])) {
     34e:	6862      	ldr	r2, [r4, #4]
     350:	5c9b      	ldrb	r3, [r3, r2]
     352:	4283      	cmp	r3, r0
     354:	d0df      	beq.n	316 <keyboard_update+0x13e>
	return (port_base->IN.reg & pin_mask);
     356:	4b0f      	ldr	r3, [pc, #60]	; (394 <keyboard_update+0x1bc>)
     358:	6a1b      	ldr	r3, [r3, #32]
				if ((read_special_key_press(PIN_FN)) && (keys[y][x].mod_fn > 0)) {
     35a:	071b      	lsls	r3, r3, #28
     35c:	d4cd      	bmi.n	2fa <keyboard_update+0x122>
     35e:	68e0      	ldr	r0, [r4, #12]
     360:	2800      	cmp	r0, #0
     362:	ddca      	ble.n	2fa <keyboard_update+0x122>
					usb_set_kbd_key(keys[y][x].mod_fn, state);
     364:	b2c0      	uxtb	r0, r0
     366:	4b10      	ldr	r3, [pc, #64]	; (3a8 <keyboard_update+0x1d0>)
     368:	4798      	blx	r3
     36a:	e7ca      	b.n	302 <keyboard_update+0x12a>
	for (uint x=0; x<MATRIX_X; x++) {
     36c:	2301      	movs	r3, #1
     36e:	469c      	mov	ip, r3
     370:	44e1      	add	r9, ip
     372:	9b03      	ldr	r3, [sp, #12]
     374:	3310      	adds	r3, #16
     376:	9303      	str	r3, [sp, #12]
     378:	464b      	mov	r3, r9
     37a:	2b0c      	cmp	r3, #12
     37c:	d002      	beq.n	384 <keyboard_update+0x1ac>
void keyboard_update(void) {
     37e:	9c03      	ldr	r4, [sp, #12]
     380:	2500      	movs	r5, #0
     382:	e7cc      	b.n	31e <keyboard_update+0x146>
}
     384:	b005      	add	sp, #20
     386:	bc3c      	pop	{r2, r3, r4, r5}
     388:	4690      	mov	r8, r2
     38a:	4699      	mov	r9, r3
     38c:	46a2      	mov	sl, r4
     38e:	46ab      	mov	fp, r5
     390:	bdf0      	pop	{r4, r5, r6, r7, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	40002880 	.word	0x40002880
     398:	20000000 	.word	0x20000000
     39c:	00000565 	.word	0x00000565
     3a0:	40002800 	.word	0x40002800
     3a4:	200000fe 	.word	0x200000fe
     3a8:	00000115 	.word	0x00000115
     3ac:	200000ff 	.word	0x200000ff
     3b0:	00000145 	.word	0x00000145
     3b4:	20000101 	.word	0x20000101
     3b8:	200000fd 	.word	0x200000fd
     3bc:	200000fc 	.word	0x200000fc
     3c0:	20000102 	.word	0x20000102
     3c4:	00003c18 	.word	0x00003c18
     3c8:	00000631 	.word	0x00000631
     3cc:	200001ac 	.word	0x200001ac

000003d0 <keyboard_set_kbd_enabled>:
	main_b_kbd_enable = true;
     3d0:	2201      	movs	r2, #1
     3d2:	4b02      	ldr	r3, [pc, #8]	; (3dc <keyboard_set_kbd_enabled+0xc>)
     3d4:	701a      	strb	r2, [r3, #0]
}
     3d6:	2001      	movs	r0, #1
     3d8:	4770      	bx	lr
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	20000100 	.word	0x20000100

000003e0 <keyboard_set_kbd_disabled>:
	main_b_kbd_enable = false;
     3e0:	2200      	movs	r2, #0
     3e2:	4b01      	ldr	r3, [pc, #4]	; (3e8 <keyboard_set_kbd_disabled+0x8>)
     3e4:	701a      	strb	r2, [r3, #0]
}
     3e6:	4770      	bx	lr
     3e8:	20000100 	.word	0x20000100

000003ec <read_line>:
			lastUpdateTime[i][j]	= 0;
		}	
	}
}

static void read_line(uint8_t signal_pin, uint8_t row) {
     3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3ee:	09c3      	lsrs	r3, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3f0:	2400      	movs	r4, #0
	if (port_index < PORT_INST_NUM) {
     3f2:	2b00      	cmp	r3, #0
     3f4:	d104      	bne.n	400 <read_line+0x14>
		return &(ports[port_index]->Group[group_index]);
     3f6:	0944      	lsrs	r4, r0, #5
     3f8:	01e4      	lsls	r4, r4, #7
     3fa:	4b16      	ldr	r3, [pc, #88]	; (454 <read_line+0x68>)
     3fc:	469c      	mov	ip, r3
     3fe:	4464      	add	r4, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     400:	231f      	movs	r3, #31
     402:	4018      	ands	r0, r3
     404:	2501      	movs	r5, #1
     406:	002b      	movs	r3, r5
     408:	4083      	lsls	r3, r0
     40a:	0018      	movs	r0, r3
		port_base->OUTCLR.reg = pin_mask;
     40c:	6163      	str	r3, [r4, #20]
	return (port_base->IN.reg & pin_mask);
     40e:	4e11      	ldr	r6, [pc, #68]	; (454 <read_line+0x68>)
     410:	6a32      	ldr	r2, [r6, #32]
	port_pin_set_output_level(signal_pin, false);
	
	buttons_unbounced[row][0]	= !port_pin_get_input_level(PIN_READ_00);
     412:	4f11      	ldr	r7, [pc, #68]	; (458 <read_line+0x6c>)
     414:	008b      	lsls	r3, r1, #2
     416:	1859      	adds	r1, r3, r1
     418:	0b52      	lsrs	r2, r2, #13
     41a:	406a      	eors	r2, r5
     41c:	2301      	movs	r3, #1
     41e:	401a      	ands	r2, r3
     420:	55ca      	strb	r2, [r1, r7]
     422:	6a32      	ldr	r2, [r6, #32]
	buttons_unbounced[row][1]	= !port_pin_get_input_level(PIN_READ_01);
     424:	1879      	adds	r1, r7, r1
     426:	0b12      	lsrs	r2, r2, #12
     428:	406a      	eors	r2, r5
     42a:	401a      	ands	r2, r3
     42c:	704a      	strb	r2, [r1, #1]
     42e:	6a32      	ldr	r2, [r6, #32]
	buttons_unbounced[row][2]	= !port_pin_get_input_level(PIN_READ_02);
     430:	0b92      	lsrs	r2, r2, #14
     432:	406a      	eors	r2, r5
     434:	401a      	ands	r2, r3
     436:	708a      	strb	r2, [r1, #2]
     438:	6a32      	ldr	r2, [r6, #32]
	buttons_unbounced[row][3]	= !port_pin_get_input_level(PIN_READ_03);
     43a:	0bd2      	lsrs	r2, r2, #15
     43c:	406a      	eors	r2, r5
     43e:	401a      	ands	r2, r3
     440:	70ca      	strb	r2, [r1, #3]
     442:	4a06      	ldr	r2, [pc, #24]	; (45c <read_line+0x70>)
     444:	6a12      	ldr	r2, [r2, #32]
	buttons_unbounced[row][4]	= !port_pin_get_input_level(PIN_READ_04);
     446:	0992      	lsrs	r2, r2, #6
     448:	4055      	eors	r5, r2
     44a:	402b      	ands	r3, r5
     44c:	710b      	strb	r3, [r1, #4]
		port_base->OUTSET.reg = pin_mask;
     44e:	61a0      	str	r0, [r4, #24]
	
	port_pin_set_output_level(signal_pin, true);
}
     450:	bdf0      	pop	{r4, r5, r6, r7, pc}
     452:	46c0      	nop			; (mov r8, r8)
     454:	40002800 	.word	0x40002800
     458:	20000314 	.word	0x20000314
     45c:	40002880 	.word	0x40002880

00000460 <matrix_setup>:
void matrix_setup(void)  {
     460:	b570      	push	{r4, r5, r6, lr}
     462:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
     464:	ac01      	add	r4, sp, #4
     466:	2300      	movs	r3, #0
     468:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     46a:	2601      	movs	r6, #1
     46c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     46e:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(PIN_READ_00, &config_port_pin);
     470:	0021      	movs	r1, r4
     472:	200d      	movs	r0, #13
     474:	4d36      	ldr	r5, [pc, #216]	; (550 <matrix_setup+0xf0>)
     476:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_01, &config_port_pin);
     478:	0021      	movs	r1, r4
     47a:	200c      	movs	r0, #12
     47c:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_02, &config_port_pin);
     47e:	0021      	movs	r1, r4
     480:	200e      	movs	r0, #14
     482:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_03, &config_port_pin);
     484:	0021      	movs	r1, r4
     486:	200f      	movs	r0, #15
     488:	47a8      	blx	r5
	port_pin_set_config(PIN_READ_04, &config_port_pin);
     48a:	0021      	movs	r1, r4
     48c:	2026      	movs	r0, #38	; 0x26
     48e:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     490:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(PIN_SIG_00, &config_port_pin);
     492:	0021      	movs	r1, r4
     494:	2007      	movs	r0, #7
     496:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_01, &config_port_pin);
     498:	0021      	movs	r1, r4
     49a:	2008      	movs	r0, #8
     49c:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_02, &config_port_pin);
     49e:	0021      	movs	r1, r4
     4a0:	2009      	movs	r0, #9
     4a2:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_03, &config_port_pin);
     4a4:	0021      	movs	r1, r4
     4a6:	200a      	movs	r0, #10
     4a8:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_04, &config_port_pin);
     4aa:	0021      	movs	r1, r4
     4ac:	200b      	movs	r0, #11
     4ae:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_05, &config_port_pin);
     4b0:	0021      	movs	r1, r4
     4b2:	202a      	movs	r0, #42	; 0x2a
     4b4:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_06, &config_port_pin);
     4b6:	0021      	movs	r1, r4
     4b8:	2013      	movs	r0, #19
     4ba:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_07, &config_port_pin);
     4bc:	0021      	movs	r1, r4
     4be:	2030      	movs	r0, #48	; 0x30
     4c0:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_08, &config_port_pin);
     4c2:	0021      	movs	r1, r4
     4c4:	2031      	movs	r0, #49	; 0x31
     4c6:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_09, &config_port_pin);
     4c8:	0021      	movs	r1, r4
     4ca:	2014      	movs	r0, #20
     4cc:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_10, &config_port_pin);
     4ce:	0021      	movs	r1, r4
     4d0:	2015      	movs	r0, #21
     4d2:	47a8      	blx	r5
	port_pin_set_config(PIN_SIG_11, &config_port_pin);
     4d4:	0021      	movs	r1, r4
     4d6:	2016      	movs	r0, #22
     4d8:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     4da:	4b1e      	ldr	r3, [pc, #120]	; (554 <matrix_setup+0xf4>)
     4dc:	2280      	movs	r2, #128	; 0x80
     4de:	619a      	str	r2, [r3, #24]
     4e0:	2180      	movs	r1, #128	; 0x80
     4e2:	0049      	lsls	r1, r1, #1
     4e4:	6199      	str	r1, [r3, #24]
     4e6:	3101      	adds	r1, #1
     4e8:	31ff      	adds	r1, #255	; 0xff
     4ea:	6199      	str	r1, [r3, #24]
     4ec:	2180      	movs	r1, #128	; 0x80
     4ee:	00c9      	lsls	r1, r1, #3
     4f0:	6199      	str	r1, [r3, #24]
     4f2:	2080      	movs	r0, #128	; 0x80
     4f4:	0100      	lsls	r0, r0, #4
     4f6:	6198      	str	r0, [r3, #24]
     4f8:	469c      	mov	ip, r3
     4fa:	4462      	add	r2, ip
     4fc:	6191      	str	r1, [r2, #24]
     4fe:	2180      	movs	r1, #128	; 0x80
     500:	0309      	lsls	r1, r1, #12
     502:	6199      	str	r1, [r3, #24]
     504:	2180      	movs	r1, #128	; 0x80
     506:	0249      	lsls	r1, r1, #9
     508:	6191      	str	r1, [r2, #24]
     50a:	2180      	movs	r1, #128	; 0x80
     50c:	0289      	lsls	r1, r1, #10
     50e:	6191      	str	r1, [r2, #24]
     510:	2280      	movs	r2, #128	; 0x80
     512:	0352      	lsls	r2, r2, #13
     514:	619a      	str	r2, [r3, #24]
     516:	2280      	movs	r2, #128	; 0x80
     518:	0392      	lsls	r2, r2, #14
     51a:	619a      	str	r2, [r3, #24]
     51c:	2280      	movs	r2, #128	; 0x80
     51e:	03d2      	lsls	r2, r2, #15
     520:	619a      	str	r2, [r3, #24]
     522:	4d0d      	ldr	r5, [pc, #52]	; (558 <matrix_setup+0xf8>)
     524:	4c0d      	ldr	r4, [pc, #52]	; (55c <matrix_setup+0xfc>)
     526:	480e      	ldr	r0, [pc, #56]	; (560 <matrix_setup+0x100>)
     528:	002e      	movs	r6, r5
     52a:	36f0      	adds	r6, #240	; 0xf0
			buttons_unbounced[i][j] = false;
     52c:	2200      	movs	r2, #0
     52e:	e004      	b.n	53a <matrix_setup+0xda>
     530:	3514      	adds	r5, #20
     532:	3405      	adds	r4, #5
     534:	3005      	adds	r0, #5
	for (int i = 0; i<MATRIX_X; i++) {
     536:	42b5      	cmp	r5, r6
     538:	d008      	beq.n	54c <matrix_setup+0xec>
void matrix_setup(void)  {
     53a:	0029      	movs	r1, r5
     53c:	2300      	movs	r3, #0
			buttons_unbounced[i][j] = false;
     53e:	54e2      	strb	r2, [r4, r3]
			buttons_debounced[i][j]	= false;
     540:	54c2      	strb	r2, [r0, r3]
			lastUpdateTime[i][j]	= 0;
     542:	c104      	stmia	r1!, {r2}
		for (int j = 0; j<MATRIX_Y; j++) {
     544:	3301      	adds	r3, #1
     546:	2b05      	cmp	r3, #5
     548:	d1f9      	bne.n	53e <matrix_setup+0xde>
     54a:	e7f1      	b.n	530 <matrix_setup+0xd0>
}
     54c:	b002      	add	sp, #8
     54e:	bd70      	pop	{r4, r5, r6, pc}
     550:	000012d5 	.word	0x000012d5
     554:	40002800 	.word	0x40002800
     558:	200001e8 	.word	0x200001e8
     55c:	20000314 	.word	0x20000314
     560:	200002d8 	.word	0x200002d8

00000564 <matrix_update_states>:
	
	// test solution
	// buttons_debounced[x][y] = buttons_unbounced[x][y];
}

void matrix_update_states(void) {
     564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     566:	46de      	mov	lr, fp
     568:	4657      	mov	r7, sl
     56a:	464e      	mov	r6, r9
     56c:	4645      	mov	r5, r8
     56e:	b5e0      	push	{r5, r6, r7, lr}
	read_line(PIN_SIG_00, 0);
     570:	2100      	movs	r1, #0
     572:	2007      	movs	r0, #7
     574:	4c28      	ldr	r4, [pc, #160]	; (618 <matrix_update_states+0xb4>)
     576:	47a0      	blx	r4
	read_line(PIN_SIG_01, 1);
     578:	2101      	movs	r1, #1
     57a:	2008      	movs	r0, #8
     57c:	47a0      	blx	r4
	read_line(PIN_SIG_02, 2);
     57e:	2102      	movs	r1, #2
     580:	2009      	movs	r0, #9
     582:	47a0      	blx	r4
	read_line(PIN_SIG_03, 3);
     584:	2103      	movs	r1, #3
     586:	200a      	movs	r0, #10
     588:	47a0      	blx	r4
	read_line(PIN_SIG_04, 4);
     58a:	2104      	movs	r1, #4
     58c:	200b      	movs	r0, #11
     58e:	47a0      	blx	r4
	read_line(PIN_SIG_05, 5);
     590:	2105      	movs	r1, #5
     592:	202a      	movs	r0, #42	; 0x2a
     594:	47a0      	blx	r4
	read_line(PIN_SIG_06, 6);
     596:	2106      	movs	r1, #6
     598:	2013      	movs	r0, #19
     59a:	47a0      	blx	r4
	read_line(PIN_SIG_07, 7);
     59c:	2107      	movs	r1, #7
     59e:	2030      	movs	r0, #48	; 0x30
     5a0:	47a0      	blx	r4
	read_line(PIN_SIG_08, 8);
     5a2:	2108      	movs	r1, #8
     5a4:	2031      	movs	r0, #49	; 0x31
     5a6:	47a0      	blx	r4
	read_line(PIN_SIG_09, 9);
     5a8:	2109      	movs	r1, #9
     5aa:	2014      	movs	r0, #20
     5ac:	47a0      	blx	r4
	read_line(PIN_SIG_10, 10);
     5ae:	210a      	movs	r1, #10
     5b0:	2015      	movs	r0, #21
     5b2:	47a0      	blx	r4
	read_line(PIN_SIG_11, 11);
     5b4:	210b      	movs	r1, #11
     5b6:	2016      	movs	r0, #22
     5b8:	47a0      	blx	r4
     5ba:	4b18      	ldr	r3, [pc, #96]	; (61c <matrix_update_states+0xb8>)
     5bc:	4698      	mov	r8, r3
     5be:	4e18      	ldr	r6, [pc, #96]	; (620 <matrix_update_states+0xbc>)
     5c0:	4b18      	ldr	r3, [pc, #96]	; (624 <matrix_update_states+0xc0>)
     5c2:	469a      	mov	sl, r3
	if (millis() - DEBOUNCE_TIME < lastUpdateTime[x][y]) {
     5c4:	4b18      	ldr	r3, [pc, #96]	; (628 <matrix_update_states+0xc4>)
     5c6:	4699      	mov	r9, r3
		lastUpdateTime[x][y] = millis();
     5c8:	469b      	mov	fp, r3
     5ca:	e01b      	b.n	604 <matrix_update_states+0xa0>
	
	for (int i = 0; i < MATRIX_X; i++) {
		for (int j = 0; j < MATRIX_Y; j++) {
     5cc:	3401      	adds	r4, #1
     5ce:	3504      	adds	r5, #4
     5d0:	2c05      	cmp	r4, #5
     5d2:	d00d      	beq.n	5f0 <matrix_update_states+0x8c>
	if (millis() - DEBOUNCE_TIME < lastUpdateTime[x][y]) {
     5d4:	47c8      	blx	r9
     5d6:	3823      	subs	r0, #35	; 0x23
     5d8:	682b      	ldr	r3, [r5, #0]
     5da:	4298      	cmp	r0, r3
     5dc:	d3f6      	bcc.n	5cc <matrix_update_states+0x68>
	if (buttons_unbounced[x][y] != buttons_debounced[x][y]) {
     5de:	4643      	mov	r3, r8
     5e0:	5d1b      	ldrb	r3, [r3, r4]
     5e2:	5d32      	ldrb	r2, [r6, r4]
     5e4:	429a      	cmp	r2, r3
     5e6:	d0f1      	beq.n	5cc <matrix_update_states+0x68>
		buttons_debounced[x][y] = buttons_unbounced[x][y];
     5e8:	5533      	strb	r3, [r6, r4]
		lastUpdateTime[x][y] = millis();
     5ea:	47d8      	blx	fp
     5ec:	6028      	str	r0, [r5, #0]
     5ee:	e7ed      	b.n	5cc <matrix_update_states+0x68>
     5f0:	2305      	movs	r3, #5
     5f2:	469c      	mov	ip, r3
     5f4:	44e0      	add	r8, ip
     5f6:	3605      	adds	r6, #5
     5f8:	330f      	adds	r3, #15
     5fa:	469c      	mov	ip, r3
     5fc:	44e2      	add	sl, ip
	for (int i = 0; i < MATRIX_X; i++) {
     5fe:	4b0b      	ldr	r3, [pc, #44]	; (62c <matrix_update_states+0xc8>)
     600:	429e      	cmp	r6, r3
     602:	d002      	beq.n	60a <matrix_update_states+0xa6>
void matrix_update_states(void) {
     604:	4655      	mov	r5, sl
     606:	2400      	movs	r4, #0
     608:	e7e4      	b.n	5d4 <matrix_update_states+0x70>
			debounceBtn(i, j);
		}
	}	
}
     60a:	bc3c      	pop	{r2, r3, r4, r5}
     60c:	4690      	mov	r8, r2
     60e:	4699      	mov	r9, r3
     610:	46a2      	mov	sl, r4
     612:	46ab      	mov	fp, r5
     614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	000003ed 	.word	0x000003ed
     61c:	20000314 	.word	0x20000314
     620:	200002d8 	.word	0x200002d8
     624:	200001e8 	.word	0x200001e8
     628:	000006d1 	.word	0x000006d1
     62c:	20000314 	.word	0x20000314

00000630 <matrix_get_state>:

bool matrix_get_state(matrix_key key, bool debounced) {
     630:	b510      	push	{r4, lr}
     632:	b084      	sub	sp, #16
     634:	0004      	movs	r4, r0
     636:	9000      	str	r0, [sp, #0]
     638:	9101      	str	r1, [sp, #4]
     63a:	9202      	str	r2, [sp, #8]
     63c:	9303      	str	r3, [sp, #12]
     63e:	ab06      	add	r3, sp, #24
     640:	7819      	ldrb	r1, [r3, #0]
	if (key.x_pos >= MATRIX_X || key.y_pos>= MATRIX_Y) {
		return false;
     642:	2000      	movs	r0, #0
	if (key.x_pos >= MATRIX_X || key.y_pos>= MATRIX_Y) {
     644:	2c0b      	cmp	r4, #11
     646:	d809      	bhi.n	65c <matrix_get_state+0x2c>
     648:	9a01      	ldr	r2, [sp, #4]
     64a:	2a04      	cmp	r2, #4
     64c:	d806      	bhi.n	65c <matrix_get_state+0x2c>
	}
	
	if (debounced) {
     64e:	2900      	cmp	r1, #0
     650:	d106      	bne.n	660 <matrix_get_state+0x30>
		return buttons_debounced[key.x_pos][key.y_pos];
	}
	else {
		return buttons_unbounced[key.x_pos][key.y_pos];
     652:	00a1      	lsls	r1, r4, #2
     654:	1909      	adds	r1, r1, r4
     656:	4b05      	ldr	r3, [pc, #20]	; (66c <matrix_get_state+0x3c>)
     658:	185b      	adds	r3, r3, r1
     65a:	5c98      	ldrb	r0, [r3, r2]
	}
     65c:	b004      	add	sp, #16
     65e:	bd10      	pop	{r4, pc}
		return buttons_debounced[key.x_pos][key.y_pos];
     660:	00a1      	lsls	r1, r4, #2
     662:	1909      	adds	r1, r1, r4
     664:	4b02      	ldr	r3, [pc, #8]	; (670 <matrix_get_state+0x40>)
     666:	185b      	adds	r3, r3, r1
     668:	5c98      	ldrb	r0, [r3, r2]
     66a:	e7f7      	b.n	65c <matrix_get_state+0x2c>
     66c:	20000314 	.word	0x20000314
     670:	200002d8 	.word	0x200002d8

00000674 <SysTick_Handler>:
volatile uint32_t millis_counter = 0;

// System interupt
void SysTick_Handler(void)
{
	millis_counter++;
     674:	4a02      	ldr	r2, [pc, #8]	; (680 <SysTick_Handler+0xc>)
     676:	6813      	ldr	r3, [r2, #0]
     678:	3301      	adds	r3, #1
     67a:	6013      	str	r3, [r2, #0]
}
     67c:	4770      	bx	lr
     67e:	46c0      	nop			; (mov r8, r8)
     680:	20000104 	.word	0x20000104

00000684 <init_timing>:

void init_timing(void) {
     684:	b510      	push	{r4, lr}
	if (SysTick_Config( system_gclk_gen_get_hz(GCLK_GENERATOR_0) / 1000) )
     686:	2000      	movs	r0, #0
     688:	4b0c      	ldr	r3, [pc, #48]	; (6bc <init_timing+0x38>)
     68a:	4798      	blx	r3
     68c:	21fa      	movs	r1, #250	; 0xfa
     68e:	0089      	lsls	r1, r1, #2
     690:	4b0b      	ldr	r3, [pc, #44]	; (6c0 <init_timing+0x3c>)
     692:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
     694:	3801      	subs	r0, #1
     696:	4b0b      	ldr	r3, [pc, #44]	; (6c4 <init_timing+0x40>)
     698:	4298      	cmp	r0, r3
     69a:	d80e      	bhi.n	6ba <init_timing+0x36>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     69c:	4a0a      	ldr	r2, [pc, #40]	; (6c8 <init_timing+0x44>)
     69e:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     6a0:	480a      	ldr	r0, [pc, #40]	; (6cc <init_timing+0x48>)
     6a2:	6a03      	ldr	r3, [r0, #32]
     6a4:	021b      	lsls	r3, r3, #8
     6a6:	0a1b      	lsrs	r3, r3, #8
     6a8:	21c0      	movs	r1, #192	; 0xc0
     6aa:	0609      	lsls	r1, r1, #24
     6ac:	430b      	orrs	r3, r1
     6ae:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
     6b0:	2300      	movs	r3, #0
     6b2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     6b4:	3307      	adds	r3, #7
     6b6:	6013      	str	r3, [r2, #0]
	{
		while (1) {
			// error
		}
	}
}
     6b8:	bd10      	pop	{r4, pc}
     6ba:	e7fe      	b.n	6ba <init_timing+0x36>
     6bc:	000018f1 	.word	0x000018f1
     6c0:	00003881 	.word	0x00003881
     6c4:	00ffffff 	.word	0x00ffffff
     6c8:	e000e010 	.word	0xe000e010
     6cc:	e000ed00 	.word	0xe000ed00

000006d0 <millis>:

uint32_t millis(void) {
	return millis_counter;
     6d0:	4b01      	ldr	r3, [pc, #4]	; (6d8 <millis+0x8>)
     6d2:	6818      	ldr	r0, [r3, #0]
}
     6d4:	4770      	bx	lr
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	20000104 	.word	0x20000104

000006dc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     6dc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     6de:	2000      	movs	r0, #0
     6e0:	4b08      	ldr	r3, [pc, #32]	; (704 <delay_init+0x28>)
     6e2:	4798      	blx	r3
     6e4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     6e6:	4c08      	ldr	r4, [pc, #32]	; (708 <delay_init+0x2c>)
     6e8:	21fa      	movs	r1, #250	; 0xfa
     6ea:	0089      	lsls	r1, r1, #2
     6ec:	47a0      	blx	r4
     6ee:	4b07      	ldr	r3, [pc, #28]	; (70c <delay_init+0x30>)
     6f0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     6f2:	4907      	ldr	r1, [pc, #28]	; (710 <delay_init+0x34>)
     6f4:	0028      	movs	r0, r5
     6f6:	47a0      	blx	r4
     6f8:	4b06      	ldr	r3, [pc, #24]	; (714 <delay_init+0x38>)
     6fa:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     6fc:	2205      	movs	r2, #5
     6fe:	4b06      	ldr	r3, [pc, #24]	; (718 <delay_init+0x3c>)
     700:	601a      	str	r2, [r3, #0]
}
     702:	bd70      	pop	{r4, r5, r6, pc}
     704:	000018f1 	.word	0x000018f1
     708:	00003881 	.word	0x00003881
     70c:	20000004 	.word	0x20000004
     710:	000f4240 	.word	0x000f4240
     714:	20000008 	.word	0x20000008
     718:	e000e010 	.word	0xe000e010

0000071c <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
     71c:	2000      	movs	r0, #0
     71e:	4770      	bx	lr

00000720 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     720:	4b0b      	ldr	r3, [pc, #44]	; (750 <udi_hid_kbd_setreport+0x30>)
     722:	885b      	ldrh	r3, [r3, #2]
     724:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
     726:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     728:	2a02      	cmp	r2, #2
     72a:	d000      	beq.n	72e <udi_hid_kbd_setreport+0xe>
}
     72c:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     72e:	32fd      	adds	r2, #253	; 0xfd
     730:	421a      	tst	r2, r3
     732:	d1fb      	bne.n	72c <udi_hid_kbd_setreport+0xc>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
     734:	4b06      	ldr	r3, [pc, #24]	; (750 <udi_hid_kbd_setreport+0x30>)
     736:	88db      	ldrh	r3, [r3, #6]
     738:	2b01      	cmp	r3, #1
     73a:	d1f7      	bne.n	72c <udi_hid_kbd_setreport+0xc>
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
     73c:	4b04      	ldr	r3, [pc, #16]	; (750 <udi_hid_kbd_setreport+0x30>)
     73e:	4a05      	ldr	r2, [pc, #20]	; (754 <udi_hid_kbd_setreport+0x34>)
     740:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
     742:	4a05      	ldr	r2, [pc, #20]	; (758 <udi_hid_kbd_setreport+0x38>)
     744:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
     746:	2201      	movs	r2, #1
     748:	819a      	strh	r2, [r3, #12]
		return true;
     74a:	3001      	adds	r0, #1
     74c:	e7ee      	b.n	72c <udi_hid_kbd_setreport+0xc>
     74e:	46c0      	nop			; (mov r8, r8)
     750:	20000540 	.word	0x20000540
     754:	2000011c 	.word	0x2000011c
     758:	000007cd 	.word	0x000007cd

0000075c <udi_hid_kbd_enable>:
{
     75c:	b510      	push	{r4, lr}
	udi_hid_kbd_rate = 0;
     75e:	2400      	movs	r4, #0
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <udi_hid_kbd_enable+0x24>)
     762:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_protocol = 0;
     764:	4b07      	ldr	r3, [pc, #28]	; (784 <udi_hid_kbd_enable+0x28>)
     766:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
     768:	4b07      	ldr	r3, [pc, #28]	; (788 <udi_hid_kbd_enable+0x2c>)
     76a:	701c      	strb	r4, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
     76c:	2208      	movs	r2, #8
     76e:	2100      	movs	r1, #0
     770:	4806      	ldr	r0, [pc, #24]	; (78c <udi_hid_kbd_enable+0x30>)
     772:	4b07      	ldr	r3, [pc, #28]	; (790 <udi_hid_kbd_enable+0x34>)
     774:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <udi_hid_kbd_enable+0x38>)
     778:	701c      	strb	r4, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
     77a:	4b07      	ldr	r3, [pc, #28]	; (798 <udi_hid_kbd_enable+0x3c>)
     77c:	4798      	blx	r3
}
     77e:	bd10      	pop	{r4, pc}
     780:	20000110 	.word	0x20000110
     784:	2000010c 	.word	0x2000010c
     788:	20000108 	.word	0x20000108
     78c:	20000114 	.word	0x20000114
     790:	00003c07 	.word	0x00003c07
     794:	20000109 	.word	0x20000109
     798:	0000384d 	.word	0x0000384d

0000079c <udi_hid_kbd_disable>:
{
     79c:	b510      	push	{r4, lr}
	UDI_HID_KBD_DISABLE_EXT();
     79e:	4b01      	ldr	r3, [pc, #4]	; (7a4 <udi_hid_kbd_disable+0x8>)
     7a0:	4798      	blx	r3
}
     7a2:	bd10      	pop	{r4, pc}
     7a4:	00003859 	.word	0x00003859

000007a8 <udi_hid_kbd_setup>:
{
     7a8:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_kbd_rate,
     7aa:	4b03      	ldr	r3, [pc, #12]	; (7b8 <udi_hid_kbd_setup+0x10>)
     7ac:	4a03      	ldr	r2, [pc, #12]	; (7bc <udi_hid_kbd_setup+0x14>)
     7ae:	4904      	ldr	r1, [pc, #16]	; (7c0 <udi_hid_kbd_setup+0x18>)
     7b0:	4804      	ldr	r0, [pc, #16]	; (7c4 <udi_hid_kbd_setup+0x1c>)
     7b2:	4c05      	ldr	r4, [pc, #20]	; (7c8 <udi_hid_kbd_setup+0x20>)
     7b4:	47a0      	blx	r4
}
     7b6:	bd10      	pop	{r4, pc}
     7b8:	00000721 	.word	0x00000721
     7bc:	20000020 	.word	0x20000020
     7c0:	2000010c 	.word	0x2000010c
     7c4:	20000110 	.word	0x20000110
     7c8:	00000a5d 	.word	0x00000a5d

000007cc <udi_hid_kbd_setreport_valid>:
		udi_hid_kbd_send_report();
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
     7cc:	b510      	push	{r4, lr}
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
     7ce:	4b02      	ldr	r3, [pc, #8]	; (7d8 <udi_hid_kbd_setreport_valid+0xc>)
     7d0:	7818      	ldrb	r0, [r3, #0]
     7d2:	4b02      	ldr	r3, [pc, #8]	; (7dc <udi_hid_kbd_setreport_valid+0x10>)
     7d4:	4798      	blx	r3
}
     7d6:	bd10      	pop	{r4, pc}
     7d8:	2000011c 	.word	0x2000011c
     7dc:	00003865 	.word	0x00003865

000007e0 <udi_hid_kbd_send_report>:
{
     7e0:	b510      	push	{r4, lr}
     7e2:	b082      	sub	sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
     7e4:	4b0b      	ldr	r3, [pc, #44]	; (814 <STACK_SIZE+0x14>)
     7e6:	781b      	ldrb	r3, [r3, #0]
		return false;
     7e8:	2000      	movs	r0, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
     7ea:	2b00      	cmp	r3, #0
     7ec:	d001      	beq.n	7f2 <udi_hid_kbd_send_report+0x12>
}
     7ee:	b002      	add	sp, #8
     7f0:	bd10      	pop	{r4, pc}
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
     7f2:	4a09      	ldr	r2, [pc, #36]	; (818 <STACK_SIZE+0x18>)
     7f4:	4b09      	ldr	r3, [pc, #36]	; (81c <STACK_SIZE+0x1c>)
     7f6:	0011      	movs	r1, r2
     7f8:	cb11      	ldmia	r3!, {r0, r4}
     7fa:	c111      	stmia	r1!, {r0, r4}
	udi_hid_kbd_b_report_valid = false;
     7fc:	2100      	movs	r1, #0
     7fe:	4b08      	ldr	r3, [pc, #32]	; (820 <STACK_SIZE+0x20>)
     800:	7019      	strb	r1, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
     802:	4b08      	ldr	r3, [pc, #32]	; (824 <STACK_SIZE+0x24>)
     804:	9300      	str	r3, [sp, #0]
     806:	2308      	movs	r3, #8
     808:	2081      	movs	r0, #129	; 0x81
     80a:	4c07      	ldr	r4, [pc, #28]	; (828 <STACK_SIZE+0x28>)
     80c:	47a0      	blx	r4
	udi_hid_kbd_b_report_trans_ongoing =
     80e:	4a01      	ldr	r2, [pc, #4]	; (814 <STACK_SIZE+0x14>)
     810:	7010      	strb	r0, [r2, #0]
	return udi_hid_kbd_b_report_trans_ongoing;
     812:	e7ec      	b.n	7ee <udi_hid_kbd_send_report+0xe>
     814:	20000108 	.word	0x20000108
     818:	20000120 	.word	0x20000120
     81c:	20000114 	.word	0x20000114
     820:	20000109 	.word	0x20000109
     824:	0000082d 	.word	0x0000082d
     828:	000024b1 	.word	0x000024b1

0000082c <udi_hid_kbd_report_sent>:
{
     82c:	b510      	push	{r4, lr}
	udi_hid_kbd_b_report_trans_ongoing = false;
     82e:	2200      	movs	r2, #0
     830:	4b04      	ldr	r3, [pc, #16]	; (844 <udi_hid_kbd_report_sent+0x18>)
     832:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
     834:	4b04      	ldr	r3, [pc, #16]	; (848 <udi_hid_kbd_report_sent+0x1c>)
     836:	781b      	ldrb	r3, [r3, #0]
     838:	2b00      	cmp	r3, #0
     83a:	d100      	bne.n	83e <udi_hid_kbd_report_sent+0x12>
}
     83c:	bd10      	pop	{r4, pc}
		udi_hid_kbd_send_report();
     83e:	4b03      	ldr	r3, [pc, #12]	; (84c <udi_hid_kbd_report_sent+0x20>)
     840:	4798      	blx	r3
}
     842:	e7fb      	b.n	83c <udi_hid_kbd_report_sent+0x10>
     844:	20000108 	.word	0x20000108
     848:	20000109 	.word	0x20000109
     84c:	000007e1 	.word	0x000007e1

00000850 <udi_hid_kbd_modifier_up>:
{
     850:	b510      	push	{r4, lr}
     852:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     854:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     858:	425a      	negs	r2, r3
     85a:	4153      	adcs	r3, r2
     85c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     85e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     860:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     864:	2200      	movs	r2, #0
     866:	4b0b      	ldr	r3, [pc, #44]	; (894 <udi_hid_kbd_modifier_up+0x44>)
     868:	701a      	strb	r2, [r3, #0]
	return flags;
     86a:	9c01      	ldr	r4, [sp, #4]
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
     86c:	4a0a      	ldr	r2, [pc, #40]	; (898 <udi_hid_kbd_modifier_up+0x48>)
     86e:	7813      	ldrb	r3, [r2, #0]
     870:	4383      	bics	r3, r0
     872:	7013      	strb	r3, [r2, #0]
	udi_hid_kbd_b_report_valid = true;
     874:	2201      	movs	r2, #1
     876:	4b09      	ldr	r3, [pc, #36]	; (89c <udi_hid_kbd_modifier_up+0x4c>)
     878:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
     87a:	4b09      	ldr	r3, [pc, #36]	; (8a0 <udi_hid_kbd_modifier_up+0x50>)
     87c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     87e:	2c00      	cmp	r4, #0
     880:	d005      	beq.n	88e <udi_hid_kbd_modifier_up+0x3e>
		cpu_irq_enable();
     882:	2201      	movs	r2, #1
     884:	4b03      	ldr	r3, [pc, #12]	; (894 <udi_hid_kbd_modifier_up+0x44>)
     886:	701a      	strb	r2, [r3, #0]
     888:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     88c:	b662      	cpsie	i
}
     88e:	2001      	movs	r0, #1
     890:	b002      	add	sp, #8
     892:	bd10      	pop	{r4, pc}
     894:	200000dc 	.word	0x200000dc
     898:	20000114 	.word	0x20000114
     89c:	20000109 	.word	0x20000109
     8a0:	000007e1 	.word	0x000007e1

000008a4 <udi_hid_kbd_modifier_down>:
{
     8a4:	b510      	push	{r4, lr}
     8a6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8a8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     8ac:	425a      	negs	r2, r3
     8ae:	4153      	adcs	r3, r2
     8b0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     8b2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     8b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     8b8:	2200      	movs	r2, #0
     8ba:	4b0b      	ldr	r3, [pc, #44]	; (8e8 <udi_hid_kbd_modifier_down+0x44>)
     8bc:	701a      	strb	r2, [r3, #0]
	return flags;
     8be:	9c01      	ldr	r4, [sp, #4]
	udi_hid_kbd_report[0] |= modifier_id;
     8c0:	4b0a      	ldr	r3, [pc, #40]	; (8ec <udi_hid_kbd_modifier_down+0x48>)
     8c2:	781a      	ldrb	r2, [r3, #0]
     8c4:	4310      	orrs	r0, r2
     8c6:	7018      	strb	r0, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
     8c8:	2201      	movs	r2, #1
     8ca:	4b09      	ldr	r3, [pc, #36]	; (8f0 <udi_hid_kbd_modifier_down+0x4c>)
     8cc:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
     8ce:	4b09      	ldr	r3, [pc, #36]	; (8f4 <udi_hid_kbd_modifier_down+0x50>)
     8d0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
     8d2:	2c00      	cmp	r4, #0
     8d4:	d005      	beq.n	8e2 <udi_hid_kbd_modifier_down+0x3e>
		cpu_irq_enable();
     8d6:	2201      	movs	r2, #1
     8d8:	4b03      	ldr	r3, [pc, #12]	; (8e8 <udi_hid_kbd_modifier_down+0x44>)
     8da:	701a      	strb	r2, [r3, #0]
     8dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     8e0:	b662      	cpsie	i
}
     8e2:	2001      	movs	r0, #1
     8e4:	b002      	add	sp, #8
     8e6:	bd10      	pop	{r4, pc}
     8e8:	200000dc 	.word	0x200000dc
     8ec:	20000114 	.word	0x20000114
     8f0:	20000109 	.word	0x20000109
     8f4:	000007e1 	.word	0x000007e1

000008f8 <udi_hid_kbd_up>:
{
     8f8:	b530      	push	{r4, r5, lr}
     8fa:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     900:	425a      	negs	r2, r3
     902:	4153      	adcs	r3, r2
     904:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     906:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     908:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     90c:	2200      	movs	r2, #0
     90e:	4b26      	ldr	r3, [pc, #152]	; (9a8 <udi_hid_kbd_up+0xb0>)
     910:	701a      	strb	r2, [r3, #0]
	return flags;
     912:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i]) {
     914:	4b25      	ldr	r3, [pc, #148]	; (9ac <udi_hid_kbd_up+0xb4>)
     916:	789b      	ldrb	r3, [r3, #2]
     918:	2b00      	cmp	r3, #0
     91a:	d016      	beq.n	94a <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
     91c:	4298      	cmp	r0, r3
     91e:	d041      	beq.n	9a4 <udi_hid_kbd_up+0xac>
     920:	4b22      	ldr	r3, [pc, #136]	; (9ac <udi_hid_kbd_up+0xb4>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     922:	3203      	adds	r2, #3
		if (0 == udi_hid_kbd_report[i]) {
     924:	78d9      	ldrb	r1, [r3, #3]
     926:	2900      	cmp	r1, #0
     928:	d00f      	beq.n	94a <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
     92a:	4281      	cmp	r1, r0
     92c:	d016      	beq.n	95c <udi_hid_kbd_up+0x64>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     92e:	3201      	adds	r2, #1
     930:	b2d2      	uxtb	r2, r2
     932:	3301      	adds	r3, #1
     934:	2a08      	cmp	r2, #8
     936:	d1f5      	bne.n	924 <udi_hid_kbd_up+0x2c>
	if (cpu_irq_is_enabled_flags(flags))
     938:	2c00      	cmp	r4, #0
     93a:	d030      	beq.n	99e <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     93c:	2201      	movs	r2, #1
     93e:	4b1a      	ldr	r3, [pc, #104]	; (9a8 <udi_hid_kbd_up+0xb0>)
     940:	701a      	strb	r2, [r3, #0]
     942:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     946:	b662      	cpsie	i
     948:	e029      	b.n	99e <udi_hid_kbd_up+0xa6>
	if (cpu_irq_is_enabled_flags(flags))
     94a:	2c00      	cmp	r4, #0
     94c:	d027      	beq.n	99e <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     94e:	2201      	movs	r2, #1
     950:	4b15      	ldr	r3, [pc, #84]	; (9a8 <udi_hid_kbd_up+0xb0>)
     952:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     954:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     958:	b662      	cpsie	i
     95a:	e020      	b.n	99e <udi_hid_kbd_up+0xa6>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     95c:	2a08      	cmp	r2, #8
     95e:	d0eb      	beq.n	938 <udi_hid_kbd_up+0x40>
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     960:	2a06      	cmp	r2, #6
     962:	d80c      	bhi.n	97e <udi_hid_kbd_up+0x86>
     964:	4911      	ldr	r1, [pc, #68]	; (9ac <udi_hid_kbd_up+0xb4>)
     966:	188b      	adds	r3, r1, r2
     968:	1c55      	adds	r5, r2, #1
     96a:	2006      	movs	r0, #6
     96c:	1a82      	subs	r2, r0, r2
     96e:	b2d2      	uxtb	r2, r2
     970:	18aa      	adds	r2, r5, r2
     972:	188a      	adds	r2, r1, r2
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
     974:	7859      	ldrb	r1, [r3, #1]
     976:	7019      	strb	r1, [r3, #0]
     978:	3301      	adds	r3, #1
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     97a:	4293      	cmp	r3, r2
     97c:	d1fa      	bne.n	974 <udi_hid_kbd_up+0x7c>
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
     97e:	2200      	movs	r2, #0
     980:	4b0a      	ldr	r3, [pc, #40]	; (9ac <udi_hid_kbd_up+0xb4>)
     982:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
     984:	3201      	adds	r2, #1
     986:	4b0a      	ldr	r3, [pc, #40]	; (9b0 <udi_hid_kbd_up+0xb8>)
     988:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
     98a:	4b0a      	ldr	r3, [pc, #40]	; (9b4 <udi_hid_kbd_up+0xbc>)
     98c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
     98e:	2c00      	cmp	r4, #0
     990:	d005      	beq.n	99e <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     992:	2201      	movs	r2, #1
     994:	4b04      	ldr	r3, [pc, #16]	; (9a8 <udi_hid_kbd_up+0xb0>)
     996:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     998:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     99c:	b662      	cpsie	i
}
     99e:	2001      	movs	r0, #1
     9a0:	b003      	add	sp, #12
     9a2:	bd30      	pop	{r4, r5, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     9a4:	2202      	movs	r2, #2
     9a6:	e7dd      	b.n	964 <udi_hid_kbd_up+0x6c>
     9a8:	200000dc 	.word	0x200000dc
     9ac:	20000114 	.word	0x20000114
     9b0:	20000109 	.word	0x20000109
     9b4:	000007e1 	.word	0x000007e1

000009b8 <udi_hid_kbd_down>:
{
     9b8:	b510      	push	{r4, lr}
     9ba:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9bc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     9c0:	425a      	negs	r2, r3
     9c2:	4153      	adcs	r3, r2
     9c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     9c6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     9c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     9cc:	2200      	movs	r2, #0
     9ce:	4b1f      	ldr	r3, [pc, #124]	; (a4c <udi_hid_kbd_down+0x94>)
     9d0:	701a      	strb	r2, [r3, #0]
	return flags;
     9d2:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i])
     9d4:	4b1e      	ldr	r3, [pc, #120]	; (a50 <udi_hid_kbd_down+0x98>)
     9d6:	789b      	ldrb	r3, [r3, #2]
     9d8:	2b00      	cmp	r3, #0
     9da:	d035      	beq.n	a48 <udi_hid_kbd_down+0x90>
		if (key_id == udi_hid_kbd_report[i]) {
     9dc:	4298      	cmp	r0, r3
     9de:	d015      	beq.n	a0c <udi_hid_kbd_down+0x54>
     9e0:	4a1b      	ldr	r2, [pc, #108]	; (a50 <udi_hid_kbd_down+0x98>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     9e2:	2303      	movs	r3, #3
		if (0 == udi_hid_kbd_report[i])
     9e4:	78d1      	ldrb	r1, [r2, #3]
     9e6:	2900      	cmp	r1, #0
     9e8:	d01a      	beq.n	a20 <udi_hid_kbd_down+0x68>
		if (key_id == udi_hid_kbd_report[i]) {
     9ea:	4281      	cmp	r1, r0
     9ec:	d00e      	beq.n	a0c <udi_hid_kbd_down+0x54>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     9ee:	3301      	adds	r3, #1
     9f0:	b2db      	uxtb	r3, r3
     9f2:	3201      	adds	r2, #1
     9f4:	2b08      	cmp	r3, #8
     9f6:	d1f5      	bne.n	9e4 <udi_hid_kbd_down+0x2c>
		return false;
     9f8:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     9fa:	2c00      	cmp	r4, #0
     9fc:	d022      	beq.n	a44 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     9fe:	2201      	movs	r2, #1
     a00:	4b12      	ldr	r3, [pc, #72]	; (a4c <udi_hid_kbd_down+0x94>)
     a02:	701a      	strb	r2, [r3, #0]
     a04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a08:	b662      	cpsie	i
     a0a:	e01b      	b.n	a44 <udi_hid_kbd_down+0x8c>
			return true;
     a0c:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
     a0e:	2c00      	cmp	r4, #0
     a10:	d018      	beq.n	a44 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     a12:	2201      	movs	r2, #1
     a14:	4b0d      	ldr	r3, [pc, #52]	; (a4c <udi_hid_kbd_down+0x94>)
     a16:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     a18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a1c:	b662      	cpsie	i
     a1e:	e011      	b.n	a44 <udi_hid_kbd_down+0x8c>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     a20:	2b08      	cmp	r3, #8
     a22:	d0e9      	beq.n	9f8 <udi_hid_kbd_down+0x40>
	udi_hid_kbd_report[i] = key_id;
     a24:	4a0a      	ldr	r2, [pc, #40]	; (a50 <udi_hid_kbd_down+0x98>)
     a26:	54d0      	strb	r0, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
     a28:	2201      	movs	r2, #1
     a2a:	4b0a      	ldr	r3, [pc, #40]	; (a54 <udi_hid_kbd_down+0x9c>)
     a2c:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
     a2e:	4b0a      	ldr	r3, [pc, #40]	; (a58 <udi_hid_kbd_down+0xa0>)
     a30:	4798      	blx	r3
	return true;
     a32:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
     a34:	2c00      	cmp	r4, #0
     a36:	d005      	beq.n	a44 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     a38:	2201      	movs	r2, #1
     a3a:	4b04      	ldr	r3, [pc, #16]	; (a4c <udi_hid_kbd_down+0x94>)
     a3c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     a3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a42:	b662      	cpsie	i
}
     a44:	b002      	add	sp, #8
     a46:	bd10      	pop	{r4, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     a48:	2302      	movs	r3, #2
     a4a:	e7eb      	b.n	a24 <udi_hid_kbd_down+0x6c>
     a4c:	200000dc 	.word	0x200000dc
     a50:	20000114 	.word	0x20000114
     a54:	20000109 	.word	0x20000109
     a58:	000007e1 	.word	0x000007e1

00000a5c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     a5c:	b570      	push	{r4, r5, r6, lr}
     a5e:	0005      	movs	r5, r0
     a60:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
     a62:	4a3b      	ldr	r2, [pc, #236]	; (b50 <udi_hid_setup+0xf4>)
     a64:	7812      	ldrb	r2, [r2, #0]
     a66:	b250      	sxtb	r0, r2
     a68:	2800      	cmp	r0, #0
     a6a:	db05      	blt.n	a78 <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     a6c:	2460      	movs	r4, #96	; 0x60
     a6e:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     a70:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     a72:	2a20      	cmp	r2, #32
     a74:	d04f      	beq.n	b16 <udi_hid_setup+0xba>
}
     a76:	bd70      	pop	{r4, r5, r6, pc}
     a78:	2060      	movs	r0, #96	; 0x60
     a7a:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     a7c:	d103      	bne.n	a86 <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
     a7e:	4834      	ldr	r0, [pc, #208]	; (b50 <udi_hid_setup+0xf4>)
     a80:	7840      	ldrb	r0, [r0, #1]
     a82:	2806      	cmp	r0, #6
     a84:	d00d      	beq.n	aa2 <udi_hid_setup+0x46>
	return false;	// Request not supported
     a86:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     a88:	2a20      	cmp	r2, #32
     a8a:	d1f4      	bne.n	a76 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     a8c:	4a30      	ldr	r2, [pc, #192]	; (b50 <udi_hid_setup+0xf4>)
     a8e:	7852      	ldrb	r2, [r2, #1]
     a90:	2a02      	cmp	r2, #2
     a92:	d034      	beq.n	afe <udi_hid_setup+0xa2>
     a94:	2a03      	cmp	r2, #3
     a96:	d038      	beq.n	b0a <udi_hid_setup+0xae>
	return false;	// Request not supported
     a98:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     a9a:	2a01      	cmp	r2, #1
     a9c:	d1eb      	bne.n	a76 <udi_hid_setup+0x1a>
				return setup_report();
     a9e:	4798      	blx	r3
     aa0:	e7e9      	b.n	a76 <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     aa2:	4b2c      	ldr	r3, [pc, #176]	; (b54 <udi_hid_setup+0xf8>)
     aa4:	4798      	blx	r3
     aa6:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     aa8:	7a82      	ldrb	r2, [r0, #10]
		return false;
     aaa:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     aac:	2a21      	cmp	r2, #33	; 0x21
     aae:	d1e2      	bne.n	a76 <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     ab0:	4a27      	ldr	r2, [pc, #156]	; (b50 <udi_hid_setup+0xf4>)
     ab2:	8852      	ldrh	r2, [r2, #2]
     ab4:	0a12      	lsrs	r2, r2, #8
     ab6:	2a21      	cmp	r2, #33	; 0x21
     ab8:	d013      	beq.n	ae2 <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     aba:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     abc:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
     abe:	4291      	cmp	r1, r2
     ac0:	d1d9      	bne.n	a76 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
     ac2:	4a23      	ldr	r2, [pc, #140]	; (b50 <udi_hid_setup+0xf4>)
     ac4:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     ac6:	7c19      	ldrb	r1, [r3, #16]
     ac8:	3309      	adds	r3, #9
     aca:	7a1b      	ldrb	r3, [r3, #8]
     acc:	021b      	lsls	r3, r3, #8
     ace:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
     ad0:	88d0      	ldrh	r0, [r2, #6]
     ad2:	1c19      	adds	r1, r3, #0
     ad4:	b29b      	uxth	r3, r3
     ad6:	4283      	cmp	r3, r0
     ad8:	d900      	bls.n	adc <udi_hid_setup+0x80>
     ada:	1c01      	adds	r1, r0, #0
     adc:	8191      	strh	r1, [r2, #12]
		return true;
     ade:	2001      	movs	r0, #1
     ae0:	e7c9      	b.n	a76 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     ae2:	4a1b      	ldr	r2, [pc, #108]	; (b50 <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     ae4:	0019      	movs	r1, r3
     ae6:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     ae8:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     aea:	7a5b      	ldrb	r3, [r3, #9]
     aec:	88d0      	ldrh	r0, [r2, #6]
     aee:	1c19      	adds	r1, r3, #0
     af0:	b29b      	uxth	r3, r3
     af2:	4283      	cmp	r3, r0
     af4:	d900      	bls.n	af8 <udi_hid_setup+0x9c>
     af6:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
     af8:	8191      	strh	r1, [r2, #12]
		return true;
     afa:	2001      	movs	r0, #1
     afc:	e7bb      	b.n	a76 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
     afe:	4b14      	ldr	r3, [pc, #80]	; (b50 <udi_hid_setup+0xf4>)
     b00:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     b02:	2201      	movs	r2, #1
     b04:	819a      	strh	r2, [r3, #12]
				return true;
     b06:	2001      	movs	r0, #1
     b08:	e7b5      	b.n	a76 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
     b0a:	4b11      	ldr	r3, [pc, #68]	; (b50 <udi_hid_setup+0xf4>)
     b0c:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     b0e:	2201      	movs	r2, #1
     b10:	819a      	strh	r2, [r3, #12]
				return true;
     b12:	2001      	movs	r0, #1
     b14:	e7af      	b.n	a76 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     b16:	4a0e      	ldr	r2, [pc, #56]	; (b50 <udi_hid_setup+0xf4>)
     b18:	7852      	ldrb	r2, [r2, #1]
     b1a:	2a0a      	cmp	r2, #10
     b1c:	d006      	beq.n	b2c <udi_hid_setup+0xd0>
     b1e:	2a0b      	cmp	r2, #11
     b20:	d00a      	beq.n	b38 <udi_hid_setup+0xdc>
	return false;	// Request not supported
     b22:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     b24:	2a09      	cmp	r2, #9
     b26:	d1a6      	bne.n	a76 <udi_hid_setup+0x1a>
				return setup_report();
     b28:	4798      	blx	r3
     b2a:	e7a4      	b.n	a76 <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     b2c:	4b08      	ldr	r3, [pc, #32]	; (b50 <udi_hid_setup+0xf4>)
     b2e:	885b      	ldrh	r3, [r3, #2]
     b30:	0a1b      	lsrs	r3, r3, #8
     b32:	702b      	strb	r3, [r5, #0]
				return true;
     b34:	2001      	movs	r0, #1
     b36:	e79e      	b.n	a76 <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
     b38:	4b05      	ldr	r3, [pc, #20]	; (b50 <udi_hid_setup+0xf4>)
     b3a:	88db      	ldrh	r3, [r3, #6]
					return false;
     b3c:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
     b3e:	2b00      	cmp	r3, #0
     b40:	d000      	beq.n	b44 <udi_hid_setup+0xe8>
     b42:	e798      	b.n	a76 <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
     b44:	4b02      	ldr	r3, [pc, #8]	; (b50 <udi_hid_setup+0xf4>)
     b46:	885b      	ldrh	r3, [r3, #2]
     b48:	700b      	strb	r3, [r1, #0]
				return true;
     b4a:	3001      	adds	r0, #1
     b4c:	e793      	b.n	a76 <udi_hid_setup+0x1a>
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	20000540 	.word	0x20000540
     b54:	00000cf5 	.word	0x00000cf5

00000b58 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     b58:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     b5a:	4b11      	ldr	r3, [pc, #68]	; (ba0 <udc_next_desc_in_iface+0x48>)
     b5c:	681b      	ldr	r3, [r3, #0]
     b5e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     b60:	7894      	ldrb	r4, [r2, #2]
     b62:	78d3      	ldrb	r3, [r2, #3]
     b64:	021b      	lsls	r3, r3, #8
     b66:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     b68:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     b6a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b6c:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     b6e:	4290      	cmp	r0, r2
     b70:	d210      	bcs.n	b94 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b72:	7843      	ldrb	r3, [r0, #1]
     b74:	2b04      	cmp	r3, #4
     b76:	d00f      	beq.n	b98 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     b78:	428b      	cmp	r3, r1
     b7a:	d00a      	beq.n	b92 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     b7c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b7e:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     b80:	4290      	cmp	r0, r2
     b82:	d205      	bcs.n	b90 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b84:	7843      	ldrb	r3, [r0, #1]
     b86:	2b04      	cmp	r3, #4
     b88:	d008      	beq.n	b9c <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     b8a:	428b      	cmp	r3, r1
     b8c:	d1f6      	bne.n	b7c <udc_next_desc_in_iface+0x24>
     b8e:	e000      	b.n	b92 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     b90:	2000      	movs	r0, #0
}
     b92:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     b94:	2000      	movs	r0, #0
     b96:	e7fc      	b.n	b92 <udc_next_desc_in_iface+0x3a>
     b98:	2000      	movs	r0, #0
     b9a:	e7fa      	b.n	b92 <udc_next_desc_in_iface+0x3a>
     b9c:	2000      	movs	r0, #0
     b9e:	e7f8      	b.n	b92 <udc_next_desc_in_iface+0x3a>
     ba0:	20000134 	.word	0x20000134

00000ba4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     ba4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     ba6:	4b03      	ldr	r3, [pc, #12]	; (bb4 <udc_valid_address+0x10>)
     ba8:	885b      	ldrh	r3, [r3, #2]
     baa:	207f      	movs	r0, #127	; 0x7f
     bac:	4018      	ands	r0, r3
     bae:	4b02      	ldr	r3, [pc, #8]	; (bb8 <udc_valid_address+0x14>)
     bb0:	4798      	blx	r3
}
     bb2:	bd10      	pop	{r4, pc}
     bb4:	20000540 	.word	0x20000540
     bb8:	00002689 	.word	0x00002689

00000bbc <udc_update_iface_desc>:
{
     bbc:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     bbe:	4b19      	ldr	r3, [pc, #100]	; (c24 <udc_update_iface_desc+0x68>)
     bc0:	781b      	ldrb	r3, [r3, #0]
		return false;
     bc2:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     bc4:	2b00      	cmp	r3, #0
     bc6:	d029      	beq.n	c1c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     bc8:	4b17      	ldr	r3, [pc, #92]	; (c28 <udc_update_iface_desc+0x6c>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	791c      	ldrb	r4, [r3, #4]
     bd0:	4284      	cmp	r4, r0
     bd2:	d923      	bls.n	c1c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     bd4:	4a15      	ldr	r2, [pc, #84]	; (c2c <udc_update_iface_desc+0x70>)
     bd6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     bd8:	789a      	ldrb	r2, [r3, #2]
     bda:	78dc      	ldrb	r4, [r3, #3]
     bdc:	0224      	lsls	r4, r4, #8
     bde:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     be0:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     be2:	42a3      	cmp	r3, r4
     be4:	d21c      	bcs.n	c20 <udc_update_iface_desc+0x64>
     be6:	2500      	movs	r5, #0
     be8:	2601      	movs	r6, #1
     bea:	e007      	b.n	bfc <udc_update_iface_desc+0x40>
     bec:	4a0f      	ldr	r2, [pc, #60]	; (c2c <udc_update_iface_desc+0x70>)
     bee:	6013      	str	r3, [r2, #0]
     bf0:	e00f      	b.n	c12 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     bf2:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     bf4:	189b      	adds	r3, r3, r2
     bf6:	0035      	movs	r5, r6
	while (ptr_end_desc >
     bf8:	42a3      	cmp	r3, r4
     bfa:	d20c      	bcs.n	c16 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     bfc:	785a      	ldrb	r2, [r3, #1]
     bfe:	2a04      	cmp	r2, #4
     c00:	d1f7      	bne.n	bf2 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     c02:	789a      	ldrb	r2, [r3, #2]
     c04:	4282      	cmp	r2, r0
     c06:	d1f4      	bne.n	bf2 <udc_update_iface_desc+0x36>
     c08:	78da      	ldrb	r2, [r3, #3]
     c0a:	428a      	cmp	r2, r1
     c0c:	d1f1      	bne.n	bf2 <udc_update_iface_desc+0x36>
     c0e:	2d00      	cmp	r5, #0
     c10:	d1ec      	bne.n	bec <udc_update_iface_desc+0x30>
				return true; // Interface found
     c12:	2201      	movs	r2, #1
     c14:	e002      	b.n	c1c <udc_update_iface_desc+0x60>
     c16:	4a05      	ldr	r2, [pc, #20]	; (c2c <udc_update_iface_desc+0x70>)
     c18:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     c1a:	2200      	movs	r2, #0
}
     c1c:	0010      	movs	r0, r2
     c1e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     c20:	2200      	movs	r2, #0
     c22:	e7fb      	b.n	c1c <udc_update_iface_desc+0x60>
     c24:	20000130 	.word	0x20000130
     c28:	20000134 	.word	0x20000134
     c2c:	20000138 	.word	0x20000138

00000c30 <udc_iface_disable>:
{
     c30:	b5f0      	push	{r4, r5, r6, r7, lr}
     c32:	46c6      	mov	lr, r8
     c34:	b500      	push	{lr}
     c36:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     c38:	2100      	movs	r1, #0
     c3a:	4b13      	ldr	r3, [pc, #76]	; (c88 <udc_iface_disable+0x58>)
     c3c:	4798      	blx	r3
     c3e:	1e05      	subs	r5, r0, #0
     c40:	d103      	bne.n	c4a <udc_iface_disable+0x1a>
}
     c42:	0028      	movs	r0, r5
     c44:	bc04      	pop	{r2}
     c46:	4690      	mov	r8, r2
     c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     c4a:	4b10      	ldr	r3, [pc, #64]	; (c8c <udc_iface_disable+0x5c>)
     c4c:	681b      	ldr	r3, [r3, #0]
     c4e:	685b      	ldr	r3, [r3, #4]
     c50:	00a2      	lsls	r2, r4, #2
     c52:	58d3      	ldr	r3, [r2, r3]
     c54:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c56:	68db      	ldr	r3, [r3, #12]
     c58:	4798      	blx	r3
     c5a:	0001      	movs	r1, r0
     c5c:	0020      	movs	r0, r4
     c5e:	4b0a      	ldr	r3, [pc, #40]	; (c88 <udc_iface_disable+0x58>)
     c60:	4798      	blx	r3
     c62:	1e05      	subs	r5, r0, #0
     c64:	d0ed      	beq.n	c42 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     c66:	4b0a      	ldr	r3, [pc, #40]	; (c90 <udc_iface_disable+0x60>)
     c68:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c6a:	4e0a      	ldr	r6, [pc, #40]	; (c94 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     c6c:	4f0a      	ldr	r7, [pc, #40]	; (c98 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c6e:	2105      	movs	r1, #5
     c70:	0020      	movs	r0, r4
     c72:	47b0      	blx	r6
     c74:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     c76:	d002      	beq.n	c7e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     c78:	7880      	ldrb	r0, [r0, #2]
     c7a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c7c:	e7f7      	b.n	c6e <udc_iface_disable+0x3e>
	udi_api->disable();
     c7e:	4643      	mov	r3, r8
     c80:	685b      	ldr	r3, [r3, #4]
     c82:	4798      	blx	r3
	return true;
     c84:	e7dd      	b.n	c42 <udc_iface_disable+0x12>
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	00000bbd 	.word	0x00000bbd
     c8c:	20000134 	.word	0x20000134
     c90:	20000138 	.word	0x20000138
     c94:	00000b59 	.word	0x00000b59
     c98:	000021c9 	.word	0x000021c9

00000c9c <udc_iface_enable>:
{
     c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c9e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     ca0:	4b0f      	ldr	r3, [pc, #60]	; (ce0 <udc_iface_enable+0x44>)
     ca2:	4798      	blx	r3
     ca4:	2800      	cmp	r0, #0
     ca6:	d019      	beq.n	cdc <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     ca8:	4b0e      	ldr	r3, [pc, #56]	; (ce4 <udc_iface_enable+0x48>)
     caa:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     cac:	4e0e      	ldr	r6, [pc, #56]	; (ce8 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     cae:	4f0f      	ldr	r7, [pc, #60]	; (cec <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     cb0:	2105      	movs	r1, #5
     cb2:	0020      	movs	r0, r4
     cb4:	47b0      	blx	r6
     cb6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     cb8:	d009      	beq.n	cce <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     cba:	7903      	ldrb	r3, [r0, #4]
     cbc:	7942      	ldrb	r2, [r0, #5]
     cbe:	0212      	lsls	r2, r2, #8
     cc0:	431a      	orrs	r2, r3
     cc2:	78c1      	ldrb	r1, [r0, #3]
     cc4:	7880      	ldrb	r0, [r0, #2]
     cc6:	47b8      	blx	r7
     cc8:	2800      	cmp	r0, #0
     cca:	d1f1      	bne.n	cb0 <udc_iface_enable+0x14>
     ccc:	e006      	b.n	cdc <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     cce:	4b08      	ldr	r3, [pc, #32]	; (cf0 <udc_iface_enable+0x54>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	685b      	ldr	r3, [r3, #4]
     cd4:	00ad      	lsls	r5, r5, #2
     cd6:	58eb      	ldr	r3, [r5, r3]
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	4798      	blx	r3
}
     cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	00000bbd 	.word	0x00000bbd
     ce4:	20000138 	.word	0x20000138
     ce8:	00000b59 	.word	0x00000b59
     cec:	00002221 	.word	0x00002221
     cf0:	20000134 	.word	0x20000134

00000cf4 <udc_get_interface_desc>:
	return udc_ptr_iface;
     cf4:	4b01      	ldr	r3, [pc, #4]	; (cfc <udc_get_interface_desc+0x8>)
     cf6:	6818      	ldr	r0, [r3, #0]
}
     cf8:	4770      	bx	lr
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	20000138 	.word	0x20000138

00000d00 <udc_start>:
{
     d00:	b510      	push	{r4, lr}
	udd_enable();
     d02:	4b01      	ldr	r3, [pc, #4]	; (d08 <udc_start+0x8>)
     d04:	4798      	blx	r3
}
     d06:	bd10      	pop	{r4, pc}
     d08:	00002739 	.word	0x00002739

00000d0c <udc_reset>:
{
     d0c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     d0e:	4b0e      	ldr	r3, [pc, #56]	; (d48 <udc_reset+0x3c>)
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	2b00      	cmp	r3, #0
     d14:	d011      	beq.n	d3a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d16:	4b0d      	ldr	r3, [pc, #52]	; (d4c <udc_reset+0x40>)
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     d1c:	791b      	ldrb	r3, [r3, #4]
     d1e:	2b00      	cmp	r3, #0
     d20:	d00b      	beq.n	d3a <udc_reset+0x2e>
     d22:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     d24:	4e0a      	ldr	r6, [pc, #40]	; (d50 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d26:	4d09      	ldr	r5, [pc, #36]	; (d4c <udc_reset+0x40>)
			udc_iface_disable(iface_num);
     d28:	0020      	movs	r0, r4
     d2a:	47b0      	blx	r6
				iface_num++) {
     d2c:	3401      	adds	r4, #1
     d2e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d30:	682b      	ldr	r3, [r5, #0]
     d32:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     d34:	791b      	ldrb	r3, [r3, #4]
     d36:	42a3      	cmp	r3, r4
     d38:	d8f6      	bhi.n	d28 <udc_reset+0x1c>
	udc_num_configuration = 0;
     d3a:	2300      	movs	r3, #0
     d3c:	4a02      	ldr	r2, [pc, #8]	; (d48 <udc_reset+0x3c>)
     d3e:	7013      	strb	r3, [r2, #0]
	udc_device_status =
     d40:	4a04      	ldr	r2, [pc, #16]	; (d54 <udc_reset+0x48>)
     d42:	8013      	strh	r3, [r2, #0]
}
     d44:	bd70      	pop	{r4, r5, r6, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	20000130 	.word	0x20000130
     d4c:	20000134 	.word	0x20000134
     d50:	00000c31 	.word	0x00000c31
     d54:	20000128 	.word	0x20000128

00000d58 <udc_sof_notify>:
{
     d58:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     d5a:	4b0e      	ldr	r3, [pc, #56]	; (d94 <udc_sof_notify+0x3c>)
     d5c:	781b      	ldrb	r3, [r3, #0]
     d5e:	2b00      	cmp	r3, #0
     d60:	d017      	beq.n	d92 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d62:	4b0d      	ldr	r3, [pc, #52]	; (d98 <udc_sof_notify+0x40>)
     d64:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     d66:	681a      	ldr	r2, [r3, #0]
     d68:	7912      	ldrb	r2, [r2, #4]
     d6a:	2a00      	cmp	r2, #0
     d6c:	d011      	beq.n	d92 <udc_sof_notify+0x3a>
     d6e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d70:	4d09      	ldr	r5, [pc, #36]	; (d98 <udc_sof_notify+0x40>)
     d72:	e006      	b.n	d82 <udc_sof_notify+0x2a>
				iface_num++) {
     d74:	3401      	adds	r4, #1
     d76:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d78:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     d7a:	681a      	ldr	r2, [r3, #0]
     d7c:	7912      	ldrb	r2, [r2, #4]
     d7e:	42a2      	cmp	r2, r4
     d80:	d907      	bls.n	d92 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     d82:	685b      	ldr	r3, [r3, #4]
     d84:	00a2      	lsls	r2, r4, #2
     d86:	58d3      	ldr	r3, [r2, r3]
     d88:	691b      	ldr	r3, [r3, #16]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d0f2      	beq.n	d74 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     d8e:	4798      	blx	r3
     d90:	e7f0      	b.n	d74 <udc_sof_notify+0x1c>
}
     d92:	bd70      	pop	{r4, r5, r6, pc}
     d94:	20000130 	.word	0x20000130
     d98:	20000134 	.word	0x20000134

00000d9c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     d9e:	4bab      	ldr	r3, [pc, #684]	; (104c <udc_process_setup+0x2b0>)
     da0:	2200      	movs	r2, #0
     da2:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     da4:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     da6:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	b25a      	sxtb	r2, r3
     dac:	2a00      	cmp	r2, #0
     dae:	db13      	blt.n	dd8 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     db0:	2260      	movs	r2, #96	; 0x60
     db2:	421a      	tst	r2, r3
     db4:	d100      	bne.n	db8 <udc_process_setup+0x1c>
     db6:	e0d7      	b.n	f68 <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     db8:	4ba4      	ldr	r3, [pc, #656]	; (104c <udc_process_setup+0x2b0>)
     dba:	781a      	ldrb	r2, [r3, #0]
     dbc:	231f      	movs	r3, #31
     dbe:	4013      	ands	r3, r2
     dc0:	2b01      	cmp	r3, #1
     dc2:	d100      	bne.n	dc6 <udc_process_setup+0x2a>
     dc4:	e174      	b.n	10b0 <udc_process_setup+0x314>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     dc6:	4ba1      	ldr	r3, [pc, #644]	; (104c <udc_process_setup+0x2b0>)
     dc8:	781a      	ldrb	r2, [r3, #0]
     dca:	231f      	movs	r3, #31
     dcc:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     dce:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     dd0:	2b02      	cmp	r3, #2
     dd2:	d100      	bne.n	dd6 <udc_process_setup+0x3a>
     dd4:	e1ca      	b.n	116c <udc_process_setup+0x3d0>
#endif
}
     dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     dd8:	4a9c      	ldr	r2, [pc, #624]	; (104c <udc_process_setup+0x2b0>)
     dda:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     ddc:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     dde:	2a00      	cmp	r2, #0
     de0:	d0f9      	beq.n	dd6 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     de2:	2160      	movs	r1, #96	; 0x60
     de4:	4219      	tst	r1, r3
     de6:	d1e7      	bne.n	db8 <udc_process_setup+0x1c>
     de8:	211f      	movs	r1, #31
     dea:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     dec:	d108      	bne.n	e00 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     dee:	4997      	ldr	r1, [pc, #604]	; (104c <udc_process_setup+0x2b0>)
     df0:	7849      	ldrb	r1, [r1, #1]
     df2:	2906      	cmp	r1, #6
     df4:	d023      	beq.n	e3e <udc_process_setup+0xa2>
     df6:	2908      	cmp	r1, #8
     df8:	d100      	bne.n	dfc <udc_process_setup+0x60>
     dfa:	e084      	b.n	f06 <udc_process_setup+0x16a>
     dfc:	2900      	cmp	r1, #0
     dfe:	d017      	beq.n	e30 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     e00:	2b01      	cmp	r3, #1
     e02:	d100      	bne.n	e06 <udc_process_setup+0x6a>
     e04:	e087      	b.n	f16 <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e06:	2b02      	cmp	r3, #2
     e08:	d1d6      	bne.n	db8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     e0a:	4b90      	ldr	r3, [pc, #576]	; (104c <udc_process_setup+0x2b0>)
     e0c:	785b      	ldrb	r3, [r3, #1]
	return false;
     e0e:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     e10:	2b00      	cmp	r3, #0
     e12:	d000      	beq.n	e16 <udc_process_setup+0x7a>
     e14:	e1a6      	b.n	1164 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     e16:	2a02      	cmp	r2, #2
     e18:	d1d5      	bne.n	dc6 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     e1a:	4b8c      	ldr	r3, [pc, #560]	; (104c <udc_process_setup+0x2b0>)
     e1c:	7918      	ldrb	r0, [r3, #4]
     e1e:	4b8c      	ldr	r3, [pc, #560]	; (1050 <udc_process_setup+0x2b4>)
     e20:	4798      	blx	r3
     e22:	4b8c      	ldr	r3, [pc, #560]	; (1054 <udc_process_setup+0x2b8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     e24:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e26:	2102      	movs	r1, #2
     e28:	0018      	movs	r0, r3
     e2a:	4b8b      	ldr	r3, [pc, #556]	; (1058 <udc_process_setup+0x2bc>)
     e2c:	4798      	blx	r3
     e2e:	e0fc      	b.n	102a <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     e30:	2a02      	cmp	r2, #2
     e32:	d1c8      	bne.n	dc6 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     e34:	3102      	adds	r1, #2
     e36:	4889      	ldr	r0, [pc, #548]	; (105c <udc_process_setup+0x2c0>)
     e38:	4b87      	ldr	r3, [pc, #540]	; (1058 <udc_process_setup+0x2bc>)
     e3a:	4798      	blx	r3
     e3c:	e0f5      	b.n	102a <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     e3e:	4b83      	ldr	r3, [pc, #524]	; (104c <udc_process_setup+0x2b0>)
     e40:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     e42:	0a13      	lsrs	r3, r2, #8
     e44:	2b02      	cmp	r3, #2
     e46:	d023      	beq.n	e90 <udc_process_setup+0xf4>
     e48:	b2d9      	uxtb	r1, r3
     e4a:	2902      	cmp	r1, #2
     e4c:	d90f      	bls.n	e6e <udc_process_setup+0xd2>
     e4e:	2b03      	cmp	r3, #3
     e50:	d034      	beq.n	ebc <udc_process_setup+0x120>
     e52:	2b0f      	cmp	r3, #15
     e54:	d000      	beq.n	e58 <udc_process_setup+0xbc>
     e56:	e182      	b.n	115e <udc_process_setup+0x3c2>
		if (udc_config.conf_bos == NULL) {
     e58:	4b81      	ldr	r3, [pc, #516]	; (1060 <udc_process_setup+0x2c4>)
     e5a:	6898      	ldr	r0, [r3, #8]
     e5c:	2800      	cmp	r0, #0
     e5e:	d0b2      	beq.n	dc6 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     e60:	7883      	ldrb	r3, [r0, #2]
     e62:	78c1      	ldrb	r1, [r0, #3]
     e64:	0209      	lsls	r1, r1, #8
     e66:	4319      	orrs	r1, r3
     e68:	4b7b      	ldr	r3, [pc, #492]	; (1058 <udc_process_setup+0x2bc>)
     e6a:	4798      	blx	r3
     e6c:	e007      	b.n	e7e <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     e6e:	2b01      	cmp	r3, #1
     e70:	d000      	beq.n	e74 <udc_process_setup+0xd8>
     e72:	e174      	b.n	115e <udc_process_setup+0x3c2>
				(uint8_t *) udc_config.confdev_lsfs,
     e74:	4b7a      	ldr	r3, [pc, #488]	; (1060 <udc_process_setup+0x2c4>)
     e76:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     e78:	7801      	ldrb	r1, [r0, #0]
     e7a:	4b77      	ldr	r3, [pc, #476]	; (1058 <udc_process_setup+0x2bc>)
     e7c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     e7e:	4b73      	ldr	r3, [pc, #460]	; (104c <udc_process_setup+0x2b0>)
     e80:	88da      	ldrh	r2, [r3, #6]
     e82:	899b      	ldrh	r3, [r3, #12]
     e84:	4293      	cmp	r3, r2
     e86:	d800      	bhi.n	e8a <udc_process_setup+0xee>
     e88:	e0cf      	b.n	102a <udc_process_setup+0x28e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     e8a:	4b70      	ldr	r3, [pc, #448]	; (104c <udc_process_setup+0x2b0>)
     e8c:	819a      	strh	r2, [r3, #12]
     e8e:	e0cc      	b.n	102a <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     e90:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     e92:	4b73      	ldr	r3, [pc, #460]	; (1060 <udc_process_setup+0x2c4>)
     e94:	681b      	ldr	r3, [r3, #0]
     e96:	7c5b      	ldrb	r3, [r3, #17]
     e98:	4293      	cmp	r3, r2
     e9a:	d800      	bhi.n	e9e <udc_process_setup+0x102>
     e9c:	e793      	b.n	dc6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     e9e:	4b70      	ldr	r3, [pc, #448]	; (1060 <udc_process_setup+0x2c4>)
     ea0:	685b      	ldr	r3, [r3, #4]
     ea2:	00d2      	lsls	r2, r2, #3
     ea4:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     ea6:	7883      	ldrb	r3, [r0, #2]
     ea8:	78c1      	ldrb	r1, [r0, #3]
     eaa:	0209      	lsls	r1, r1, #8
     eac:	4319      	orrs	r1, r3
     eae:	4b6a      	ldr	r3, [pc, #424]	; (1058 <udc_process_setup+0x2bc>)
     eb0:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     eb2:	4b66      	ldr	r3, [pc, #408]	; (104c <udc_process_setup+0x2b0>)
     eb4:	689b      	ldr	r3, [r3, #8]
     eb6:	2202      	movs	r2, #2
     eb8:	705a      	strb	r2, [r3, #1]
     eba:	e7e0      	b.n	e7e <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     ebc:	23ff      	movs	r3, #255	; 0xff
     ebe:	401a      	ands	r2, r3
     ec0:	2a01      	cmp	r2, #1
     ec2:	d01d      	beq.n	f00 <udc_process_setup+0x164>
     ec4:	2a00      	cmp	r2, #0
     ec6:	d016      	beq.n	ef6 <udc_process_setup+0x15a>
     ec8:	2a02      	cmp	r2, #2
     eca:	d000      	beq.n	ece <udc_process_setup+0x132>
     ecc:	e774      	b.n	db8 <udc_process_setup+0x1c>
		str = udc_string_product_name;
     ece:	4c65      	ldr	r4, [pc, #404]	; (1064 <udc_process_setup+0x2c8>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     ed0:	210b      	movs	r1, #11
     ed2:	4a65      	ldr	r2, [pc, #404]	; (1068 <udc_process_setup+0x2cc>)
     ed4:	3202      	adds	r2, #2
     ed6:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     ed8:	5ce0      	ldrb	r0, [r4, r3]
     eda:	8010      	strh	r0, [r2, #0]
     edc:	3301      	adds	r3, #1
     ede:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     ee0:	b2d8      	uxtb	r0, r3
     ee2:	4288      	cmp	r0, r1
     ee4:	d3f8      	bcc.n	ed8 <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     ee6:	0049      	lsls	r1, r1, #1
     ee8:	3102      	adds	r1, #2
     eea:	485f      	ldr	r0, [pc, #380]	; (1068 <udc_process_setup+0x2cc>)
     eec:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     eee:	b289      	uxth	r1, r1
     ef0:	4b59      	ldr	r3, [pc, #356]	; (1058 <udc_process_setup+0x2bc>)
     ef2:	4798      	blx	r3
     ef4:	e7c3      	b.n	e7e <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     ef6:	2104      	movs	r1, #4
     ef8:	485c      	ldr	r0, [pc, #368]	; (106c <udc_process_setup+0x2d0>)
     efa:	4b57      	ldr	r3, [pc, #348]	; (1058 <udc_process_setup+0x2bc>)
     efc:	4798      	blx	r3
     efe:	e7be      	b.n	e7e <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     f00:	4c5b      	ldr	r4, [pc, #364]	; (1070 <udc_process_setup+0x2d4>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     f02:	2106      	movs	r1, #6
     f04:	e7e5      	b.n	ed2 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
     f06:	2a01      	cmp	r2, #1
     f08:	d000      	beq.n	f0c <udc_process_setup+0x170>
     f0a:	e75c      	b.n	dc6 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     f0c:	2101      	movs	r1, #1
     f0e:	4859      	ldr	r0, [pc, #356]	; (1074 <udc_process_setup+0x2d8>)
     f10:	4b51      	ldr	r3, [pc, #324]	; (1058 <udc_process_setup+0x2bc>)
     f12:	4798      	blx	r3
     f14:	e089      	b.n	102a <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
     f16:	494d      	ldr	r1, [pc, #308]	; (104c <udc_process_setup+0x2b0>)
     f18:	7849      	ldrb	r1, [r1, #1]
     f1a:	290a      	cmp	r1, #10
     f1c:	d000      	beq.n	f20 <udc_process_setup+0x184>
     f1e:	e772      	b.n	e06 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     f20:	2a01      	cmp	r2, #1
     f22:	d000      	beq.n	f26 <udc_process_setup+0x18a>
     f24:	e0c4      	b.n	10b0 <udc_process_setup+0x314>
	if (!udc_num_configuration) {
     f26:	4b53      	ldr	r3, [pc, #332]	; (1074 <udc_process_setup+0x2d8>)
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d100      	bne.n	f30 <udc_process_setup+0x194>
     f2e:	e0bf      	b.n	10b0 <udc_process_setup+0x314>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f30:	4b46      	ldr	r3, [pc, #280]	; (104c <udc_process_setup+0x2b0>)
     f32:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f34:	4b50      	ldr	r3, [pc, #320]	; (1078 <udc_process_setup+0x2dc>)
     f36:	681d      	ldr	r5, [r3, #0]
     f38:	682b      	ldr	r3, [r5, #0]
     f3a:	791b      	ldrb	r3, [r3, #4]
     f3c:	42a3      	cmp	r3, r4
     f3e:	d800      	bhi.n	f42 <udc_process_setup+0x1a6>
     f40:	e0b6      	b.n	10b0 <udc_process_setup+0x314>
	if (!udc_update_iface_desc(iface_num, 0)) {
     f42:	2100      	movs	r1, #0
     f44:	0020      	movs	r0, r4
     f46:	4b4d      	ldr	r3, [pc, #308]	; (107c <udc_process_setup+0x2e0>)
     f48:	4798      	blx	r3
     f4a:	2800      	cmp	r0, #0
     f4c:	d100      	bne.n	f50 <udc_process_setup+0x1b4>
     f4e:	e733      	b.n	db8 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f50:	686b      	ldr	r3, [r5, #4]
     f52:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     f54:	58e3      	ldr	r3, [r4, r3]
     f56:	68db      	ldr	r3, [r3, #12]
     f58:	4798      	blx	r3
     f5a:	4b49      	ldr	r3, [pc, #292]	; (1080 <udc_process_setup+0x2e4>)
     f5c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     f5e:	2101      	movs	r1, #1
     f60:	0018      	movs	r0, r3
     f62:	4b3d      	ldr	r3, [pc, #244]	; (1058 <udc_process_setup+0x2bc>)
     f64:	4798      	blx	r3
     f66:	e060      	b.n	102a <udc_process_setup+0x28e>
     f68:	221f      	movs	r2, #31
     f6a:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     f6c:	d15f      	bne.n	102e <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
     f6e:	4a37      	ldr	r2, [pc, #220]	; (104c <udc_process_setup+0x2b0>)
     f70:	7852      	ldrb	r2, [r2, #1]
     f72:	2a03      	cmp	r2, #3
     f74:	d100      	bne.n	f78 <udc_process_setup+0x1dc>
     f76:	e0f4      	b.n	1162 <udc_process_setup+0x3c6>
     f78:	b2d1      	uxtb	r1, r2
     f7a:	2903      	cmp	r1, #3
     f7c:	d93b      	bls.n	ff6 <udc_process_setup+0x25a>
     f7e:	2a05      	cmp	r2, #5
     f80:	d04b      	beq.n	101a <udc_process_setup+0x27e>
     f82:	2a09      	cmp	r2, #9
     f84:	d153      	bne.n	102e <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     f86:	4b31      	ldr	r3, [pc, #196]	; (104c <udc_process_setup+0x2b0>)
     f88:	88db      	ldrh	r3, [r3, #6]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d000      	beq.n	f90 <udc_process_setup+0x1f4>
     f8e:	e71a      	b.n	dc6 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     f90:	4b3c      	ldr	r3, [pc, #240]	; (1084 <udc_process_setup+0x2e8>)
     f92:	4798      	blx	r3
     f94:	2800      	cmp	r0, #0
     f96:	d100      	bne.n	f9a <udc_process_setup+0x1fe>
     f98:	e70e      	b.n	db8 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     f9a:	4b2c      	ldr	r3, [pc, #176]	; (104c <udc_process_setup+0x2b0>)
     f9c:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     f9e:	4b30      	ldr	r3, [pc, #192]	; (1060 <udc_process_setup+0x2c4>)
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     fa4:	429a      	cmp	r2, r3
     fa6:	dd00      	ble.n	faa <udc_process_setup+0x20e>
     fa8:	e706      	b.n	db8 <udc_process_setup+0x1c>
	udc_reset();
     faa:	4b37      	ldr	r3, [pc, #220]	; (1088 <udc_process_setup+0x2ec>)
     fac:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     fae:	4b27      	ldr	r3, [pc, #156]	; (104c <udc_process_setup+0x2b0>)
     fb0:	789b      	ldrb	r3, [r3, #2]
     fb2:	4a30      	ldr	r2, [pc, #192]	; (1074 <udc_process_setup+0x2d8>)
     fb4:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     fb6:	2b00      	cmp	r3, #0
     fb8:	d037      	beq.n	102a <udc_process_setup+0x28e>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     fba:	4a34      	ldr	r2, [pc, #208]	; (108c <udc_process_setup+0x2f0>)
     fbc:	4694      	mov	ip, r2
     fbe:	4463      	add	r3, ip
     fc0:	00db      	lsls	r3, r3, #3
     fc2:	4a27      	ldr	r2, [pc, #156]	; (1060 <udc_process_setup+0x2c4>)
     fc4:	6852      	ldr	r2, [r2, #4]
     fc6:	18d3      	adds	r3, r2, r3
     fc8:	4a2b      	ldr	r2, [pc, #172]	; (1078 <udc_process_setup+0x2dc>)
     fca:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	791b      	ldrb	r3, [r3, #4]
     fd0:	2b00      	cmp	r3, #0
     fd2:	d02a      	beq.n	102a <udc_process_setup+0x28e>
     fd4:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     fd6:	4d2e      	ldr	r5, [pc, #184]	; (1090 <udc_process_setup+0x2f4>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fd8:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     fda:	2100      	movs	r1, #0
     fdc:	0020      	movs	r0, r4
     fde:	47a8      	blx	r5
     fe0:	2800      	cmp	r0, #0
     fe2:	d100      	bne.n	fe6 <udc_process_setup+0x24a>
     fe4:	e6e8      	b.n	db8 <udc_process_setup+0x1c>
			iface_num++) {
     fe6:	3401      	adds	r4, #1
     fe8:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fea:	6833      	ldr	r3, [r6, #0]
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	791b      	ldrb	r3, [r3, #4]
     ff0:	42a3      	cmp	r3, r4
     ff2:	d8f2      	bhi.n	fda <udc_process_setup+0x23e>
     ff4:	e019      	b.n	102a <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
     ff6:	2a01      	cmp	r2, #1
     ff8:	d119      	bne.n	102e <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     ffa:	4b14      	ldr	r3, [pc, #80]	; (104c <udc_process_setup+0x2b0>)
     ffc:	88db      	ldrh	r3, [r3, #6]
     ffe:	2b00      	cmp	r3, #0
    1000:	d000      	beq.n	1004 <udc_process_setup+0x268>
    1002:	e6e0      	b.n	dc6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1004:	4b11      	ldr	r3, [pc, #68]	; (104c <udc_process_setup+0x2b0>)
    1006:	885b      	ldrh	r3, [r3, #2]
    1008:	2b01      	cmp	r3, #1
    100a:	d000      	beq.n	100e <udc_process_setup+0x272>
    100c:	e6db      	b.n	dc6 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    100e:	4a13      	ldr	r2, [pc, #76]	; (105c <udc_process_setup+0x2c0>)
    1010:	8813      	ldrh	r3, [r2, #0]
    1012:	2102      	movs	r1, #2
    1014:	438b      	bics	r3, r1
    1016:	8013      	strh	r3, [r2, #0]
    1018:	e007      	b.n	102a <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength) {
    101a:	4b0c      	ldr	r3, [pc, #48]	; (104c <udc_process_setup+0x2b0>)
    101c:	88db      	ldrh	r3, [r3, #6]
    101e:	2b00      	cmp	r3, #0
    1020:	d000      	beq.n	1024 <udc_process_setup+0x288>
    1022:	e6d0      	b.n	dc6 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1024:	4a1b      	ldr	r2, [pc, #108]	; (1094 <udc_process_setup+0x2f8>)
    1026:	4b09      	ldr	r3, [pc, #36]	; (104c <udc_process_setup+0x2b0>)
    1028:	611a      	str	r2, [r3, #16]
			return true;
    102a:	2001      	movs	r0, #1
    102c:	e6d3      	b.n	dd6 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    102e:	2b01      	cmp	r3, #1
    1030:	d032      	beq.n	1098 <udc_process_setup+0x2fc>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1032:	2b02      	cmp	r3, #2
    1034:	d000      	beq.n	1038 <udc_process_setup+0x29c>
    1036:	e6bf      	b.n	db8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1038:	4b04      	ldr	r3, [pc, #16]	; (104c <udc_process_setup+0x2b0>)
    103a:	785b      	ldrb	r3, [r3, #1]
    103c:	2b01      	cmp	r3, #1
    103e:	d06d      	beq.n	111c <udc_process_setup+0x380>
    1040:	2b03      	cmp	r3, #3
    1042:	d100      	bne.n	1046 <udc_process_setup+0x2aa>
    1044:	e079      	b.n	113a <udc_process_setup+0x39e>
	return false;
    1046:	2000      	movs	r0, #0
    1048:	e08c      	b.n	1164 <udc_process_setup+0x3c8>
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	20000540 	.word	0x20000540
    1050:	00002329 	.word	0x00002329
    1054:	2000012a 	.word	0x2000012a
    1058:	000026a9 	.word	0x000026a9
    105c:	20000128 	.word	0x20000128
    1060:	2000005c 	.word	0x2000005c
    1064:	200000d0 	.word	0x200000d0
    1068:	200000ac 	.word	0x200000ac
    106c:	200000c4 	.word	0x200000c4
    1070:	200000c8 	.word	0x200000c8
    1074:	20000130 	.word	0x20000130
    1078:	20000134 	.word	0x20000134
    107c:	00000bbd 	.word	0x00000bbd
    1080:	2000012c 	.word	0x2000012c
    1084:	00002699 	.word	0x00002699
    1088:	00000d0d 	.word	0x00000d0d
    108c:	1fffffff 	.word	0x1fffffff
    1090:	00000c9d 	.word	0x00000c9d
    1094:	00000ba5 	.word	0x00000ba5
			switch (udd_g_ctrlreq.req.bRequest) {
    1098:	4a48      	ldr	r2, [pc, #288]	; (11bc <udc_process_setup+0x420>)
    109a:	7852      	ldrb	r2, [r2, #1]
    109c:	2a0b      	cmp	r2, #11
    109e:	d1c8      	bne.n	1032 <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
    10a0:	4b46      	ldr	r3, [pc, #280]	; (11bc <udc_process_setup+0x420>)
    10a2:	88db      	ldrh	r3, [r3, #6]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d103      	bne.n	10b0 <udc_process_setup+0x314>
	if (!udc_num_configuration) {
    10a8:	4b45      	ldr	r3, [pc, #276]	; (11c0 <udc_process_setup+0x424>)
    10aa:	781b      	ldrb	r3, [r3, #0]
    10ac:	2b00      	cmp	r3, #0
    10ae:	d127      	bne.n	1100 <udc_process_setup+0x364>
	if (0 == udc_num_configuration) {
    10b0:	4b43      	ldr	r3, [pc, #268]	; (11c0 <udc_process_setup+0x424>)
    10b2:	781b      	ldrb	r3, [r3, #0]
	return false;
    10b4:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    10b6:	2b00      	cmp	r3, #0
    10b8:	d100      	bne.n	10bc <udc_process_setup+0x320>
    10ba:	e68c      	b.n	dd6 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    10bc:	4b3f      	ldr	r3, [pc, #252]	; (11bc <udc_process_setup+0x420>)
    10be:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    10c0:	4b40      	ldr	r3, [pc, #256]	; (11c4 <udc_process_setup+0x428>)
    10c2:	681d      	ldr	r5, [r3, #0]
    10c4:	682b      	ldr	r3, [r5, #0]
    10c6:	791b      	ldrb	r3, [r3, #4]
    10c8:	42a3      	cmp	r3, r4
    10ca:	d800      	bhi.n	10ce <udc_process_setup+0x332>
    10cc:	e683      	b.n	dd6 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    10ce:	2100      	movs	r1, #0
    10d0:	0020      	movs	r0, r4
    10d2:	4b3d      	ldr	r3, [pc, #244]	; (11c8 <udc_process_setup+0x42c>)
    10d4:	4798      	blx	r3
    10d6:	2800      	cmp	r0, #0
    10d8:	d100      	bne.n	10dc <udc_process_setup+0x340>
    10da:	e674      	b.n	dc6 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    10dc:	686b      	ldr	r3, [r5, #4]
    10de:	00a2      	lsls	r2, r4, #2
    10e0:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    10e2:	68eb      	ldr	r3, [r5, #12]
    10e4:	4798      	blx	r3
    10e6:	0001      	movs	r1, r0
    10e8:	0020      	movs	r0, r4
    10ea:	4b37      	ldr	r3, [pc, #220]	; (11c8 <udc_process_setup+0x42c>)
    10ec:	4798      	blx	r3
    10ee:	2800      	cmp	r0, #0
    10f0:	d100      	bne.n	10f4 <udc_process_setup+0x358>
    10f2:	e668      	b.n	dc6 <udc_process_setup+0x2a>
	return udi_api->setup();
    10f4:	68ab      	ldr	r3, [r5, #8]
    10f6:	4798      	blx	r3
		if (udc_req_iface()) {
    10f8:	2800      	cmp	r0, #0
    10fa:	d000      	beq.n	10fe <udc_process_setup+0x362>
    10fc:	e66b      	b.n	dd6 <udc_process_setup+0x3a>
    10fe:	e662      	b.n	dc6 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1100:	4b2e      	ldr	r3, [pc, #184]	; (11bc <udc_process_setup+0x420>)
    1102:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1104:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1106:	0028      	movs	r0, r5
    1108:	4b30      	ldr	r3, [pc, #192]	; (11cc <udc_process_setup+0x430>)
    110a:	4798      	blx	r3
    110c:	2800      	cmp	r0, #0
    110e:	d100      	bne.n	1112 <udc_process_setup+0x376>
    1110:	e652      	b.n	db8 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1112:	b2e1      	uxtb	r1, r4
    1114:	0028      	movs	r0, r5
    1116:	4b2e      	ldr	r3, [pc, #184]	; (11d0 <udc_process_setup+0x434>)
    1118:	4798      	blx	r3
    111a:	e023      	b.n	1164 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength) {
    111c:	4b27      	ldr	r3, [pc, #156]	; (11bc <udc_process_setup+0x420>)
    111e:	88db      	ldrh	r3, [r3, #6]
    1120:	2b00      	cmp	r3, #0
    1122:	d000      	beq.n	1126 <udc_process_setup+0x38a>
    1124:	e64f      	b.n	dc6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1126:	4b25      	ldr	r3, [pc, #148]	; (11bc <udc_process_setup+0x420>)
    1128:	885b      	ldrh	r3, [r3, #2]
    112a:	2b00      	cmp	r3, #0
    112c:	d000      	beq.n	1130 <udc_process_setup+0x394>
    112e:	e64a      	b.n	dc6 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1130:	4b22      	ldr	r3, [pc, #136]	; (11bc <udc_process_setup+0x420>)
    1132:	7918      	ldrb	r0, [r3, #4]
    1134:	4b27      	ldr	r3, [pc, #156]	; (11d4 <udc_process_setup+0x438>)
    1136:	4798      	blx	r3
    1138:	e014      	b.n	1164 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength) {
    113a:	4b20      	ldr	r3, [pc, #128]	; (11bc <udc_process_setup+0x420>)
    113c:	88db      	ldrh	r3, [r3, #6]
    113e:	2b00      	cmp	r3, #0
    1140:	d000      	beq.n	1144 <udc_process_setup+0x3a8>
    1142:	e640      	b.n	dc6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1144:	4b1d      	ldr	r3, [pc, #116]	; (11bc <udc_process_setup+0x420>)
    1146:	885b      	ldrh	r3, [r3, #2]
    1148:	2b00      	cmp	r3, #0
    114a:	d000      	beq.n	114e <udc_process_setup+0x3b2>
    114c:	e63b      	b.n	dc6 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    114e:	4c1b      	ldr	r4, [pc, #108]	; (11bc <udc_process_setup+0x420>)
    1150:	7920      	ldrb	r0, [r4, #4]
    1152:	4b21      	ldr	r3, [pc, #132]	; (11d8 <udc_process_setup+0x43c>)
    1154:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1156:	7920      	ldrb	r0, [r4, #4]
    1158:	4b20      	ldr	r3, [pc, #128]	; (11dc <udc_process_setup+0x440>)
    115a:	4798      	blx	r3
    115c:	e002      	b.n	1164 <udc_process_setup+0x3c8>
		return false;
    115e:	2000      	movs	r0, #0
    1160:	e000      	b.n	1164 <udc_process_setup+0x3c8>
				return udc_req_std_dev_set_feature();
    1162:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1164:	2800      	cmp	r0, #0
    1166:	d000      	beq.n	116a <udc_process_setup+0x3ce>
    1168:	e635      	b.n	dd6 <udc_process_setup+0x3a>
    116a:	e625      	b.n	db8 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    116c:	4b14      	ldr	r3, [pc, #80]	; (11c0 <udc_process_setup+0x424>)
    116e:	781b      	ldrb	r3, [r3, #0]
    1170:	2b00      	cmp	r3, #0
    1172:	d100      	bne.n	1176 <udc_process_setup+0x3da>
    1174:	e62f      	b.n	dd6 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1176:	4b13      	ldr	r3, [pc, #76]	; (11c4 <udc_process_setup+0x428>)
    1178:	681b      	ldr	r3, [r3, #0]
    117a:	681a      	ldr	r2, [r3, #0]
    117c:	7912      	ldrb	r2, [r2, #4]
    117e:	2a00      	cmp	r2, #0
    1180:	d01a      	beq.n	11b8 <udc_process_setup+0x41c>
    1182:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1184:	4e10      	ldr	r6, [pc, #64]	; (11c8 <udc_process_setup+0x42c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1186:	4f0f      	ldr	r7, [pc, #60]	; (11c4 <udc_process_setup+0x428>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1188:	685b      	ldr	r3, [r3, #4]
    118a:	00aa      	lsls	r2, r5, #2
    118c:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    118e:	68e3      	ldr	r3, [r4, #12]
    1190:	4798      	blx	r3
    1192:	0001      	movs	r1, r0
    1194:	0028      	movs	r0, r5
    1196:	47b0      	blx	r6
    1198:	2800      	cmp	r0, #0
    119a:	d100      	bne.n	119e <udc_process_setup+0x402>
    119c:	e61b      	b.n	dd6 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    119e:	68a3      	ldr	r3, [r4, #8]
    11a0:	4798      	blx	r3
    11a2:	2800      	cmp	r0, #0
    11a4:	d000      	beq.n	11a8 <udc_process_setup+0x40c>
    11a6:	e616      	b.n	dd6 <udc_process_setup+0x3a>
			iface_num++) {
    11a8:	3501      	adds	r5, #1
    11aa:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11ac:	683b      	ldr	r3, [r7, #0]
    11ae:	681a      	ldr	r2, [r3, #0]
    11b0:	7912      	ldrb	r2, [r2, #4]
    11b2:	42aa      	cmp	r2, r5
    11b4:	d8e8      	bhi.n	1188 <udc_process_setup+0x3ec>
    11b6:	e60e      	b.n	dd6 <udc_process_setup+0x3a>
	return false;
    11b8:	2000      	movs	r0, #0
    11ba:	e60c      	b.n	dd6 <udc_process_setup+0x3a>
    11bc:	20000540 	.word	0x20000540
    11c0:	20000130 	.word	0x20000130
    11c4:	20000134 	.word	0x20000134
    11c8:	00000bbd 	.word	0x00000bbd
    11cc:	00000c31 	.word	0x00000c31
    11d0:	00000c9d 	.word	0x00000c9d
    11d4:	0000246d 	.word	0x0000246d
    11d8:	0000218d 	.word	0x0000218d
    11dc:	0000233d 	.word	0x0000233d

000011e0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    11e0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    11e2:	2200      	movs	r2, #0
    11e4:	4b10      	ldr	r3, [pc, #64]	; (1228 <EIC_Handler+0x48>)
    11e6:	701a      	strb	r2, [r3, #0]
    11e8:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    11ea:	4910      	ldr	r1, [pc, #64]	; (122c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    11ec:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    11ee:	4e10      	ldr	r6, [pc, #64]	; (1230 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    11f0:	4c0d      	ldr	r4, [pc, #52]	; (1228 <EIC_Handler+0x48>)
    11f2:	e00a      	b.n	120a <EIC_Handler+0x2a>
		return eics[eic_index];
    11f4:	490d      	ldr	r1, [pc, #52]	; (122c <EIC_Handler+0x4c>)
    11f6:	e008      	b.n	120a <EIC_Handler+0x2a>
    11f8:	7823      	ldrb	r3, [r4, #0]
    11fa:	3301      	adds	r3, #1
    11fc:	b2db      	uxtb	r3, r3
    11fe:	7023      	strb	r3, [r4, #0]
    1200:	2b0f      	cmp	r3, #15
    1202:	d810      	bhi.n	1226 <EIC_Handler+0x46>
		return NULL;
    1204:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1206:	2b1f      	cmp	r3, #31
    1208:	d9f4      	bls.n	11f4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    120a:	0028      	movs	r0, r5
    120c:	4018      	ands	r0, r3
    120e:	2201      	movs	r2, #1
    1210:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1212:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    1214:	4210      	tst	r0, r2
    1216:	d0ef      	beq.n	11f8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1218:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    121a:	009b      	lsls	r3, r3, #2
    121c:	599b      	ldr	r3, [r3, r6]
    121e:	2b00      	cmp	r3, #0
    1220:	d0ea      	beq.n	11f8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1222:	4798      	blx	r3
    1224:	e7e8      	b.n	11f8 <EIC_Handler+0x18>
			}
		}
	}
}
    1226:	bd70      	pop	{r4, r5, r6, pc}
    1228:	20000355 	.word	0x20000355
    122c:	40002400 	.word	0x40002400
    1230:	20000358 	.word	0x20000358

00001234 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1234:	4a06      	ldr	r2, [pc, #24]	; (1250 <_extint_enable+0x1c>)
    1236:	7813      	ldrb	r3, [r2, #0]
    1238:	2102      	movs	r1, #2
    123a:	430b      	orrs	r3, r1
    123c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    123e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1240:	6853      	ldr	r3, [r2, #4]
    1242:	4219      	tst	r1, r3
    1244:	d1fc      	bne.n	1240 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1246:	6853      	ldr	r3, [r2, #4]
    1248:	4218      	tst	r0, r3
    124a:	d1f9      	bne.n	1240 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    124c:	4770      	bx	lr
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	40002400 	.word	0x40002400

00001254 <_system_extint_init>:
{
    1254:	b500      	push	{lr}
    1256:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1258:	4a17      	ldr	r2, [pc, #92]	; (12b8 <_system_extint_init+0x64>)
    125a:	6951      	ldr	r1, [r2, #20]
    125c:	2380      	movs	r3, #128	; 0x80
    125e:	009b      	lsls	r3, r3, #2
    1260:	430b      	orrs	r3, r1
    1262:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1264:	a901      	add	r1, sp, #4
    1266:	2300      	movs	r3, #0
    1268:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    126a:	2003      	movs	r0, #3
    126c:	4b13      	ldr	r3, [pc, #76]	; (12bc <_system_extint_init+0x68>)
    126e:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1270:	2003      	movs	r0, #3
    1272:	4b13      	ldr	r3, [pc, #76]	; (12c0 <_system_extint_init+0x6c>)
    1274:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    1276:	4a13      	ldr	r2, [pc, #76]	; (12c4 <_system_extint_init+0x70>)
    1278:	7813      	ldrb	r3, [r2, #0]
    127a:	2101      	movs	r1, #1
    127c:	430b      	orrs	r3, r1
    127e:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1280:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1282:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1284:	6853      	ldr	r3, [r2, #4]
    1286:	4219      	tst	r1, r3
    1288:	d1fc      	bne.n	1284 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    128a:	6853      	ldr	r3, [r2, #4]
    128c:	4218      	tst	r0, r3
    128e:	d1f9      	bne.n	1284 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    1290:	4a0c      	ldr	r2, [pc, #48]	; (12c4 <_system_extint_init+0x70>)
    1292:	7813      	ldrb	r3, [r2, #0]
    1294:	2110      	movs	r1, #16
    1296:	438b      	bics	r3, r1
    1298:	7013      	strb	r3, [r2, #0]
    129a:	4b0b      	ldr	r3, [pc, #44]	; (12c8 <_system_extint_init+0x74>)
    129c:	0019      	movs	r1, r3
    129e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    12a0:	2200      	movs	r2, #0
    12a2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    12a4:	428b      	cmp	r3, r1
    12a6:	d1fc      	bne.n	12a2 <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12a8:	2208      	movs	r2, #8
    12aa:	4b08      	ldr	r3, [pc, #32]	; (12cc <_system_extint_init+0x78>)
    12ac:	601a      	str	r2, [r3, #0]
	_extint_enable();
    12ae:	4b08      	ldr	r3, [pc, #32]	; (12d0 <_system_extint_init+0x7c>)
    12b0:	4798      	blx	r3
}
    12b2:	b003      	add	sp, #12
    12b4:	bd00      	pop	{pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	40000400 	.word	0x40000400
    12bc:	000019cd 	.word	0x000019cd
    12c0:	0000195d 	.word	0x0000195d
    12c4:	40002400 	.word	0x40002400
    12c8:	20000358 	.word	0x20000358
    12cc:	e000e100 	.word	0xe000e100
    12d0:	00001235 	.word	0x00001235

000012d4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    12d4:	b500      	push	{lr}
    12d6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12d8:	ab01      	add	r3, sp, #4
    12da:	2280      	movs	r2, #128	; 0x80
    12dc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    12de:	780a      	ldrb	r2, [r1, #0]
    12e0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    12e2:	784a      	ldrb	r2, [r1, #1]
    12e4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    12e6:	788a      	ldrb	r2, [r1, #2]
    12e8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    12ea:	0019      	movs	r1, r3
    12ec:	4b01      	ldr	r3, [pc, #4]	; (12f4 <port_pin_set_config+0x20>)
    12ee:	4798      	blx	r3
}
    12f0:	b003      	add	sp, #12
    12f2:	bd00      	pop	{pc}
    12f4:	00001ac9 	.word	0x00001ac9

000012f8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    12f8:	4770      	bx	lr
	...

000012fc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    12fc:	4b0c      	ldr	r3, [pc, #48]	; (1330 <cpu_irq_enter_critical+0x34>)
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	2b00      	cmp	r3, #0
    1302:	d106      	bne.n	1312 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1304:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1308:	2b00      	cmp	r3, #0
    130a:	d007      	beq.n	131c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    130c:	2200      	movs	r2, #0
    130e:	4b09      	ldr	r3, [pc, #36]	; (1334 <cpu_irq_enter_critical+0x38>)
    1310:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1312:	4a07      	ldr	r2, [pc, #28]	; (1330 <cpu_irq_enter_critical+0x34>)
    1314:	6813      	ldr	r3, [r2, #0]
    1316:	3301      	adds	r3, #1
    1318:	6013      	str	r3, [r2, #0]
}
    131a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    131c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    131e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1322:	2200      	movs	r2, #0
    1324:	4b04      	ldr	r3, [pc, #16]	; (1338 <cpu_irq_enter_critical+0x3c>)
    1326:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1328:	3201      	adds	r2, #1
    132a:	4b02      	ldr	r3, [pc, #8]	; (1334 <cpu_irq_enter_critical+0x38>)
    132c:	701a      	strb	r2, [r3, #0]
    132e:	e7f0      	b.n	1312 <cpu_irq_enter_critical+0x16>
    1330:	2000013c 	.word	0x2000013c
    1334:	20000140 	.word	0x20000140
    1338:	200000dc 	.word	0x200000dc

0000133c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    133c:	4b08      	ldr	r3, [pc, #32]	; (1360 <cpu_irq_leave_critical+0x24>)
    133e:	681a      	ldr	r2, [r3, #0]
    1340:	3a01      	subs	r2, #1
    1342:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1344:	681b      	ldr	r3, [r3, #0]
    1346:	2b00      	cmp	r3, #0
    1348:	d109      	bne.n	135e <cpu_irq_leave_critical+0x22>
    134a:	4b06      	ldr	r3, [pc, #24]	; (1364 <cpu_irq_leave_critical+0x28>)
    134c:	781b      	ldrb	r3, [r3, #0]
    134e:	2b00      	cmp	r3, #0
    1350:	d005      	beq.n	135e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1352:	2201      	movs	r2, #1
    1354:	4b04      	ldr	r3, [pc, #16]	; (1368 <cpu_irq_leave_critical+0x2c>)
    1356:	701a      	strb	r2, [r3, #0]
    1358:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    135c:	b662      	cpsie	i
	}
}
    135e:	4770      	bx	lr
    1360:	2000013c 	.word	0x2000013c
    1364:	20000140 	.word	0x20000140
    1368:	200000dc 	.word	0x200000dc

0000136c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    136c:	b510      	push	{r4, lr}
	switch (clock_source) {
    136e:	2808      	cmp	r0, #8
    1370:	d803      	bhi.n	137a <system_clock_source_get_hz+0xe>
    1372:	0080      	lsls	r0, r0, #2
    1374:	4b1d      	ldr	r3, [pc, #116]	; (13ec <system_clock_source_get_hz+0x80>)
    1376:	581b      	ldr	r3, [r3, r0]
    1378:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    137a:	2000      	movs	r0, #0
    137c:	e034      	b.n	13e8 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    137e:	4b1c      	ldr	r3, [pc, #112]	; (13f0 <system_clock_source_get_hz+0x84>)
    1380:	6918      	ldr	r0, [r3, #16]
    1382:	e031      	b.n	13e8 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1384:	4b1b      	ldr	r3, [pc, #108]	; (13f4 <system_clock_source_get_hz+0x88>)
    1386:	7d18      	ldrb	r0, [r3, #20]
    1388:	0700      	lsls	r0, r0, #28
    138a:	0f80      	lsrs	r0, r0, #30
    138c:	1c43      	adds	r3, r0, #1
    138e:	481a      	ldr	r0, [pc, #104]	; (13f8 <system_clock_source_get_hz+0x8c>)
    1390:	4358      	muls	r0, r3
    1392:	e029      	b.n	13e8 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    1394:	4b16      	ldr	r3, [pc, #88]	; (13f0 <system_clock_source_get_hz+0x84>)
    1396:	6958      	ldr	r0, [r3, #20]
    1398:	e026      	b.n	13e8 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    139a:	4b15      	ldr	r3, [pc, #84]	; (13f0 <system_clock_source_get_hz+0x84>)
    139c:	681b      	ldr	r3, [r3, #0]
			return 0;
    139e:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    13a0:	079b      	lsls	r3, r3, #30
    13a2:	d521      	bpl.n	13e8 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    13a4:	4913      	ldr	r1, [pc, #76]	; (13f4 <system_clock_source_get_hz+0x88>)
    13a6:	2280      	movs	r2, #128	; 0x80
    13a8:	0052      	lsls	r2, r2, #1
    13aa:	68cb      	ldr	r3, [r1, #12]
    13ac:	4213      	tst	r3, r2
    13ae:	d0fc      	beq.n	13aa <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    13b0:	4b0f      	ldr	r3, [pc, #60]	; (13f0 <system_clock_source_get_hz+0x84>)
    13b2:	681a      	ldr	r2, [r3, #0]
    13b4:	2324      	movs	r3, #36	; 0x24
    13b6:	4013      	ands	r3, r2
    13b8:	2b04      	cmp	r3, #4
    13ba:	d001      	beq.n	13c0 <system_clock_source_get_hz+0x54>
			return 48000000UL;
    13bc:	480f      	ldr	r0, [pc, #60]	; (13fc <system_clock_source_get_hz+0x90>)
    13be:	e013      	b.n	13e8 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    13c0:	2000      	movs	r0, #0
    13c2:	4b0f      	ldr	r3, [pc, #60]	; (1400 <system_clock_source_get_hz+0x94>)
    13c4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    13c6:	4b0a      	ldr	r3, [pc, #40]	; (13f0 <system_clock_source_get_hz+0x84>)
    13c8:	689b      	ldr	r3, [r3, #8]
    13ca:	041b      	lsls	r3, r3, #16
    13cc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    13ce:	4358      	muls	r0, r3
    13d0:	e00a      	b.n	13e8 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    13d2:	2328      	movs	r3, #40	; 0x28
    13d4:	4a07      	ldr	r2, [pc, #28]	; (13f4 <system_clock_source_get_hz+0x88>)
    13d6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    13d8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    13da:	079b      	lsls	r3, r3, #30
    13dc:	d504      	bpl.n	13e8 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    13de:	4b04      	ldr	r3, [pc, #16]	; (13f0 <system_clock_source_get_hz+0x84>)
    13e0:	68d8      	ldr	r0, [r3, #12]
    13e2:	e001      	b.n	13e8 <system_clock_source_get_hz+0x7c>
		return 32768UL;
    13e4:	2080      	movs	r0, #128	; 0x80
    13e6:	0200      	lsls	r0, r0, #8
	}
}
    13e8:	bd10      	pop	{r4, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	00003fd8 	.word	0x00003fd8
    13f0:	20000144 	.word	0x20000144
    13f4:	40000c00 	.word	0x40000c00
    13f8:	003d0900 	.word	0x003d0900
    13fc:	02dc6c00 	.word	0x02dc6c00
    1400:	000019f1 	.word	0x000019f1

00001404 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1404:	b5f0      	push	{r4, r5, r6, r7, lr}
    1406:	46d6      	mov	lr, sl
    1408:	464f      	mov	r7, r9
    140a:	4646      	mov	r6, r8
    140c:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    140e:	4b20      	ldr	r3, [pc, #128]	; (1490 <system_clock_source_xosc32k_set_config+0x8c>)
    1410:	469a      	mov	sl, r3
    1412:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1414:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1416:	7801      	ldrb	r1, [r0, #0]
    1418:	424c      	negs	r4, r1
    141a:	414c      	adcs	r4, r1
    141c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    141e:	7881      	ldrb	r1, [r0, #2]
    1420:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1422:	78c1      	ldrb	r1, [r0, #3]
    1424:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    1426:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1428:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    142a:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    142c:	6840      	ldr	r0, [r0, #4]
    142e:	4919      	ldr	r1, [pc, #100]	; (1494 <system_clock_source_xosc32k_set_config+0x90>)
    1430:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    1432:	2101      	movs	r1, #1
    1434:	4648      	mov	r0, r9
    1436:	0080      	lsls	r0, r0, #2
    1438:	2204      	movs	r2, #4
    143a:	4393      	bics	r3, r2
    143c:	4303      	orrs	r3, r0
    143e:	4640      	mov	r0, r8
    1440:	4008      	ands	r0, r1
    1442:	00c0      	lsls	r0, r0, #3
    1444:	3204      	adds	r2, #4
    1446:	4393      	bics	r3, r2
    1448:	4303      	orrs	r3, r0
    144a:	4660      	mov	r0, ip
    144c:	4008      	ands	r0, r1
    144e:	0100      	lsls	r0, r0, #4
    1450:	3208      	adds	r2, #8
    1452:	4393      	bics	r3, r2
    1454:	4303      	orrs	r3, r0
    1456:	400f      	ands	r7, r1
    1458:	01bf      	lsls	r7, r7, #6
    145a:	2040      	movs	r0, #64	; 0x40
    145c:	4383      	bics	r3, r0
    145e:	433b      	orrs	r3, r7
    1460:	400e      	ands	r6, r1
    1462:	01f6      	lsls	r6, r6, #7
    1464:	3040      	adds	r0, #64	; 0x40
    1466:	4383      	bics	r3, r0
    1468:	4333      	orrs	r3, r6
    146a:	3879      	subs	r0, #121	; 0x79
    146c:	4005      	ands	r5, r0
    146e:	022d      	lsls	r5, r5, #8
    1470:	4809      	ldr	r0, [pc, #36]	; (1498 <system_clock_source_xosc32k_set_config+0x94>)
    1472:	4003      	ands	r3, r0
    1474:	432b      	orrs	r3, r5
    1476:	4021      	ands	r1, r4
    1478:	0309      	lsls	r1, r1, #12
    147a:	4808      	ldr	r0, [pc, #32]	; (149c <system_clock_source_xosc32k_set_config+0x98>)
    147c:	4003      	ands	r3, r0
    147e:	430b      	orrs	r3, r1
    1480:	4652      	mov	r2, sl
    1482:	6153      	str	r3, [r2, #20]
}
    1484:	bc1c      	pop	{r2, r3, r4}
    1486:	4690      	mov	r8, r2
    1488:	4699      	mov	r9, r3
    148a:	46a2      	mov	sl, r4
    148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	40001000 	.word	0x40001000
    1494:	20000144 	.word	0x20000144
    1498:	fffff8ff 	.word	0xfffff8ff
    149c:	ffffefff 	.word	0xffffefff

000014a0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    14a0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    14a2:	7a83      	ldrb	r3, [r0, #10]
    14a4:	069b      	lsls	r3, r3, #26
    14a6:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    14a8:	8982      	ldrh	r2, [r0, #12]
    14aa:	0592      	lsls	r2, r2, #22
    14ac:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    14ae:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    14b0:	491a      	ldr	r1, [pc, #104]	; (151c <system_clock_source_dfll_set_config+0x7c>)
    14b2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    14b4:	7a03      	ldrb	r3, [r0, #8]
    14b6:	7a42      	ldrb	r2, [r0, #9]
    14b8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    14ba:	8882      	ldrh	r2, [r0, #4]
    14bc:	88c4      	ldrh	r4, [r0, #6]
    14be:	4322      	orrs	r2, r4
    14c0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    14c2:	7842      	ldrb	r2, [r0, #1]
    14c4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    14c6:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    14c8:	7882      	ldrb	r2, [r0, #2]
    14ca:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    14cc:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    14ce:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    14d0:	7803      	ldrb	r3, [r0, #0]
    14d2:	2b04      	cmp	r3, #4
    14d4:	d011      	beq.n	14fa <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    14d6:	2b20      	cmp	r3, #32
    14d8:	d10e      	bne.n	14f8 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    14da:	7b83      	ldrb	r3, [r0, #14]
    14dc:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    14de:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    14e0:	4313      	orrs	r3, r2
    14e2:	8a02      	ldrh	r2, [r0, #16]
    14e4:	0412      	lsls	r2, r2, #16
    14e6:	490e      	ldr	r1, [pc, #56]	; (1520 <system_clock_source_dfll_set_config+0x80>)
    14e8:	400a      	ands	r2, r1
    14ea:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    14ec:	4a0b      	ldr	r2, [pc, #44]	; (151c <system_clock_source_dfll_set_config+0x7c>)
    14ee:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    14f0:	6811      	ldr	r1, [r2, #0]
    14f2:	4b0c      	ldr	r3, [pc, #48]	; (1524 <system_clock_source_dfll_set_config+0x84>)
    14f4:	430b      	orrs	r3, r1
    14f6:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    14f8:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    14fa:	7b83      	ldrb	r3, [r0, #14]
    14fc:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    14fe:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1500:	4313      	orrs	r3, r2
    1502:	8a02      	ldrh	r2, [r0, #16]
    1504:	0412      	lsls	r2, r2, #16
    1506:	4906      	ldr	r1, [pc, #24]	; (1520 <system_clock_source_dfll_set_config+0x80>)
    1508:	400a      	ands	r2, r1
    150a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    150c:	4a03      	ldr	r2, [pc, #12]	; (151c <system_clock_source_dfll_set_config+0x7c>)
    150e:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1510:	6813      	ldr	r3, [r2, #0]
    1512:	2104      	movs	r1, #4
    1514:	430b      	orrs	r3, r1
    1516:	6013      	str	r3, [r2, #0]
    1518:	e7ee      	b.n	14f8 <system_clock_source_dfll_set_config+0x58>
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	20000144 	.word	0x20000144
    1520:	03ff0000 	.word	0x03ff0000
    1524:	00000424 	.word	0x00000424

00001528 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1528:	2808      	cmp	r0, #8
    152a:	d803      	bhi.n	1534 <system_clock_source_enable+0xc>
    152c:	0080      	lsls	r0, r0, #2
    152e:	4b2d      	ldr	r3, [pc, #180]	; (15e4 <system_clock_source_enable+0xbc>)
    1530:	581b      	ldr	r3, [r3, r0]
    1532:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1534:	2017      	movs	r0, #23
    1536:	e054      	b.n	15e2 <system_clock_source_enable+0xba>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    1538:	4a2b      	ldr	r2, [pc, #172]	; (15e8 <system_clock_source_enable+0xc0>)
    153a:	7d13      	ldrb	r3, [r2, #20]
    153c:	2102      	movs	r1, #2
    153e:	430b      	orrs	r3, r1
    1540:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    1542:	2000      	movs	r0, #0
    1544:	e04d      	b.n	15e2 <system_clock_source_enable+0xba>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    1546:	4a29      	ldr	r2, [pc, #164]	; (15ec <system_clock_source_enable+0xc4>)
    1548:	6993      	ldr	r3, [r2, #24]
    154a:	2102      	movs	r1, #2
    154c:	430b      	orrs	r3, r1
    154e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1550:	2000      	movs	r0, #0
		break;
    1552:	e046      	b.n	15e2 <system_clock_source_enable+0xba>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    1554:	4a24      	ldr	r2, [pc, #144]	; (15e8 <system_clock_source_enable+0xc0>)
    1556:	8a13      	ldrh	r3, [r2, #16]
    1558:	2102      	movs	r1, #2
    155a:	430b      	orrs	r3, r1
    155c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    155e:	2000      	movs	r0, #0
		break;
    1560:	e03f      	b.n	15e2 <system_clock_source_enable+0xba>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    1562:	4a22      	ldr	r2, [pc, #136]	; (15ec <system_clock_source_enable+0xc4>)
    1564:	6953      	ldr	r3, [r2, #20]
    1566:	2102      	movs	r1, #2
    1568:	430b      	orrs	r3, r1
    156a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    156c:	2000      	movs	r0, #0
		break;
    156e:	e038      	b.n	15e2 <system_clock_source_enable+0xba>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    1570:	491f      	ldr	r1, [pc, #124]	; (15f0 <system_clock_source_enable+0xc8>)
    1572:	680b      	ldr	r3, [r1, #0]
    1574:	2202      	movs	r2, #2
    1576:	4313      	orrs	r3, r2
    1578:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    157a:	4b1b      	ldr	r3, [pc, #108]	; (15e8 <system_clock_source_enable+0xc0>)
    157c:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    157e:	0019      	movs	r1, r3
    1580:	32fe      	adds	r2, #254	; 0xfe
    1582:	68cb      	ldr	r3, [r1, #12]
    1584:	4213      	tst	r3, r2
    1586:	d0fc      	beq.n	1582 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1588:	4b19      	ldr	r3, [pc, #100]	; (15f0 <system_clock_source_enable+0xc8>)
    158a:	689a      	ldr	r2, [r3, #8]
    158c:	4b16      	ldr	r3, [pc, #88]	; (15e8 <system_clock_source_enable+0xc0>)
    158e:	621a      	str	r2, [r3, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    1590:	2202      	movs	r2, #2
    1592:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1594:	0019      	movs	r1, r3
    1596:	32fe      	adds	r2, #254	; 0xfe
    1598:	68cb      	ldr	r3, [r1, #12]
    159a:	4213      	tst	r3, r2
    159c:	d0fc      	beq.n	1598 <system_clock_source_enable+0x70>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    159e:	4b14      	ldr	r3, [pc, #80]	; (15f0 <system_clock_source_enable+0xc8>)
    15a0:	685a      	ldr	r2, [r3, #4]
    15a2:	4b11      	ldr	r3, [pc, #68]	; (15e8 <system_clock_source_enable+0xc0>)
    15a4:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    15a6:	2200      	movs	r2, #0
    15a8:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    15aa:	0019      	movs	r1, r3
    15ac:	3201      	adds	r2, #1
    15ae:	32ff      	adds	r2, #255	; 0xff
    15b0:	68cb      	ldr	r3, [r1, #12]
    15b2:	4213      	tst	r3, r2
    15b4:	d0fc      	beq.n	15b0 <system_clock_source_enable+0x88>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    15b6:	4b0e      	ldr	r3, [pc, #56]	; (15f0 <system_clock_source_enable+0xc8>)
    15b8:	681b      	ldr	r3, [r3, #0]
    15ba:	b29b      	uxth	r3, r3
    15bc:	4a0a      	ldr	r2, [pc, #40]	; (15e8 <system_clock_source_enable+0xc0>)
    15be:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    15c0:	2000      	movs	r0, #0
    15c2:	e00e      	b.n	15e2 <system_clock_source_enable+0xba>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    15c4:	4908      	ldr	r1, [pc, #32]	; (15e8 <system_clock_source_enable+0xc0>)
    15c6:	2228      	movs	r2, #40	; 0x28
    15c8:	5c8b      	ldrb	r3, [r1, r2]
    15ca:	2002      	movs	r0, #2
    15cc:	4303      	orrs	r3, r0
    15ce:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    15d0:	0008      	movs	r0, r1
    15d2:	2138      	movs	r1, #56	; 0x38
    15d4:	3a26      	subs	r2, #38	; 0x26
    15d6:	5c43      	ldrb	r3, [r0, r1]
    15d8:	4213      	tst	r3, r2
    15da:	d1fc      	bne.n	15d6 <system_clock_source_enable+0xae>
	return STATUS_OK;
    15dc:	2000      	movs	r0, #0
    15de:	e000      	b.n	15e2 <system_clock_source_enable+0xba>
		return STATUS_OK;
    15e0:	2000      	movs	r0, #0
}
    15e2:	4770      	bx	lr
    15e4:	00003ffc 	.word	0x00003ffc
    15e8:	40000c00 	.word	0x40000c00
    15ec:	40001000 	.word	0x40001000
    15f0:	20000144 	.word	0x20000144

000015f4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    15f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15f6:	46c6      	mov	lr, r8
    15f8:	b500      	push	{lr}
    15fa:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    15fc:	2280      	movs	r2, #128	; 0x80
    15fe:	0052      	lsls	r2, r2, #1
    1600:	4b65      	ldr	r3, [pc, #404]	; (1798 <system_clock_init+0x1a4>)
    1602:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1604:	3afd      	subs	r2, #253	; 0xfd
    1606:	4b65      	ldr	r3, [pc, #404]	; (179c <system_clock_init+0x1a8>)
    1608:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    160a:	4a65      	ldr	r2, [pc, #404]	; (17a0 <system_clock_init+0x1ac>)
    160c:	6853      	ldr	r3, [r2, #4]
    160e:	211e      	movs	r1, #30
    1610:	438b      	bics	r3, r1
    1612:	391a      	subs	r1, #26
    1614:	430b      	orrs	r3, r1
    1616:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1618:	2380      	movs	r3, #128	; 0x80
    161a:	05db      	lsls	r3, r3, #23
    161c:	789b      	ldrb	r3, [r3, #2]
    161e:	2b02      	cmp	r3, #2
    1620:	d00f      	beq.n	1642 <system_clock_init+0x4e>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    1622:	2380      	movs	r3, #128	; 0x80
    1624:	05db      	lsls	r3, r3, #23
    1626:	789b      	ldrb	r3, [r3, #2]
    1628:	b25b      	sxtb	r3, r3
    162a:	2b00      	cmp	r3, #0
    162c:	db09      	blt.n	1642 <system_clock_init+0x4e>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    162e:	2380      	movs	r3, #128	; 0x80
    1630:	05db      	lsls	r3, r3, #23
    1632:	2201      	movs	r2, #1
    1634:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1636:	3201      	adds	r2, #1
    1638:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    163a:	001a      	movs	r2, r3
    163c:	7993      	ldrb	r3, [r2, #6]
    163e:	2b00      	cmp	r3, #0
    1640:	d0fc      	beq.n	163c <system_clock_init+0x48>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1642:	a809      	add	r0, sp, #36	; 0x24
    1644:	2300      	movs	r3, #0
    1646:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1648:	2280      	movs	r2, #128	; 0x80
    164a:	0212      	lsls	r2, r2, #8
    164c:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    164e:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    1650:	2201      	movs	r2, #1
    1652:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    1654:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1656:	2104      	movs	r1, #4
    1658:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    165a:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    165c:	7202      	strb	r2, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    165e:	4b51      	ldr	r3, [pc, #324]	; (17a4 <system_clock_init+0x1b0>)
    1660:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1662:	2005      	movs	r0, #5
    1664:	4b50      	ldr	r3, [pc, #320]	; (17a8 <system_clock_init+0x1b4>)
    1666:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    1668:	4950      	ldr	r1, [pc, #320]	; (17ac <system_clock_init+0x1b8>)
    166a:	2201      	movs	r2, #1
    166c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    166e:	421a      	tst	r2, r3
    1670:	d0fc      	beq.n	166c <system_clock_init+0x78>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1672:	4b49      	ldr	r3, [pc, #292]	; (1798 <system_clock_init+0x1a4>)
    1674:	7d19      	ldrb	r1, [r3, #20]
    1676:	2280      	movs	r2, #128	; 0x80
    1678:	4252      	negs	r2, r2
    167a:	430a      	orrs	r2, r1
    167c:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    167e:	7d1a      	ldrb	r2, [r3, #20]
    1680:	2140      	movs	r1, #64	; 0x40
    1682:	438a      	bics	r2, r1
    1684:	751a      	strb	r2, [r3, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1686:	ab04      	add	r3, sp, #16
    1688:	2200      	movs	r2, #0
    168a:	2100      	movs	r1, #0
    168c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    168e:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1690:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    1692:	709a      	strb	r2, [r3, #2]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1694:	3120      	adds	r1, #32
    1696:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1698:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    169a:	4b45      	ldr	r3, [pc, #276]	; (17b0 <system_clock_init+0x1bc>)
    169c:	681b      	ldr	r3, [r3, #0]
    169e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    16a0:	2b3f      	cmp	r3, #63	; 0x3f
    16a2:	d100      	bne.n	16a6 <system_clock_init+0xb2>
    16a4:	e075      	b.n	1792 <system_clock_init+0x19e>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    16a6:	a804      	add	r0, sp, #16
    16a8:	7283      	strb	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    16aa:	2303      	movs	r3, #3
    16ac:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    16ae:	3307      	adds	r3, #7
    16b0:	8203      	strh	r3, [r0, #16]
		dfll_conf.fine_value   = 0x1ff;
    16b2:	4b40      	ldr	r3, [pc, #256]	; (17b4 <system_clock_init+0x1c0>)
    16b4:	8183      	strh	r3, [r0, #12]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    16b6:	3bff      	subs	r3, #255	; 0xff
    16b8:	80c3      	strh	r3, [r0, #6]

		dfll_conf.multiply_factor = 48000;
    16ba:	4b3f      	ldr	r3, [pc, #252]	; (17b8 <system_clock_init+0x1c4>)
    16bc:	8243      	strh	r3, [r0, #18]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    16be:	4b3f      	ldr	r3, [pc, #252]	; (17bc <system_clock_init+0x1c8>)
    16c0:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    16c2:	4b3f      	ldr	r3, [pc, #252]	; (17c0 <system_clock_init+0x1cc>)
    16c4:	4798      	blx	r3
	config->division_factor    = 1;
    16c6:	ac01      	add	r4, sp, #4
    16c8:	2601      	movs	r6, #1
    16ca:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    16cc:	2500      	movs	r5, #0
    16ce:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    16d0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    16d2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    16d4:	2305      	movs	r3, #5
    16d6:	7023      	strb	r3, [r4, #0]
    16d8:	0021      	movs	r1, r4
    16da:	2001      	movs	r0, #1
    16dc:	4b39      	ldr	r3, [pc, #228]	; (17c4 <system_clock_init+0x1d0>)
    16de:	4698      	mov	r8, r3
    16e0:	4798      	blx	r3
    16e2:	2001      	movs	r0, #1
    16e4:	4f38      	ldr	r7, [pc, #224]	; (17c8 <system_clock_init+0x1d4>)
    16e6:	47b8      	blx	r7
	config->division_factor    = 1;
    16e8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    16ea:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    16ec:	7265      	strb	r5, [r4, #9]
    16ee:	2307      	movs	r3, #7
    16f0:	7023      	strb	r3, [r4, #0]
    16f2:	7226      	strb	r6, [r4, #8]
    16f4:	0021      	movs	r1, r4
    16f6:	2003      	movs	r0, #3
    16f8:	47c0      	blx	r8
    16fa:	2003      	movs	r0, #3
    16fc:	47b8      	blx	r7
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    16fe:	2007      	movs	r0, #7
    1700:	4b29      	ldr	r3, [pc, #164]	; (17a8 <system_clock_init+0x1b4>)
    1702:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    1704:	4924      	ldr	r1, [pc, #144]	; (1798 <system_clock_init+0x1a4>)
    1706:	2280      	movs	r2, #128	; 0x80
    1708:	0052      	lsls	r2, r2, #1
    170a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    170c:	4213      	tst	r3, r2
    170e:	d0fc      	beq.n	170a <system_clock_init+0x116>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		OSCCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1710:	4a21      	ldr	r2, [pc, #132]	; (1798 <system_clock_init+0x1a4>)
    1712:	8b13      	ldrh	r3, [r2, #24]
    1714:	2180      	movs	r1, #128	; 0x80
    1716:	430b      	orrs	r3, r1
    1718:	8313      	strh	r3, [r2, #24]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    171a:	4c2c      	ldr	r4, [pc, #176]	; (17cc <system_clock_init+0x1d8>)
    171c:	2301      	movs	r3, #1
    171e:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1720:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1722:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
    1724:	a901      	add	r1, sp, #4
    1726:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1728:	2200      	movs	r2, #0
    172a:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    172c:	724a      	strb	r2, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    172e:	3207      	adds	r2, #7
    1730:	700a      	strb	r2, [r1, #0]
    1732:	720b      	strb	r3, [r1, #8]
    1734:	2000      	movs	r0, #0
    1736:	4b23      	ldr	r3, [pc, #140]	; (17c4 <system_clock_init+0x1d0>)
    1738:	4798      	blx	r3
    173a:	2000      	movs	r0, #0
    173c:	4b22      	ldr	r3, [pc, #136]	; (17c8 <system_clock_init+0x1d4>)
    173e:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    1740:	2000      	movs	r0, #0
    1742:	4b23      	ldr	r3, [pc, #140]	; (17d0 <system_clock_init+0x1dc>)
    1744:	4798      	blx	r3
    1746:	7921      	ldrb	r1, [r4, #4]
    1748:	b2c9      	uxtb	r1, r1
    174a:	4b22      	ldr	r3, [pc, #136]	; (17d4 <system_clock_init+0x1e0>)
    174c:	4798      	blx	r3
	uint32_t cpu_freq = system_cpu_clock_get_hz();

	/* Set the BUPDIV & LPDIV value such that backup & low power domain clock 
	 * does not exceed their max clock freq even if CPU is configured to it's 
	 * maximum frequency */
	if ((cpu_freq > 6000000) && ((CONF_CLOCK_BACKUP_DIVIDER == SYSTEM_MAIN_CLOCK_DIV_1) \
    174e:	4b22      	ldr	r3, [pc, #136]	; (17d8 <system_clock_init+0x1e4>)
    1750:	4298      	cmp	r0, r3
    1752:	d902      	bls.n	175a <system_clock_init+0x166>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    1754:	2208      	movs	r2, #8
    1756:	71a2      	strb	r2, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1758:	7162      	strb	r2, [r4, #5]
		system_backup_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
		system_low_power_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
	}

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */	
	if (cpu_freq <= 12000000) {
    175a:	4b20      	ldr	r3, [pc, #128]	; (17dc <system_clock_init+0x1e8>)
    175c:	4298      	cmp	r0, r3
    175e:	d814      	bhi.n	178a <system_clock_init+0x196>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1760:	2380      	movs	r3, #128	; 0x80
    1762:	05db      	lsls	r3, r3, #23
    1764:	789b      	ldrb	r3, [r3, #2]
    1766:	2b00      	cmp	r3, #0
    1768:	d00f      	beq.n	178a <system_clock_init+0x196>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    176a:	2380      	movs	r3, #128	; 0x80
    176c:	05db      	lsls	r3, r3, #23
    176e:	789b      	ldrb	r3, [r3, #2]
    1770:	b25b      	sxtb	r3, r3
    1772:	2b00      	cmp	r3, #0
    1774:	db09      	blt.n	178a <system_clock_init+0x196>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1776:	2380      	movs	r3, #128	; 0x80
    1778:	05db      	lsls	r3, r3, #23
    177a:	2201      	movs	r2, #1
    177c:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    177e:	2200      	movs	r2, #0
    1780:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    1782:	001a      	movs	r2, r3
    1784:	7993      	ldrb	r3, [r2, #6]
    1786:	2b00      	cmp	r3, #0
    1788:	d0fc      	beq.n	1784 <system_clock_init+0x190>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    178a:	b00c      	add	sp, #48	; 0x30
    178c:	bc04      	pop	{r2}
    178e:	4690      	mov	r8, r2
    1790:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1792:	3b20      	subs	r3, #32
    1794:	e787      	b.n	16a6 <system_clock_init+0xb2>
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	40000c00 	.word	0x40000c00
    179c:	40001400 	.word	0x40001400
    17a0:	41004000 	.word	0x41004000
    17a4:	00001405 	.word	0x00001405
    17a8:	00001529 	.word	0x00001529
    17ac:	40001000 	.word	0x40001000
    17b0:	00806020 	.word	0x00806020
    17b4:	000001ff 	.word	0x000001ff
    17b8:	ffffbb80 	.word	0xffffbb80
    17bc:	000014a1 	.word	0x000014a1
    17c0:	000017e1 	.word	0x000017e1
    17c4:	00001805 	.word	0x00001805
    17c8:	000018b1 	.word	0x000018b1
    17cc:	40000400 	.word	0x40000400
    17d0:	000018f1 	.word	0x000018f1
    17d4:	00003881 	.word	0x00003881
    17d8:	005b8d80 	.word	0x005b8d80
    17dc:	00b71b00 	.word	0x00b71b00

000017e0 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    17e0:	4a06      	ldr	r2, [pc, #24]	; (17fc <system_gclk_init+0x1c>)
    17e2:	6953      	ldr	r3, [r2, #20]
    17e4:	2140      	movs	r1, #64	; 0x40
    17e6:	430b      	orrs	r3, r1
    17e8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    17ea:	2201      	movs	r2, #1
    17ec:	4b04      	ldr	r3, [pc, #16]	; (1800 <system_gclk_init+0x20>)
    17ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    17f0:	0019      	movs	r1, r3
    17f2:	780b      	ldrb	r3, [r1, #0]
    17f4:	4213      	tst	r3, r2
    17f6:	d1fc      	bne.n	17f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    17f8:	4770      	bx	lr
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	40000400 	.word	0x40000400
    1800:	40001800 	.word	0x40001800

00001804 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1804:	b570      	push	{r4, r5, r6, lr}
    1806:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1808:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    180a:	784b      	ldrb	r3, [r1, #1]
    180c:	2b00      	cmp	r3, #0
    180e:	d002      	beq.n	1816 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1810:	2380      	movs	r3, #128	; 0x80
    1812:	00db      	lsls	r3, r3, #3
    1814:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1816:	7a4b      	ldrb	r3, [r1, #9]
    1818:	2b00      	cmp	r3, #0
    181a:	d002      	beq.n	1822 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    181c:	2380      	movs	r3, #128	; 0x80
    181e:	011b      	lsls	r3, r3, #4
    1820:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1822:	6848      	ldr	r0, [r1, #4]
    1824:	2801      	cmp	r0, #1
    1826:	d90f      	bls.n	1848 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1828:	1e43      	subs	r3, r0, #1
    182a:	4218      	tst	r0, r3
    182c:	d131      	bne.n	1892 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    182e:	2802      	cmp	r0, #2
    1830:	d92d      	bls.n	188e <system_gclk_gen_set_config+0x8a>
    1832:	2302      	movs	r3, #2
    1834:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1836:	3201      	adds	r2, #1
						mask <<= 1) {
    1838:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    183a:	4298      	cmp	r0, r3
    183c:	d8fb      	bhi.n	1836 <system_gclk_gen_set_config+0x32>
    183e:	2380      	movs	r3, #128	; 0x80
    1840:	015b      	lsls	r3, r3, #5
    1842:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1844:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1846:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1848:	7a0b      	ldrb	r3, [r1, #8]
    184a:	2b00      	cmp	r3, #0
    184c:	d002      	beq.n	1854 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    184e:	2380      	movs	r3, #128	; 0x80
    1850:	019b      	lsls	r3, r3, #6
    1852:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1854:	2604      	movs	r6, #4
    1856:	40a6      	lsls	r6, r4
    1858:	4911      	ldr	r1, [pc, #68]	; (18a0 <system_gclk_gen_set_config+0x9c>)
    185a:	4a12      	ldr	r2, [pc, #72]	; (18a4 <system_gclk_gen_set_config+0xa0>)
    185c:	684b      	ldr	r3, [r1, #4]
    185e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    1860:	421e      	tst	r6, r3
    1862:	d1fb      	bne.n	185c <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    1864:	4b10      	ldr	r3, [pc, #64]	; (18a8 <system_gclk_gen_set_config+0xa4>)
    1866:	4798      	blx	r3
    1868:	00a4      	lsls	r4, r4, #2
    186a:	4b0d      	ldr	r3, [pc, #52]	; (18a0 <system_gclk_gen_set_config+0x9c>)
    186c:	469c      	mov	ip, r3
    186e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1870:	6a22      	ldr	r2, [r4, #32]
    1872:	2380      	movs	r3, #128	; 0x80
    1874:	005b      	lsls	r3, r3, #1
    1876:	401a      	ands	r2, r3
    1878:	432a      	orrs	r2, r5
    187a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    187c:	4661      	mov	r1, ip
    187e:	4a09      	ldr	r2, [pc, #36]	; (18a4 <system_gclk_gen_set_config+0xa0>)
    1880:	684b      	ldr	r3, [r1, #4]
    1882:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    1884:	421e      	tst	r6, r3
    1886:	d1fb      	bne.n	1880 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    1888:	4b08      	ldr	r3, [pc, #32]	; (18ac <system_gclk_gen_set_config+0xa8>)
    188a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    188c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    188e:	2200      	movs	r2, #0
    1890:	e7d5      	b.n	183e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1892:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1894:	2380      	movs	r3, #128	; 0x80
    1896:	009b      	lsls	r3, r3, #2
    1898:	4318      	orrs	r0, r3
    189a:	4305      	orrs	r5, r0
    189c:	e7d4      	b.n	1848 <system_gclk_gen_set_config+0x44>
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	40001800 	.word	0x40001800
    18a4:	000007fc 	.word	0x000007fc
    18a8:	000012fd 	.word	0x000012fd
    18ac:	0000133d 	.word	0x0000133d

000018b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    18b0:	b510      	push	{r4, lr}
    18b2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    18b4:	2204      	movs	r2, #4
    18b6:	4082      	lsls	r2, r0
    18b8:	4809      	ldr	r0, [pc, #36]	; (18e0 <system_gclk_gen_enable+0x30>)
    18ba:	490a      	ldr	r1, [pc, #40]	; (18e4 <system_gclk_gen_enable+0x34>)
    18bc:	6843      	ldr	r3, [r0, #4]
    18be:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    18c0:	421a      	tst	r2, r3
    18c2:	d1fb      	bne.n	18bc <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    18c4:	4b08      	ldr	r3, [pc, #32]	; (18e8 <system_gclk_gen_enable+0x38>)
    18c6:	4798      	blx	r3
    18c8:	00a4      	lsls	r4, r4, #2
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <system_gclk_gen_enable+0x30>)
    18cc:	469c      	mov	ip, r3
    18ce:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    18d0:	6a22      	ldr	r2, [r4, #32]
    18d2:	2380      	movs	r3, #128	; 0x80
    18d4:	005b      	lsls	r3, r3, #1
    18d6:	4313      	orrs	r3, r2
    18d8:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    18da:	4b04      	ldr	r3, [pc, #16]	; (18ec <system_gclk_gen_enable+0x3c>)
    18dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18de:	bd10      	pop	{r4, pc}
    18e0:	40001800 	.word	0x40001800
    18e4:	000007fc 	.word	0x000007fc
    18e8:	000012fd 	.word	0x000012fd
    18ec:	0000133d 	.word	0x0000133d

000018f0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    18f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18f2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    18f4:	2204      	movs	r2, #4
    18f6:	4082      	lsls	r2, r0
    18f8:	4812      	ldr	r0, [pc, #72]	; (1944 <system_gclk_gen_get_hz+0x54>)
    18fa:	4913      	ldr	r1, [pc, #76]	; (1948 <system_gclk_gen_get_hz+0x58>)
    18fc:	6843      	ldr	r3, [r0, #4]
    18fe:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1900:	421a      	tst	r2, r3
    1902:	d1fb      	bne.n	18fc <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    1904:	4b11      	ldr	r3, [pc, #68]	; (194c <system_gclk_gen_get_hz+0x5c>)
    1906:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1908:	4f0e      	ldr	r7, [pc, #56]	; (1944 <system_gclk_gen_get_hz+0x54>)
    190a:	3408      	adds	r4, #8
    190c:	00a4      	lsls	r4, r4, #2
    190e:	59e0      	ldr	r0, [r4, r7]
    1910:	0700      	lsls	r0, r0, #28
    1912:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1914:	4b0e      	ldr	r3, [pc, #56]	; (1950 <system_gclk_gen_get_hz+0x60>)
    1916:	4798      	blx	r3
    1918:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    191a:	59e5      	ldr	r5, [r4, r7]
    191c:	04ed      	lsls	r5, r5, #19
    191e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1920:	59e4      	ldr	r4, [r4, r7]
    1922:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1924:	4b0b      	ldr	r3, [pc, #44]	; (1954 <system_gclk_gen_get_hz+0x64>)
    1926:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1928:	2d00      	cmp	r5, #0
    192a:	d107      	bne.n	193c <system_gclk_gen_get_hz+0x4c>
    192c:	2c01      	cmp	r4, #1
    192e:	d907      	bls.n	1940 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1930:	0021      	movs	r1, r4
    1932:	0030      	movs	r0, r6
    1934:	4b08      	ldr	r3, [pc, #32]	; (1958 <system_gclk_gen_get_hz+0x68>)
    1936:	4798      	blx	r3
    1938:	0006      	movs	r6, r0
    193a:	e001      	b.n	1940 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    193c:	3401      	adds	r4, #1
    193e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1940:	0030      	movs	r0, r6
    1942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1944:	40001800 	.word	0x40001800
    1948:	000007fc 	.word	0x000007fc
    194c:	000012fd 	.word	0x000012fd
    1950:	0000136d 	.word	0x0000136d
    1954:	0000133d 	.word	0x0000133d
    1958:	00003881 	.word	0x00003881

0000195c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    195c:	b510      	push	{r4, lr}
    195e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1960:	4b09      	ldr	r3, [pc, #36]	; (1988 <system_gclk_chan_enable+0x2c>)
    1962:	4798      	blx	r3
    1964:	00a0      	lsls	r0, r4, #2
    1966:	4b09      	ldr	r3, [pc, #36]	; (198c <system_gclk_chan_enable+0x30>)
    1968:	469c      	mov	ip, r3
    196a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    196c:	2280      	movs	r2, #128	; 0x80
    196e:	5883      	ldr	r3, [r0, r2]
    1970:	2140      	movs	r1, #64	; 0x40
    1972:	430b      	orrs	r3, r1
    1974:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1976:	3140      	adds	r1, #64	; 0x40
    1978:	3a40      	subs	r2, #64	; 0x40
    197a:	5843      	ldr	r3, [r0, r1]
    197c:	421a      	tst	r2, r3
    197e:	d0fc      	beq.n	197a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    1980:	4b03      	ldr	r3, [pc, #12]	; (1990 <system_gclk_chan_enable+0x34>)
    1982:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1984:	bd10      	pop	{r4, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000012fd 	.word	0x000012fd
    198c:	40001800 	.word	0x40001800
    1990:	0000133d 	.word	0x0000133d

00001994 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1994:	b510      	push	{r4, lr}
    1996:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1998:	4b09      	ldr	r3, [pc, #36]	; (19c0 <system_gclk_chan_disable+0x2c>)
    199a:	4798      	blx	r3
    199c:	00a0      	lsls	r0, r4, #2
    199e:	4b09      	ldr	r3, [pc, #36]	; (19c4 <system_gclk_chan_disable+0x30>)
    19a0:	469c      	mov	ip, r3
    19a2:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    19a4:	2280      	movs	r2, #128	; 0x80
    19a6:	5883      	ldr	r3, [r0, r2]
    19a8:	2140      	movs	r1, #64	; 0x40
    19aa:	438b      	bics	r3, r1
    19ac:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    19ae:	3140      	adds	r1, #64	; 0x40
    19b0:	3a40      	subs	r2, #64	; 0x40
    19b2:	5843      	ldr	r3, [r0, r1]
    19b4:	421a      	tst	r2, r3
    19b6:	d1fc      	bne.n	19b2 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    19b8:	4b03      	ldr	r3, [pc, #12]	; (19c8 <system_gclk_chan_disable+0x34>)
    19ba:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    19bc:	bd10      	pop	{r4, pc}
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	000012fd 	.word	0x000012fd
    19c4:	40001800 	.word	0x40001800
    19c8:	0000133d 	.word	0x0000133d

000019cc <system_gclk_chan_set_config>:
{
    19cc:	b570      	push	{r4, r5, r6, lr}
    19ce:	0004      	movs	r4, r0
    19d0:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    19d2:	4b05      	ldr	r3, [pc, #20]	; (19e8 <system_gclk_chan_set_config+0x1c>)
    19d4:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    19d6:	782a      	ldrb	r2, [r5, #0]
    19d8:	230f      	movs	r3, #15
    19da:	4013      	ands	r3, r2
    19dc:	3420      	adds	r4, #32
    19de:	00a4      	lsls	r4, r4, #2
    19e0:	4a02      	ldr	r2, [pc, #8]	; (19ec <system_gclk_chan_set_config+0x20>)
    19e2:	50a3      	str	r3, [r4, r2]
}
    19e4:	bd70      	pop	{r4, r5, r6, pc}
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	00001995 	.word	0x00001995
    19ec:	40001800 	.word	0x40001800

000019f0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19f0:	b510      	push	{r4, lr}
    19f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19f4:	4b06      	ldr	r3, [pc, #24]	; (1a10 <system_gclk_chan_get_hz+0x20>)
    19f6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    19f8:	3420      	adds	r4, #32
    19fa:	00a4      	lsls	r4, r4, #2
    19fc:	4b05      	ldr	r3, [pc, #20]	; (1a14 <system_gclk_chan_get_hz+0x24>)
    19fe:	58e4      	ldr	r4, [r4, r3]
    1a00:	0724      	lsls	r4, r4, #28
    1a02:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <system_gclk_chan_get_hz+0x28>)
    1a06:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a08:	0020      	movs	r0, r4
    1a0a:	4b04      	ldr	r3, [pc, #16]	; (1a1c <system_gclk_chan_get_hz+0x2c>)
    1a0c:	4798      	blx	r3
}
    1a0e:	bd10      	pop	{r4, pc}
    1a10:	000012fd 	.word	0x000012fd
    1a14:	40001800 	.word	0x40001800
    1a18:	0000133d 	.word	0x0000133d
    1a1c:	000018f1 	.word	0x000018f1

00001a20 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a20:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a22:	78d3      	ldrb	r3, [r2, #3]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d135      	bne.n	1a94 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a28:	7813      	ldrb	r3, [r2, #0]
    1a2a:	2b80      	cmp	r3, #128	; 0x80
    1a2c:	d029      	beq.n	1a82 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a2e:	061b      	lsls	r3, r3, #24
    1a30:	2480      	movs	r4, #128	; 0x80
    1a32:	0264      	lsls	r4, r4, #9
    1a34:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a36:	7854      	ldrb	r4, [r2, #1]
    1a38:	2502      	movs	r5, #2
    1a3a:	43ac      	bics	r4, r5
    1a3c:	d106      	bne.n	1a4c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a3e:	7894      	ldrb	r4, [r2, #2]
    1a40:	2c00      	cmp	r4, #0
    1a42:	d120      	bne.n	1a86 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a44:	2480      	movs	r4, #128	; 0x80
    1a46:	02a4      	lsls	r4, r4, #10
    1a48:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a4a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a4c:	7854      	ldrb	r4, [r2, #1]
    1a4e:	3c01      	subs	r4, #1
    1a50:	2c01      	cmp	r4, #1
    1a52:	d91c      	bls.n	1a8e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a54:	040d      	lsls	r5, r1, #16
    1a56:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a58:	24a0      	movs	r4, #160	; 0xa0
    1a5a:	05e4      	lsls	r4, r4, #23
    1a5c:	432c      	orrs	r4, r5
    1a5e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a60:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a62:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a64:	24d0      	movs	r4, #208	; 0xd0
    1a66:	0624      	lsls	r4, r4, #24
    1a68:	432c      	orrs	r4, r5
    1a6a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a6c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a6e:	78d4      	ldrb	r4, [r2, #3]
    1a70:	2c00      	cmp	r4, #0
    1a72:	d122      	bne.n	1aba <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a74:	035b      	lsls	r3, r3, #13
    1a76:	d51c      	bpl.n	1ab2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a78:	7893      	ldrb	r3, [r2, #2]
    1a7a:	2b01      	cmp	r3, #1
    1a7c:	d01e      	beq.n	1abc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1a7e:	6141      	str	r1, [r0, #20]
    1a80:	e017      	b.n	1ab2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1a82:	2300      	movs	r3, #0
    1a84:	e7d7      	b.n	1a36 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a86:	24c0      	movs	r4, #192	; 0xc0
    1a88:	02e4      	lsls	r4, r4, #11
    1a8a:	4323      	orrs	r3, r4
    1a8c:	e7dd      	b.n	1a4a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a8e:	4c0d      	ldr	r4, [pc, #52]	; (1ac4 <_system_pinmux_config+0xa4>)
    1a90:	4023      	ands	r3, r4
    1a92:	e7df      	b.n	1a54 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1a94:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a96:	040c      	lsls	r4, r1, #16
    1a98:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a9a:	23a0      	movs	r3, #160	; 0xa0
    1a9c:	05db      	lsls	r3, r3, #23
    1a9e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aa0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1aa2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1aa4:	23d0      	movs	r3, #208	; 0xd0
    1aa6:	061b      	lsls	r3, r3, #24
    1aa8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aaa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1aac:	78d3      	ldrb	r3, [r2, #3]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d103      	bne.n	1aba <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ab2:	7853      	ldrb	r3, [r2, #1]
    1ab4:	3b01      	subs	r3, #1
    1ab6:	2b01      	cmp	r3, #1
    1ab8:	d902      	bls.n	1ac0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1aba:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1abc:	6181      	str	r1, [r0, #24]
    1abe:	e7f8      	b.n	1ab2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1ac0:	6081      	str	r1, [r0, #8]
}
    1ac2:	e7fa      	b.n	1aba <_system_pinmux_config+0x9a>
    1ac4:	fffbffff 	.word	0xfffbffff

00001ac8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ac8:	b510      	push	{r4, lr}
    1aca:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1acc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1ace:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1ad0:	2900      	cmp	r1, #0
    1ad2:	d104      	bne.n	1ade <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1ad4:	0943      	lsrs	r3, r0, #5
    1ad6:	01db      	lsls	r3, r3, #7
    1ad8:	4905      	ldr	r1, [pc, #20]	; (1af0 <system_pinmux_pin_set_config+0x28>)
    1ada:	468c      	mov	ip, r1
    1adc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1ade:	241f      	movs	r4, #31
    1ae0:	4020      	ands	r0, r4
    1ae2:	2101      	movs	r1, #1
    1ae4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1ae6:	0018      	movs	r0, r3
    1ae8:	4b02      	ldr	r3, [pc, #8]	; (1af4 <system_pinmux_pin_set_config+0x2c>)
    1aea:	4798      	blx	r3
}
    1aec:	bd10      	pop	{r4, pc}
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	40002800 	.word	0x40002800
    1af4:	00001a21 	.word	0x00001a21

00001af8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1af8:	4770      	bx	lr
	...

00001afc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1afc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1afe:	4b05      	ldr	r3, [pc, #20]	; (1b14 <system_init+0x18>)
    1b00:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1b02:	4b05      	ldr	r3, [pc, #20]	; (1b18 <system_init+0x1c>)
    1b04:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1b06:	4b05      	ldr	r3, [pc, #20]	; (1b1c <system_init+0x20>)
    1b08:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1b0a:	4b05      	ldr	r3, [pc, #20]	; (1b20 <system_init+0x24>)
    1b0c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b0e:	4b05      	ldr	r3, [pc, #20]	; (1b24 <system_init+0x28>)
    1b10:	4798      	blx	r3
}
    1b12:	bd10      	pop	{r4, pc}
    1b14:	000015f5 	.word	0x000015f5
    1b18:	000012f9 	.word	0x000012f9
    1b1c:	00001af9 	.word	0x00001af9
    1b20:	00001255 	.word	0x00001255
    1b24:	00001af9 	.word	0x00001af9

00001b28 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    1b28:	b510      	push	{r4, lr}
    1b2a:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    1b2c:	ab03      	add	r3, sp, #12
    1b2e:	2200      	movs	r2, #0
    1b30:	701a      	strb	r2, [r3, #0]
    1b32:	3201      	adds	r2, #1
    1b34:	705a      	strb	r2, [r3, #1]
    1b36:	709a      	strb	r2, [r3, #2]
    1b38:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    1b3a:	4b27      	ldr	r3, [pc, #156]	; (1bd8 <udd_sleep_mode+0xb0>)
    1b3c:	781b      	ldrb	r3, [r3, #0]
    1b3e:	4283      	cmp	r3, r0
    1b40:	d007      	beq.n	1b52 <udd_sleep_mode+0x2a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1b42:	2800      	cmp	r0, #0
    1b44:	d107      	bne.n	1b56 <udd_sleep_mode+0x2e>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    1b46:	4b24      	ldr	r3, [pc, #144]	; (1bd8 <udd_sleep_mode+0xb0>)
    1b48:	781b      	ldrb	r3, [r3, #0]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d123      	bne.n	1b96 <udd_sleep_mode+0x6e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    1b4e:	4b22      	ldr	r3, [pc, #136]	; (1bd8 <udd_sleep_mode+0xb0>)
    1b50:	7018      	strb	r0, [r3, #0]
}
    1b52:	b004      	add	sp, #16
    1b54:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    1b56:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1b58:	5c1b      	ldrb	r3, [r3, r0]
    1b5a:	4a20      	ldr	r2, [pc, #128]	; (1bdc <udd_sleep_mode+0xb4>)
    1b5c:	5cd2      	ldrb	r2, [r2, r3]
    1b5e:	2aff      	cmp	r2, #255	; 0xff
    1b60:	d100      	bne.n	1b64 <udd_sleep_mode+0x3c>
    1b62:	e7fe      	b.n	1b62 <udd_sleep_mode+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b64:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1b68:	4251      	negs	r1, r2
    1b6a:	414a      	adcs	r2, r1
    1b6c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1b6e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1b70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b74:	2100      	movs	r1, #0
    1b76:	4a1a      	ldr	r2, [pc, #104]	; (1be0 <udd_sleep_mode+0xb8>)
    1b78:	7011      	strb	r1, [r2, #0]
	return flags;
    1b7a:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1b7c:	4917      	ldr	r1, [pc, #92]	; (1bdc <udd_sleep_mode+0xb4>)
    1b7e:	5cca      	ldrb	r2, [r1, r3]
    1b80:	3201      	adds	r2, #1
    1b82:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1b84:	2c00      	cmp	r4, #0
    1b86:	d0de      	beq.n	1b46 <udd_sleep_mode+0x1e>
		cpu_irq_enable();
    1b88:	2201      	movs	r2, #1
    1b8a:	4b15      	ldr	r3, [pc, #84]	; (1be0 <udd_sleep_mode+0xb8>)
    1b8c:	701a      	strb	r2, [r3, #0]
    1b8e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b92:	b662      	cpsie	i
    1b94:	e7d7      	b.n	1b46 <udd_sleep_mode+0x1e>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    1b96:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1b98:	5cd3      	ldrb	r3, [r2, r3]
    1b9a:	4a10      	ldr	r2, [pc, #64]	; (1bdc <udd_sleep_mode+0xb4>)
    1b9c:	5cd2      	ldrb	r2, [r2, r3]
    1b9e:	2a00      	cmp	r2, #0
    1ba0:	d100      	bne.n	1ba4 <udd_sleep_mode+0x7c>
    1ba2:	e7fe      	b.n	1ba2 <udd_sleep_mode+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1ba4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ba8:	4251      	negs	r1, r2
    1baa:	414a      	adcs	r2, r1
    1bac:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1bae:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1bb0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1bb4:	2100      	movs	r1, #0
    1bb6:	4a0a      	ldr	r2, [pc, #40]	; (1be0 <udd_sleep_mode+0xb8>)
    1bb8:	7011      	strb	r1, [r2, #0]
	return flags;
    1bba:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1bbc:	4907      	ldr	r1, [pc, #28]	; (1bdc <udd_sleep_mode+0xb4>)
    1bbe:	5cca      	ldrb	r2, [r1, r3]
    1bc0:	3a01      	subs	r2, #1
    1bc2:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1bc4:	2c00      	cmp	r4, #0
    1bc6:	d0c2      	beq.n	1b4e <udd_sleep_mode+0x26>
		cpu_irq_enable();
    1bc8:	2201      	movs	r2, #1
    1bca:	4b05      	ldr	r3, [pc, #20]	; (1be0 <udd_sleep_mode+0xb8>)
    1bcc:	701a      	strb	r2, [r3, #0]
    1bce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1bd2:	b662      	cpsie	i
    1bd4:	e7bb      	b.n	1b4e <udd_sleep_mode+0x26>
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	2000018c 	.word	0x2000018c
    1bdc:	20000350 	.word	0x20000350
    1be0:	200000dc 	.word	0x200000dc

00001be4 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    1be4:	0643      	lsls	r3, r0, #25
    1be6:	d00b      	beq.n	1c00 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1be8:	230f      	movs	r3, #15
    1bea:	4003      	ands	r3, r0
    1bec:	005b      	lsls	r3, r3, #1
    1bee:	09c0      	lsrs	r0, r0, #7
    1bf0:	1818      	adds	r0, r3, r0
    1bf2:	3802      	subs	r0, #2
    1bf4:	0083      	lsls	r3, r0, #2
    1bf6:	1818      	adds	r0, r3, r0
    1bf8:	0080      	lsls	r0, r0, #2
    1bfa:	4b02      	ldr	r3, [pc, #8]	; (1c04 <udd_ep_get_job+0x20>)
    1bfc:	1818      	adds	r0, r3, r0
	}
}
    1bfe:	4770      	bx	lr
		return NULL;
    1c00:	2000      	movs	r0, #0
    1c02:	e7fc      	b.n	1bfe <udd_ep_get_job+0x1a>
    1c04:	20000164 	.word	0x20000164

00001c08 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    1c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0a:	46d6      	mov	lr, sl
    1c0c:	464f      	mov	r7, r9
    1c0e:	4646      	mov	r6, r8
    1c10:	b5c0      	push	{r6, r7, lr}
    1c12:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1c14:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    1c16:	b26b      	sxtb	r3, r5
    1c18:	2b00      	cmp	r3, #0
    1c1a:	db26      	blt.n	1c6a <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    1c1c:	0028      	movs	r0, r5
    1c1e:	4b5e      	ldr	r3, [pc, #376]	; (1d98 <udd_ep_transfer_process+0x190>)
    1c20:	4798      	blx	r3
    1c22:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1c24:	270f      	movs	r7, #15
    1c26:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1c28:	8a03      	ldrh	r3, [r0, #16]
    1c2a:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    1c2c:	464b      	mov	r3, r9
    1c2e:	881b      	ldrh	r3, [r3, #0]
    1c30:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    1c32:	7c83      	ldrb	r3, [r0, #18]
    1c34:	075b      	lsls	r3, r3, #29
    1c36:	d46a      	bmi.n	1d0e <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    1c38:	68e3      	ldr	r3, [r4, #12]
    1c3a:	4453      	add	r3, sl
    1c3c:	001e      	movs	r6, r3
    1c3e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1c40:	68a3      	ldr	r3, [r4, #8]
    1c42:	429e      	cmp	r6, r3
    1c44:	d800      	bhi.n	1c48 <udd_ep_transfer_process+0x40>
    1c46:	e074      	b.n	1d32 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    1c48:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    1c4a:	7ca3      	ldrb	r3, [r4, #18]
    1c4c:	2201      	movs	r2, #1
    1c4e:	4393      	bics	r3, r2
    1c50:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1c52:	6823      	ldr	r3, [r4, #0]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d003      	beq.n	1c60 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1c58:	68e1      	ldr	r1, [r4, #12]
    1c5a:	002a      	movs	r2, r5
    1c5c:	2000      	movs	r0, #0
    1c5e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1c60:	bc1c      	pop	{r2, r3, r4}
    1c62:	4690      	mov	r8, r2
    1c64:	4699      	mov	r9, r3
    1c66:	46a2      	mov	sl, r4
    1c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    1c6a:	0028      	movs	r0, r5
    1c6c:	4b4a      	ldr	r3, [pc, #296]	; (1d98 <udd_ep_transfer_process+0x190>)
    1c6e:	4798      	blx	r3
    1c70:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1c72:	270f      	movs	r7, #15
    1c74:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1c76:	8a03      	ldrh	r3, [r0, #16]
    1c78:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    1c7a:	464b      	mov	r3, r9
    1c7c:	885e      	ldrh	r6, [r3, #2]
    1c7e:	68c3      	ldr	r3, [r0, #12]
    1c80:	469c      	mov	ip, r3
    1c82:	4466      	add	r6, ip
    1c84:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1c86:	6881      	ldr	r1, [r0, #8]
    1c88:	428e      	cmp	r6, r1
    1c8a:	d025      	beq.n	1cd8 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1c8c:	1b8d      	subs	r5, r1, r6
    1c8e:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1c90:	4b42      	ldr	r3, [pc, #264]	; (1d9c <udd_ep_transfer_process+0x194>)
    1c92:	429d      	cmp	r5, r3
    1c94:	d906      	bls.n	1ca4 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1c96:	001d      	movs	r5, r3
    1c98:	4641      	mov	r1, r8
    1c9a:	0018      	movs	r0, r3
    1c9c:	4b40      	ldr	r3, [pc, #256]	; (1da0 <udd_ep_transfer_process+0x198>)
    1c9e:	4798      	blx	r3
    1ca0:	1a6d      	subs	r5, r5, r1
    1ca2:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1ca4:	7ca2      	ldrb	r2, [r4, #18]
    1ca6:	2300      	movs	r3, #0
    1ca8:	0792      	lsls	r2, r2, #30
    1caa:	d507      	bpl.n	1cbc <udd_ep_transfer_process+0xb4>
    1cac:	4641      	mov	r1, r8
    1cae:	0028      	movs	r0, r5
    1cb0:	4b3c      	ldr	r3, [pc, #240]	; (1da4 <udd_ep_transfer_process+0x19c>)
    1cb2:	4798      	blx	r3
    1cb4:	b289      	uxth	r1, r1
    1cb6:	424b      	negs	r3, r1
    1cb8:	414b      	adcs	r3, r1
    1cba:	b2db      	uxtb	r3, r3
    1cbc:	005b      	lsls	r3, r3, #1
    1cbe:	7ca2      	ldrb	r2, [r4, #18]
    1cc0:	2102      	movs	r1, #2
    1cc2:	438a      	bics	r2, r1
    1cc4:	4313      	orrs	r3, r2
    1cc6:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1cc8:	6862      	ldr	r2, [r4, #4]
    1cca:	1992      	adds	r2, r2, r6
    1ccc:	002b      	movs	r3, r5
    1cce:	0039      	movs	r1, r7
    1cd0:	4835      	ldr	r0, [pc, #212]	; (1da8 <udd_ep_transfer_process+0x1a0>)
    1cd2:	4c36      	ldr	r4, [pc, #216]	; (1dac <udd_ep_transfer_process+0x1a4>)
    1cd4:	47a0      	blx	r4
    1cd6:	e7c3      	b.n	1c60 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    1cd8:	7c83      	ldrb	r3, [r0, #18]
    1cda:	079b      	lsls	r3, r3, #30
    1cdc:	d40b      	bmi.n	1cf6 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    1cde:	7c83      	ldrb	r3, [r0, #18]
    1ce0:	2201      	movs	r2, #1
    1ce2:	4393      	bics	r3, r2
    1ce4:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1ce6:	6803      	ldr	r3, [r0, #0]
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d0b9      	beq.n	1c60 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1cec:	002a      	movs	r2, r5
    1cee:	0031      	movs	r1, r6
    1cf0:	2000      	movs	r0, #0
    1cf2:	4798      	blx	r3
    1cf4:	e7b4      	b.n	1c60 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    1cf6:	7c83      	ldrb	r3, [r0, #18]
    1cf8:	2202      	movs	r2, #2
    1cfa:	4393      	bics	r3, r2
    1cfc:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1cfe:	6842      	ldr	r2, [r0, #4]
    1d00:	1992      	adds	r2, r2, r6
    1d02:	2300      	movs	r3, #0
    1d04:	0039      	movs	r1, r7
    1d06:	4828      	ldr	r0, [pc, #160]	; (1da8 <udd_ep_transfer_process+0x1a0>)
    1d08:	4c28      	ldr	r4, [pc, #160]	; (1dac <udd_ep_transfer_process+0x1a4>)
    1d0a:	47a0      	blx	r4
    1d0c:	e7a8      	b.n	1c60 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1d0e:	6843      	ldr	r3, [r0, #4]
    1d10:	68c2      	ldr	r2, [r0, #12]
    1d12:	4694      	mov	ip, r2
    1d14:	4463      	add	r3, ip
    1d16:	001e      	movs	r6, r3
    1d18:	4641      	mov	r1, r8
    1d1a:	6880      	ldr	r0, [r0, #8]
    1d1c:	4b21      	ldr	r3, [pc, #132]	; (1da4 <udd_ep_transfer_process+0x19c>)
    1d1e:	4798      	blx	r3
    1d20:	000a      	movs	r2, r1
    1d22:	1e7b      	subs	r3, r7, #1
    1d24:	019b      	lsls	r3, r3, #6
    1d26:	4922      	ldr	r1, [pc, #136]	; (1db0 <udd_ep_transfer_process+0x1a8>)
    1d28:	1859      	adds	r1, r3, r1
    1d2a:	0030      	movs	r0, r6
    1d2c:	4b21      	ldr	r3, [pc, #132]	; (1db4 <udd_ep_transfer_process+0x1ac>)
    1d2e:	4798      	blx	r3
    1d30:	e782      	b.n	1c38 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1d32:	464a      	mov	r2, r9
    1d34:	8892      	ldrh	r2, [r2, #4]
    1d36:	4552      	cmp	r2, sl
    1d38:	d000      	beq.n	1d3c <udd_ep_transfer_process+0x134>
    1d3a:	e786      	b.n	1c4a <udd_ep_transfer_process+0x42>
    1d3c:	429e      	cmp	r6, r3
    1d3e:	d100      	bne.n	1d42 <udd_ep_transfer_process+0x13a>
    1d40:	e783      	b.n	1c4a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1d42:	1b9b      	subs	r3, r3, r6
    1d44:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1d46:	4b15      	ldr	r3, [pc, #84]	; (1d9c <udd_ep_transfer_process+0x194>)
    1d48:	429d      	cmp	r5, r3
    1d4a:	d916      	bls.n	1d7a <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1d4c:	001d      	movs	r5, r3
    1d4e:	4641      	mov	r1, r8
    1d50:	0018      	movs	r0, r3
    1d52:	4b13      	ldr	r3, [pc, #76]	; (1da0 <udd_ep_transfer_process+0x198>)
    1d54:	4798      	blx	r3
    1d56:	1a6b      	subs	r3, r5, r1
    1d58:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    1d5a:	4598      	cmp	r8, r3
    1d5c:	d914      	bls.n	1d88 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    1d5e:	7ca3      	ldrb	r3, [r4, #18]
    1d60:	2204      	movs	r2, #4
    1d62:	4313      	orrs	r3, r2
    1d64:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1d66:	1e7a      	subs	r2, r7, #1
    1d68:	0192      	lsls	r2, r2, #6
    1d6a:	4b11      	ldr	r3, [pc, #68]	; (1db0 <udd_ep_transfer_process+0x1a8>)
    1d6c:	18d2      	adds	r2, r2, r3
    1d6e:	4643      	mov	r3, r8
    1d70:	0039      	movs	r1, r7
    1d72:	480d      	ldr	r0, [pc, #52]	; (1da8 <udd_ep_transfer_process+0x1a0>)
    1d74:	4c10      	ldr	r4, [pc, #64]	; (1db8 <udd_ep_transfer_process+0x1b0>)
    1d76:	47a0      	blx	r4
    1d78:	e772      	b.n	1c60 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    1d7a:	4641      	mov	r1, r8
    1d7c:	0028      	movs	r0, r5
    1d7e:	4b09      	ldr	r3, [pc, #36]	; (1da4 <udd_ep_transfer_process+0x19c>)
    1d80:	4798      	blx	r3
    1d82:	1a6b      	subs	r3, r5, r1
    1d84:	b29b      	uxth	r3, r3
    1d86:	e7e8      	b.n	1d5a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1d88:	6862      	ldr	r2, [r4, #4]
    1d8a:	1992      	adds	r2, r2, r6
    1d8c:	0039      	movs	r1, r7
    1d8e:	4806      	ldr	r0, [pc, #24]	; (1da8 <udd_ep_transfer_process+0x1a0>)
    1d90:	4c09      	ldr	r4, [pc, #36]	; (1db8 <udd_ep_transfer_process+0x1b0>)
    1d92:	47a0      	blx	r4
    1d94:	e764      	b.n	1c60 <udd_ep_transfer_process+0x58>
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	00001be5 	.word	0x00001be5
    1d9c:	00001fff 	.word	0x00001fff
    1da0:	00003b61 	.word	0x00003b61
    1da4:	0000398d 	.word	0x0000398d
    1da8:	200003d8 	.word	0x200003d8
    1dac:	00002d89 	.word	0x00002d89
    1db0:	20000398 	.word	0x20000398
    1db4:	00003bf5 	.word	0x00003bf5
    1db8:	00002ddd 	.word	0x00002ddd

00001dbc <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1dbc:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1dbe:	2205      	movs	r2, #5
    1dc0:	4b05      	ldr	r3, [pc, #20]	; (1dd8 <udd_ctrl_stall_data+0x1c>)
    1dc2:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1dc4:	4c05      	ldr	r4, [pc, #20]	; (1ddc <udd_ctrl_stall_data+0x20>)
    1dc6:	2180      	movs	r1, #128	; 0x80
    1dc8:	0020      	movs	r0, r4
    1dca:	4b05      	ldr	r3, [pc, #20]	; (1de0 <udd_ctrl_stall_data+0x24>)
    1dcc:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    1dce:	2100      	movs	r1, #0
    1dd0:	0020      	movs	r0, r4
    1dd2:	4b04      	ldr	r3, [pc, #16]	; (1de4 <udd_ctrl_stall_data+0x28>)
    1dd4:	4798      	blx	r3
}
    1dd6:	bd10      	pop	{r4, pc}
    1dd8:	20000162 	.word	0x20000162
    1ddc:	200003d8 	.word	0x200003d8
    1de0:	00002cdd 	.word	0x00002cdd
    1de4:	00002d03 	.word	0x00002d03

00001de8 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    1de8:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1dea:	4c08      	ldr	r4, [pc, #32]	; (1e0c <_usb_device_lpm_suspend+0x24>)
    1dec:	2106      	movs	r1, #6
    1dee:	0020      	movs	r0, r4
    1df0:	4d07      	ldr	r5, [pc, #28]	; (1e10 <_usb_device_lpm_suspend+0x28>)
    1df2:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1df4:	2104      	movs	r1, #4
    1df6:	0020      	movs	r0, r4
    1df8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1dfa:	2102      	movs	r1, #2
    1dfc:	0020      	movs	r0, r4
    1dfe:	4b05      	ldr	r3, [pc, #20]	; (1e14 <_usb_device_lpm_suspend+0x2c>)
    1e00:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    1e02:	2002      	movs	r0, #2
    1e04:	4b04      	ldr	r3, [pc, #16]	; (1e18 <_usb_device_lpm_suspend+0x30>)
    1e06:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    1e08:	bd70      	pop	{r4, r5, r6, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	200003d8 	.word	0x200003d8
    1e10:	0000281d 	.word	0x0000281d
    1e14:	000027fd 	.word	0x000027fd
    1e18:	00001b29 	.word	0x00001b29

00001e1c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1e1c:	b570      	push	{r4, r5, r6, lr}
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    1e1e:	4b13      	ldr	r3, [pc, #76]	; (1e6c <_usb_on_wakeup+0x50>)
    1e20:	8b1b      	ldrh	r3, [r3, #24]
    1e22:	069b      	lsls	r3, r3, #26
    1e24:	d41b      	bmi.n	1e5e <_usb_on_wakeup+0x42>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1e26:	4911      	ldr	r1, [pc, #68]	; (1e6c <_usb_on_wakeup+0x50>)
    1e28:	22d0      	movs	r2, #208	; 0xd0
    1e2a:	0112      	lsls	r2, r2, #4
    1e2c:	68cb      	ldr	r3, [r1, #12]
    1e2e:	4013      	ands	r3, r2
    1e30:	4293      	cmp	r3, r2
    1e32:	d1fb      	bne.n	1e2c <_usb_on_wakeup+0x10>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1e34:	4c0e      	ldr	r4, [pc, #56]	; (1e70 <_usb_on_wakeup+0x54>)
    1e36:	2102      	movs	r1, #2
    1e38:	0020      	movs	r0, r4
    1e3a:	4b0e      	ldr	r3, [pc, #56]	; (1e74 <_usb_on_wakeup+0x58>)
    1e3c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1e3e:	2104      	movs	r1, #4
    1e40:	0020      	movs	r0, r4
    1e42:	4d0d      	ldr	r5, [pc, #52]	; (1e78 <_usb_on_wakeup+0x5c>)
    1e44:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1e46:	4a0d      	ldr	r2, [pc, #52]	; (1e7c <_usb_on_wakeup+0x60>)
    1e48:	2106      	movs	r1, #6
    1e4a:	0020      	movs	r0, r4
    1e4c:	4b0c      	ldr	r3, [pc, #48]	; (1e80 <_usb_on_wakeup+0x64>)
    1e4e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1e50:	2106      	movs	r1, #6
    1e52:	0020      	movs	r0, r4
    1e54:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    1e56:	2003      	movs	r0, #3
    1e58:	4b0a      	ldr	r3, [pc, #40]	; (1e84 <_usb_on_wakeup+0x68>)
    1e5a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    1e5c:	bd70      	pop	{r4, r5, r6, pc}
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    1e5e:	4903      	ldr	r1, [pc, #12]	; (1e6c <_usb_on_wakeup+0x50>)
    1e60:	2280      	movs	r2, #128	; 0x80
    1e62:	0052      	lsls	r2, r2, #1
    1e64:	68cb      	ldr	r3, [r1, #12]
    1e66:	4213      	tst	r3, r2
    1e68:	d0fc      	beq.n	1e64 <_usb_on_wakeup+0x48>
    1e6a:	e7e3      	b.n	1e34 <_usb_on_wakeup+0x18>
    1e6c:	40000c00 	.word	0x40000c00
    1e70:	200003d8 	.word	0x200003d8
    1e74:	0000281d 	.word	0x0000281d
    1e78:	000027fd 	.word	0x000027fd
    1e7c:	00001de9 	.word	0x00001de9
    1e80:	000027d9 	.word	0x000027d9
    1e84:	00001b29 	.word	0x00001b29

00001e88 <_usb_on_suspend>:
{
    1e88:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1e8a:	4c06      	ldr	r4, [pc, #24]	; (1ea4 <_usb_on_suspend+0x1c>)
    1e8c:	2104      	movs	r1, #4
    1e8e:	0020      	movs	r0, r4
    1e90:	4b05      	ldr	r3, [pc, #20]	; (1ea8 <_usb_on_suspend+0x20>)
    1e92:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1e94:	2102      	movs	r1, #2
    1e96:	0020      	movs	r0, r4
    1e98:	4b04      	ldr	r3, [pc, #16]	; (1eac <_usb_on_suspend+0x24>)
    1e9a:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1e9c:	2001      	movs	r0, #1
    1e9e:	4b04      	ldr	r3, [pc, #16]	; (1eb0 <_usb_on_suspend+0x28>)
    1ea0:	4798      	blx	r3
}
    1ea2:	bd10      	pop	{r4, pc}
    1ea4:	200003d8 	.word	0x200003d8
    1ea8:	0000281d 	.word	0x0000281d
    1eac:	000027fd 	.word	0x000027fd
    1eb0:	00001b29 	.word	0x00001b29

00001eb4 <_usb_on_bus_reset>:
{
    1eb4:	b570      	push	{r4, r5, r6, lr}
    1eb6:	b082      	sub	sp, #8
    1eb8:	0004      	movs	r4, r0
	udc_reset();
    1eba:	4b1e      	ldr	r3, [pc, #120]	; (1f34 <_usb_on_bus_reset+0x80>)
    1ebc:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1ebe:	2380      	movs	r3, #128	; 0x80
    1ec0:	6822      	ldr	r2, [r4, #0]
    1ec2:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1ec4:	ad01      	add	r5, sp, #4
    1ec6:	0028      	movs	r0, r5
    1ec8:	4b1b      	ldr	r3, [pc, #108]	; (1f38 <_usb_on_bus_reset+0x84>)
    1eca:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1ecc:	2600      	movs	r6, #0
    1ece:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1ed0:	0029      	movs	r1, r5
    1ed2:	0020      	movs	r0, r4
    1ed4:	4b19      	ldr	r3, [pc, #100]	; (1f3c <_usb_on_bus_reset+0x88>)
    1ed6:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1ed8:	4919      	ldr	r1, [pc, #100]	; (1f40 <_usb_on_bus_reset+0x8c>)
    1eda:	0020      	movs	r0, r4
    1edc:	4b19      	ldr	r3, [pc, #100]	; (1f44 <_usb_on_bus_reset+0x90>)
    1ede:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1ee0:	4b19      	ldr	r3, [pc, #100]	; (1f48 <_usb_on_bus_reset+0x94>)
    1ee2:	2202      	movs	r2, #2
    1ee4:	2100      	movs	r1, #0
    1ee6:	0020      	movs	r0, r4
    1ee8:	4d18      	ldr	r5, [pc, #96]	; (1f4c <_usb_on_bus_reset+0x98>)
    1eea:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1eec:	4b18      	ldr	r3, [pc, #96]	; (1f50 <_usb_on_bus_reset+0x9c>)
    1eee:	2200      	movs	r2, #0
    1ef0:	2100      	movs	r1, #0
    1ef2:	0020      	movs	r0, r4
    1ef4:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1ef6:	4b17      	ldr	r3, [pc, #92]	; (1f54 <_usb_on_bus_reset+0xa0>)
    1ef8:	2201      	movs	r2, #1
    1efa:	2100      	movs	r1, #0
    1efc:	0020      	movs	r0, r4
    1efe:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1f00:	2202      	movs	r2, #2
    1f02:	2100      	movs	r1, #0
    1f04:	0020      	movs	r0, r4
    1f06:	4d14      	ldr	r5, [pc, #80]	; (1f58 <_usb_on_bus_reset+0xa4>)
    1f08:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1f0a:	2200      	movs	r2, #0
    1f0c:	2100      	movs	r1, #0
    1f0e:	0020      	movs	r0, r4
    1f10:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1f12:	2201      	movs	r2, #1
    1f14:	2100      	movs	r1, #0
    1f16:	0020      	movs	r0, r4
    1f18:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1f1a:	6821      	ldr	r1, [r4, #0]
    1f1c:	890b      	ldrh	r3, [r1, #8]
    1f1e:	4a0f      	ldr	r2, [pc, #60]	; (1f5c <_usb_on_bus_reset+0xa8>)
    1f20:	401a      	ands	r2, r3
    1f22:	2380      	movs	r3, #128	; 0x80
    1f24:	00db      	lsls	r3, r3, #3
    1f26:	4313      	orrs	r3, r2
    1f28:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1f2a:	4b0d      	ldr	r3, [pc, #52]	; (1f60 <_usb_on_bus_reset+0xac>)
    1f2c:	701e      	strb	r6, [r3, #0]
}
    1f2e:	b002      	add	sp, #8
    1f30:	bd70      	pop	{r4, r5, r6, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	00000d0d 	.word	0x00000d0d
    1f38:	00002a29 	.word	0x00002a29
    1f3c:	00002a39 	.word	0x00002a39
    1f40:	20000558 	.word	0x20000558
    1f44:	00002e2d 	.word	0x00002e2d
    1f48:	0000209d 	.word	0x0000209d
    1f4c:	00002839 	.word	0x00002839
    1f50:	0000236d 	.word	0x0000236d
    1f54:	00001fa1 	.word	0x00001fa1
    1f58:	00002889 	.word	0x00002889
    1f5c:	fffff3ff 	.word	0xfffff3ff
    1f60:	20000162 	.word	0x20000162

00001f64 <udd_ctrl_send_zlp_in>:
{
    1f64:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1f66:	2203      	movs	r2, #3
    1f68:	4b07      	ldr	r3, [pc, #28]	; (1f88 <udd_ctrl_send_zlp_in+0x24>)
    1f6a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1f6c:	4c07      	ldr	r4, [pc, #28]	; (1f8c <udd_ctrl_send_zlp_in+0x28>)
    1f6e:	4908      	ldr	r1, [pc, #32]	; (1f90 <udd_ctrl_send_zlp_in+0x2c>)
    1f70:	0020      	movs	r0, r4
    1f72:	4b08      	ldr	r3, [pc, #32]	; (1f94 <udd_ctrl_send_zlp_in+0x30>)
    1f74:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1f76:	4b08      	ldr	r3, [pc, #32]	; (1f98 <udd_ctrl_send_zlp_in+0x34>)
    1f78:	689a      	ldr	r2, [r3, #8]
    1f7a:	2300      	movs	r3, #0
    1f7c:	2100      	movs	r1, #0
    1f7e:	0020      	movs	r0, r4
    1f80:	4c06      	ldr	r4, [pc, #24]	; (1f9c <udd_ctrl_send_zlp_in+0x38>)
    1f82:	47a0      	blx	r4
}
    1f84:	bd10      	pop	{r4, pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	20000162 	.word	0x20000162
    1f8c:	200003d8 	.word	0x200003d8
    1f90:	20000558 	.word	0x20000558
    1f94:	00002e2d 	.word	0x00002e2d
    1f98:	20000540 	.word	0x20000540
    1f9c:	00002d89 	.word	0x00002d89

00001fa0 <_usb_ep0_on_tansfer_fail>:
{
    1fa0:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1fa2:	7989      	ldrb	r1, [r1, #6]
    1fa4:	b24b      	sxtb	r3, r1
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	db06      	blt.n	1fb8 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1faa:	4b0e      	ldr	r3, [pc, #56]	; (1fe4 <_usb_ep0_on_tansfer_fail+0x44>)
    1fac:	781b      	ldrb	r3, [r3, #0]
    1fae:	2b02      	cmp	r3, #2
    1fb0:	d00f      	beq.n	1fd2 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1fb2:	2b03      	cmp	r3, #3
    1fb4:	d011      	beq.n	1fda <_usb_ep0_on_tansfer_fail+0x3a>
}
    1fb6:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <_usb_ep0_on_tansfer_fail+0x44>)
    1fba:	781b      	ldrb	r3, [r3, #0]
    1fbc:	2b01      	cmp	r3, #1
    1fbe:	d005      	beq.n	1fcc <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1fc0:	2b04      	cmp	r3, #4
    1fc2:	d1f8      	bne.n	1fb6 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1fc4:	4808      	ldr	r0, [pc, #32]	; (1fe8 <_usb_ep0_on_tansfer_fail+0x48>)
    1fc6:	4b09      	ldr	r3, [pc, #36]	; (1fec <_usb_ep0_on_tansfer_fail+0x4c>)
    1fc8:	4798      	blx	r3
    1fca:	e7f4      	b.n	1fb6 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1fcc:	4b08      	ldr	r3, [pc, #32]	; (1ff0 <_usb_ep0_on_tansfer_fail+0x50>)
    1fce:	4798      	blx	r3
    1fd0:	e7f1      	b.n	1fb6 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1fd2:	2204      	movs	r2, #4
    1fd4:	4b03      	ldr	r3, [pc, #12]	; (1fe4 <_usb_ep0_on_tansfer_fail+0x44>)
    1fd6:	701a      	strb	r2, [r3, #0]
    1fd8:	e7ed      	b.n	1fb6 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1fda:	4803      	ldr	r0, [pc, #12]	; (1fe8 <_usb_ep0_on_tansfer_fail+0x48>)
    1fdc:	4b03      	ldr	r3, [pc, #12]	; (1fec <_usb_ep0_on_tansfer_fail+0x4c>)
    1fde:	4798      	blx	r3
}
    1fe0:	e7e9      	b.n	1fb6 <_usb_ep0_on_tansfer_fail+0x16>
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	20000162 	.word	0x20000162
    1fe8:	200003d8 	.word	0x200003d8
    1fec:	00002cdd 	.word	0x00002cdd
    1ff0:	00001f65 	.word	0x00001f65

00001ff4 <udd_ctrl_in_sent>:
{
    1ff4:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1ff6:	4b20      	ldr	r3, [pc, #128]	; (2078 <udd_ctrl_in_sent+0x84>)
    1ff8:	881b      	ldrh	r3, [r3, #0]
    1ffa:	4a20      	ldr	r2, [pc, #128]	; (207c <udd_ctrl_in_sent+0x88>)
    1ffc:	8994      	ldrh	r4, [r2, #12]
    1ffe:	1ae4      	subs	r4, r4, r3
    2000:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2002:	2c00      	cmp	r4, #0
    2004:	d118      	bne.n	2038 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2006:	4a1e      	ldr	r2, [pc, #120]	; (2080 <udd_ctrl_in_sent+0x8c>)
    2008:	8811      	ldrh	r1, [r2, #0]
    200a:	185b      	adds	r3, r3, r1
    200c:	b29b      	uxth	r3, r3
    200e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2010:	4a1a      	ldr	r2, [pc, #104]	; (207c <udd_ctrl_in_sent+0x88>)
    2012:	88d2      	ldrh	r2, [r2, #6]
    2014:	429a      	cmp	r2, r3
    2016:	d023      	beq.n	2060 <udd_ctrl_in_sent+0x6c>
    2018:	4b1a      	ldr	r3, [pc, #104]	; (2084 <udd_ctrl_in_sent+0x90>)
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	2b00      	cmp	r3, #0
    201e:	d11f      	bne.n	2060 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2020:	4b16      	ldr	r3, [pc, #88]	; (207c <udd_ctrl_in_sent+0x88>)
    2022:	695b      	ldr	r3, [r3, #20]
    2024:	2b00      	cmp	r3, #0
    2026:	d023      	beq.n	2070 <udd_ctrl_in_sent+0x7c>
    2028:	4798      	blx	r3
    202a:	2800      	cmp	r0, #0
    202c:	d020      	beq.n	2070 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    202e:	2200      	movs	r2, #0
    2030:	4b11      	ldr	r3, [pc, #68]	; (2078 <udd_ctrl_in_sent+0x84>)
    2032:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2034:	4b11      	ldr	r3, [pc, #68]	; (207c <udd_ctrl_in_sent+0x88>)
    2036:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2038:	2c07      	cmp	r4, #7
    203a:	d919      	bls.n	2070 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    203c:	2200      	movs	r2, #0
    203e:	4b11      	ldr	r3, [pc, #68]	; (2084 <udd_ctrl_in_sent+0x90>)
    2040:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2042:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2044:	4d0c      	ldr	r5, [pc, #48]	; (2078 <udd_ctrl_in_sent+0x84>)
    2046:	882b      	ldrh	r3, [r5, #0]
    2048:	4a0c      	ldr	r2, [pc, #48]	; (207c <udd_ctrl_in_sent+0x88>)
    204a:	6892      	ldr	r2, [r2, #8]
    204c:	18d2      	adds	r2, r2, r3
    204e:	0023      	movs	r3, r4
    2050:	2100      	movs	r1, #0
    2052:	480d      	ldr	r0, [pc, #52]	; (2088 <udd_ctrl_in_sent+0x94>)
    2054:	4e0d      	ldr	r6, [pc, #52]	; (208c <udd_ctrl_in_sent+0x98>)
    2056:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2058:	882b      	ldrh	r3, [r5, #0]
    205a:	18e4      	adds	r4, r4, r3
    205c:	802c      	strh	r4, [r5, #0]
}
    205e:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2060:	2204      	movs	r2, #4
    2062:	4b0b      	ldr	r3, [pc, #44]	; (2090 <udd_ctrl_in_sent+0x9c>)
    2064:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2066:	490b      	ldr	r1, [pc, #44]	; (2094 <udd_ctrl_in_sent+0xa0>)
    2068:	4807      	ldr	r0, [pc, #28]	; (2088 <udd_ctrl_in_sent+0x94>)
    206a:	4b0b      	ldr	r3, [pc, #44]	; (2098 <udd_ctrl_in_sent+0xa4>)
    206c:	4798      	blx	r3
			return;
    206e:	e7f6      	b.n	205e <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2070:	2201      	movs	r2, #1
    2072:	4b04      	ldr	r3, [pc, #16]	; (2084 <udd_ctrl_in_sent+0x90>)
    2074:	701a      	strb	r2, [r3, #0]
    2076:	e7e5      	b.n	2044 <udd_ctrl_in_sent+0x50>
    2078:	2000015e 	.word	0x2000015e
    207c:	20000540 	.word	0x20000540
    2080:	20000160 	.word	0x20000160
    2084:	2000015c 	.word	0x2000015c
    2088:	200003d8 	.word	0x200003d8
    208c:	00002d89 	.word	0x00002d89
    2090:	20000162 	.word	0x20000162
    2094:	20000558 	.word	0x20000558
    2098:	00002e2d 	.word	0x00002e2d

0000209c <_usb_ep0_on_setup>:
{
    209c:	b510      	push	{r4, lr}
    209e:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    20a0:	4b2c      	ldr	r3, [pc, #176]	; (2154 <_usb_ep0_on_setup+0xb8>)
    20a2:	781b      	ldrb	r3, [r3, #0]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d007      	beq.n	20b8 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    20a8:	4b2b      	ldr	r3, [pc, #172]	; (2158 <_usb_ep0_on_setup+0xbc>)
    20aa:	691b      	ldr	r3, [r3, #16]
    20ac:	2b00      	cmp	r3, #0
    20ae:	d000      	beq.n	20b2 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    20b0:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    20b2:	2200      	movs	r2, #0
    20b4:	4b27      	ldr	r3, [pc, #156]	; (2154 <_usb_ep0_on_setup+0xb8>)
    20b6:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    20b8:	8823      	ldrh	r3, [r4, #0]
    20ba:	2b08      	cmp	r3, #8
    20bc:	d002      	beq.n	20c4 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    20be:	4b27      	ldr	r3, [pc, #156]	; (215c <_usb_ep0_on_setup+0xc0>)
    20c0:	4798      	blx	r3
}
    20c2:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    20c4:	4a24      	ldr	r2, [pc, #144]	; (2158 <_usb_ep0_on_setup+0xbc>)
    20c6:	4b26      	ldr	r3, [pc, #152]	; (2160 <_usb_ep0_on_setup+0xc4>)
    20c8:	7819      	ldrb	r1, [r3, #0]
    20ca:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    20cc:	7859      	ldrb	r1, [r3, #1]
    20ce:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    20d0:	78d8      	ldrb	r0, [r3, #3]
    20d2:	0200      	lsls	r0, r0, #8
    20d4:	7899      	ldrb	r1, [r3, #2]
    20d6:	1809      	adds	r1, r1, r0
    20d8:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    20da:	7958      	ldrb	r0, [r3, #5]
    20dc:	0200      	lsls	r0, r0, #8
    20de:	7919      	ldrb	r1, [r3, #4]
    20e0:	1809      	adds	r1, r1, r0
    20e2:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    20e4:	79d9      	ldrb	r1, [r3, #7]
    20e6:	0209      	lsls	r1, r1, #8
    20e8:	799b      	ldrb	r3, [r3, #6]
    20ea:	185b      	adds	r3, r3, r1
    20ec:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    20ee:	4b1d      	ldr	r3, [pc, #116]	; (2164 <_usb_ep0_on_setup+0xc8>)
    20f0:	4798      	blx	r3
    20f2:	2800      	cmp	r0, #0
    20f4:	d016      	beq.n	2124 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    20f6:	4b18      	ldr	r3, [pc, #96]	; (2158 <_usb_ep0_on_setup+0xbc>)
    20f8:	781b      	ldrb	r3, [r3, #0]
    20fa:	2b7f      	cmp	r3, #127	; 0x7f
    20fc:	d815      	bhi.n	212a <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    20fe:	4b16      	ldr	r3, [pc, #88]	; (2158 <_usb_ep0_on_setup+0xbc>)
    2100:	88db      	ldrh	r3, [r3, #6]
    2102:	2b00      	cmp	r3, #0
    2104:	d022      	beq.n	214c <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2106:	2300      	movs	r3, #0
    2108:	4a17      	ldr	r2, [pc, #92]	; (2168 <_usb_ep0_on_setup+0xcc>)
    210a:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    210c:	4a17      	ldr	r2, [pc, #92]	; (216c <_usb_ep0_on_setup+0xd0>)
    210e:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2110:	2201      	movs	r2, #1
    2112:	4b10      	ldr	r3, [pc, #64]	; (2154 <_usb_ep0_on_setup+0xb8>)
    2114:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2116:	2308      	movs	r3, #8
    2118:	4a11      	ldr	r2, [pc, #68]	; (2160 <_usb_ep0_on_setup+0xc4>)
    211a:	2100      	movs	r1, #0
    211c:	4814      	ldr	r0, [pc, #80]	; (2170 <_usb_ep0_on_setup+0xd4>)
    211e:	4c15      	ldr	r4, [pc, #84]	; (2174 <_usb_ep0_on_setup+0xd8>)
    2120:	47a0      	blx	r4
    2122:	e7ce      	b.n	20c2 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2124:	4b0d      	ldr	r3, [pc, #52]	; (215c <_usb_ep0_on_setup+0xc0>)
    2126:	4798      	blx	r3
			return;
    2128:	e7cb      	b.n	20c2 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    212a:	2300      	movs	r3, #0
    212c:	4a0e      	ldr	r2, [pc, #56]	; (2168 <_usb_ep0_on_setup+0xcc>)
    212e:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2130:	4a0e      	ldr	r2, [pc, #56]	; (216c <_usb_ep0_on_setup+0xd0>)
    2132:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2134:	2202      	movs	r2, #2
    2136:	4b07      	ldr	r3, [pc, #28]	; (2154 <_usb_ep0_on_setup+0xb8>)
    2138:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    213a:	2308      	movs	r3, #8
    213c:	4a08      	ldr	r2, [pc, #32]	; (2160 <_usb_ep0_on_setup+0xc4>)
    213e:	2100      	movs	r1, #0
    2140:	480b      	ldr	r0, [pc, #44]	; (2170 <_usb_ep0_on_setup+0xd4>)
    2142:	4c0c      	ldr	r4, [pc, #48]	; (2174 <_usb_ep0_on_setup+0xd8>)
    2144:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2146:	4b0c      	ldr	r3, [pc, #48]	; (2178 <_usb_ep0_on_setup+0xdc>)
    2148:	4798      	blx	r3
    214a:	e7ba      	b.n	20c2 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    214c:	4b0b      	ldr	r3, [pc, #44]	; (217c <_usb_ep0_on_setup+0xe0>)
    214e:	4798      	blx	r3
				return;
    2150:	e7b7      	b.n	20c2 <_usb_ep0_on_setup+0x26>
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	20000162 	.word	0x20000162
    2158:	20000540 	.word	0x20000540
    215c:	00001dbd 	.word	0x00001dbd
    2160:	20000558 	.word	0x20000558
    2164:	00000d9d 	.word	0x00000d9d
    2168:	20000160 	.word	0x20000160
    216c:	2000015e 	.word	0x2000015e
    2170:	200003d8 	.word	0x200003d8
    2174:	00002ddd 	.word	0x00002ddd
    2178:	00001ff5 	.word	0x00001ff5
    217c:	00001f65 	.word	0x00001f65

00002180 <_usb_on_sof_notify>:
{
    2180:	b510      	push	{r4, lr}
	udc_sof_notify();
    2182:	4b01      	ldr	r3, [pc, #4]	; (2188 <_usb_on_sof_notify+0x8>)
    2184:	4798      	blx	r3
}
    2186:	bd10      	pop	{r4, pc}
    2188:	00000d59 	.word	0x00000d59

0000218c <udd_ep_abort>:
{
    218c:	b510      	push	{r4, lr}
    218e:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2190:	0001      	movs	r1, r0
    2192:	480a      	ldr	r0, [pc, #40]	; (21bc <udd_ep_abort+0x30>)
    2194:	4b0a      	ldr	r3, [pc, #40]	; (21c0 <udd_ep_abort+0x34>)
    2196:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2198:	0020      	movs	r0, r4
    219a:	4b0a      	ldr	r3, [pc, #40]	; (21c4 <udd_ep_abort+0x38>)
    219c:	4798      	blx	r3
	if (!ptr_job->busy) {
    219e:	7c83      	ldrb	r3, [r0, #18]
    21a0:	07db      	lsls	r3, r3, #31
    21a2:	d50a      	bpl.n	21ba <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    21a4:	7c83      	ldrb	r3, [r0, #18]
    21a6:	2201      	movs	r2, #1
    21a8:	4393      	bics	r3, r2
    21aa:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    21ac:	6803      	ldr	r3, [r0, #0]
    21ae:	2b00      	cmp	r3, #0
    21b0:	d003      	beq.n	21ba <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    21b2:	68c1      	ldr	r1, [r0, #12]
    21b4:	0022      	movs	r2, r4
    21b6:	2001      	movs	r0, #1
    21b8:	4798      	blx	r3
}
    21ba:	bd10      	pop	{r4, pc}
    21bc:	200003d8 	.word	0x200003d8
    21c0:	00002c7d 	.word	0x00002c7d
    21c4:	00001be5 	.word	0x00001be5

000021c8 <udd_ep_free>:
{
    21c8:	b570      	push	{r4, r5, r6, lr}
    21ca:	b082      	sub	sp, #8
    21cc:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    21ce:	ad01      	add	r5, sp, #4
    21d0:	0028      	movs	r0, r5
    21d2:	4b0d      	ldr	r3, [pc, #52]	; (2208 <udd_ep_free+0x40>)
    21d4:	4798      	blx	r3
	udd_ep_abort(ep);
    21d6:	0020      	movs	r0, r4
    21d8:	4b0c      	ldr	r3, [pc, #48]	; (220c <udd_ep_free+0x44>)
    21da:	4798      	blx	r3
	config_ep.ep_address = ep;
    21dc:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    21de:	2300      	movs	r3, #0
    21e0:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    21e2:	4e0b      	ldr	r6, [pc, #44]	; (2210 <udd_ep_free+0x48>)
    21e4:	0029      	movs	r1, r5
    21e6:	0030      	movs	r0, r6
    21e8:	4b0a      	ldr	r3, [pc, #40]	; (2214 <udd_ep_free+0x4c>)
    21ea:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    21ec:	210f      	movs	r1, #15
    21ee:	4021      	ands	r1, r4
    21f0:	2200      	movs	r2, #0
    21f2:	0030      	movs	r0, r6
    21f4:	4b08      	ldr	r3, [pc, #32]	; (2218 <udd_ep_free+0x50>)
    21f6:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    21f8:	2200      	movs	r2, #0
    21fa:	0021      	movs	r1, r4
    21fc:	0030      	movs	r0, r6
    21fe:	4b07      	ldr	r3, [pc, #28]	; (221c <udd_ep_free+0x54>)
    2200:	4798      	blx	r3
}
    2202:	b002      	add	sp, #8
    2204:	bd70      	pop	{r4, r5, r6, pc}
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	00002a29 	.word	0x00002a29
    220c:	0000218d 	.word	0x0000218d
    2210:	200003d8 	.word	0x200003d8
    2214:	00002a39 	.word	0x00002a39
    2218:	00002861 	.word	0x00002861
    221c:	00002959 	.word	0x00002959

00002220 <udd_ep_alloc>:
{
    2220:	b5f0      	push	{r4, r5, r6, r7, lr}
    2222:	b083      	sub	sp, #12
    2224:	0005      	movs	r5, r0
    2226:	000f      	movs	r7, r1
    2228:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    222a:	ae01      	add	r6, sp, #4
    222c:	0030      	movs	r0, r6
    222e:	4b36      	ldr	r3, [pc, #216]	; (2308 <udd_ep_alloc+0xe8>)
    2230:	4798      	blx	r3
	config_ep.ep_address = ep;
    2232:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2234:	2c08      	cmp	r4, #8
    2236:	d813      	bhi.n	2260 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2238:	2200      	movs	r2, #0
    223a:	ab01      	add	r3, sp, #4
    223c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    223e:	0028      	movs	r0, r5
    2240:	4b32      	ldr	r3, [pc, #200]	; (230c <udd_ep_alloc+0xec>)
    2242:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2244:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2246:	2103      	movs	r1, #3
    2248:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    224a:	2901      	cmp	r1, #1
    224c:	d038      	beq.n	22c0 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    224e:	2902      	cmp	r1, #2
    2250:	d043      	beq.n	22da <udd_ep_alloc+0xba>
		return false;
    2252:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2254:	2903      	cmp	r1, #3
    2256:	d13d      	bne.n	22d4 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2258:	2204      	movs	r2, #4
    225a:	ab01      	add	r3, sp, #4
    225c:	70da      	strb	r2, [r3, #3]
    225e:	e032      	b.n	22c6 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2260:	2c10      	cmp	r4, #16
    2262:	d803      	bhi.n	226c <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2264:	2201      	movs	r2, #1
    2266:	ab01      	add	r3, sp, #4
    2268:	705a      	strb	r2, [r3, #1]
    226a:	e7e8      	b.n	223e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    226c:	2c20      	cmp	r4, #32
    226e:	d803      	bhi.n	2278 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2270:	2202      	movs	r2, #2
    2272:	ab01      	add	r3, sp, #4
    2274:	705a      	strb	r2, [r3, #1]
    2276:	e7e2      	b.n	223e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2278:	2c40      	cmp	r4, #64	; 0x40
    227a:	d803      	bhi.n	2284 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    227c:	2203      	movs	r2, #3
    227e:	ab01      	add	r3, sp, #4
    2280:	705a      	strb	r2, [r3, #1]
    2282:	e7dc      	b.n	223e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2284:	2c80      	cmp	r4, #128	; 0x80
    2286:	d803      	bhi.n	2290 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2288:	2204      	movs	r2, #4
    228a:	ab01      	add	r3, sp, #4
    228c:	705a      	strb	r2, [r3, #1]
    228e:	e7d6      	b.n	223e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2290:	2380      	movs	r3, #128	; 0x80
    2292:	005b      	lsls	r3, r3, #1
    2294:	429c      	cmp	r4, r3
    2296:	d803      	bhi.n	22a0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2298:	2205      	movs	r2, #5
    229a:	ab01      	add	r3, sp, #4
    229c:	705a      	strb	r2, [r3, #1]
    229e:	e7ce      	b.n	223e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    22a0:	2380      	movs	r3, #128	; 0x80
    22a2:	009b      	lsls	r3, r3, #2
    22a4:	429c      	cmp	r4, r3
    22a6:	d803      	bhi.n	22b0 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    22a8:	2206      	movs	r2, #6
    22aa:	ab01      	add	r3, sp, #4
    22ac:	705a      	strb	r2, [r3, #1]
    22ae:	e7c6      	b.n	223e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    22b0:	4a17      	ldr	r2, [pc, #92]	; (2310 <udd_ep_alloc+0xf0>)
		return false;
    22b2:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    22b4:	4294      	cmp	r4, r2
    22b6:	d80d      	bhi.n	22d4 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    22b8:	2207      	movs	r2, #7
    22ba:	ab01      	add	r3, sp, #4
    22bc:	705a      	strb	r2, [r3, #1]
    22be:	e7be      	b.n	223e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    22c0:	2202      	movs	r2, #2
    22c2:	ab01      	add	r3, sp, #4
    22c4:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    22c6:	a901      	add	r1, sp, #4
    22c8:	4812      	ldr	r0, [pc, #72]	; (2314 <udd_ep_alloc+0xf4>)
    22ca:	4b13      	ldr	r3, [pc, #76]	; (2318 <udd_ep_alloc+0xf8>)
    22cc:	4798      	blx	r3
		return false;
    22ce:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    22d0:	2800      	cmp	r0, #0
    22d2:	d006      	beq.n	22e2 <udd_ep_alloc+0xc2>
}
    22d4:	0018      	movs	r0, r3
    22d6:	b003      	add	sp, #12
    22d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    22da:	2203      	movs	r2, #3
    22dc:	ab01      	add	r3, sp, #4
    22de:	70da      	strb	r2, [r3, #3]
    22e0:	e7f1      	b.n	22c6 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    22e2:	210f      	movs	r1, #15
    22e4:	4029      	ands	r1, r5
    22e6:	4c0b      	ldr	r4, [pc, #44]	; (2314 <udd_ep_alloc+0xf4>)
    22e8:	4b0c      	ldr	r3, [pc, #48]	; (231c <udd_ep_alloc+0xfc>)
    22ea:	2200      	movs	r2, #0
    22ec:	0020      	movs	r0, r4
    22ee:	4e0c      	ldr	r6, [pc, #48]	; (2320 <udd_ep_alloc+0x100>)
    22f0:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    22f2:	2200      	movs	r2, #0
    22f4:	0029      	movs	r1, r5
    22f6:	0020      	movs	r0, r4
    22f8:	4e0a      	ldr	r6, [pc, #40]	; (2324 <udd_ep_alloc+0x104>)
    22fa:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    22fc:	2201      	movs	r2, #1
    22fe:	0029      	movs	r1, r5
    2300:	0020      	movs	r0, r4
    2302:	47b0      	blx	r6
	return true;
    2304:	2301      	movs	r3, #1
    2306:	e7e5      	b.n	22d4 <udd_ep_alloc+0xb4>
    2308:	00002a29 	.word	0x00002a29
    230c:	00001be5 	.word	0x00001be5
    2310:	000003ff 	.word	0x000003ff
    2314:	200003d8 	.word	0x200003d8
    2318:	00002a39 	.word	0x00002a39
    231c:	00001c09 	.word	0x00001c09
    2320:	00002839 	.word	0x00002839
    2324:	00002889 	.word	0x00002889

00002328 <udd_ep_is_halted>:
{
    2328:	b510      	push	{r4, lr}
    232a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    232c:	4801      	ldr	r0, [pc, #4]	; (2334 <udd_ep_is_halted+0xc>)
    232e:	4b02      	ldr	r3, [pc, #8]	; (2338 <udd_ep_is_halted+0x10>)
    2330:	4798      	blx	r3
}
    2332:	bd10      	pop	{r4, pc}
    2334:	200003d8 	.word	0x200003d8
    2338:	00002cb3 	.word	0x00002cb3

0000233c <udd_ep_set_halt>:
{
    233c:	b510      	push	{r4, lr}
    233e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2340:	230f      	movs	r3, #15
    2342:	4003      	ands	r3, r0
		return false;
    2344:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2346:	2b01      	cmp	r3, #1
    2348:	d900      	bls.n	234c <udd_ep_set_halt+0x10>
}
    234a:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    234c:	0021      	movs	r1, r4
    234e:	4804      	ldr	r0, [pc, #16]	; (2360 <udd_ep_set_halt+0x24>)
    2350:	4b04      	ldr	r3, [pc, #16]	; (2364 <udd_ep_set_halt+0x28>)
    2352:	4798      	blx	r3
	udd_ep_abort(ep);
    2354:	0020      	movs	r0, r4
    2356:	4b04      	ldr	r3, [pc, #16]	; (2368 <udd_ep_set_halt+0x2c>)
    2358:	4798      	blx	r3
	return true;
    235a:	2001      	movs	r0, #1
    235c:	e7f5      	b.n	234a <udd_ep_set_halt+0xe>
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	200003d8 	.word	0x200003d8
    2364:	00002cdd 	.word	0x00002cdd
    2368:	0000218d 	.word	0x0000218d

0000236c <_usb_ep0_on_tansfer_ok>:
{
    236c:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    236e:	4b34      	ldr	r3, [pc, #208]	; (2440 <_usb_ep0_on_tansfer_ok+0xd4>)
    2370:	781b      	ldrb	r3, [r3, #0]
    2372:	2b01      	cmp	r3, #1
    2374:	d00a      	beq.n	238c <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2376:	2b02      	cmp	r3, #2
    2378:	d05f      	beq.n	243a <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    237a:	4b32      	ldr	r3, [pc, #200]	; (2444 <_usb_ep0_on_tansfer_ok+0xd8>)
    237c:	691b      	ldr	r3, [r3, #16]
    237e:	2b00      	cmp	r3, #0
    2380:	d000      	beq.n	2384 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    2382:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2384:	2200      	movs	r2, #0
    2386:	4b2e      	ldr	r3, [pc, #184]	; (2440 <_usb_ep0_on_tansfer_ok+0xd4>)
    2388:	701a      	strb	r2, [r3, #0]
}
    238a:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    238c:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    238e:	4b2d      	ldr	r3, [pc, #180]	; (2444 <_usb_ep0_on_tansfer_ok+0xd8>)
    2390:	899b      	ldrh	r3, [r3, #12]
    2392:	4a2d      	ldr	r2, [pc, #180]	; (2448 <_usb_ep0_on_tansfer_ok+0xdc>)
    2394:	8814      	ldrh	r4, [r2, #0]
    2396:	1962      	adds	r2, r4, r5
    2398:	4293      	cmp	r3, r2
    239a:	da01      	bge.n	23a0 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    239c:	1b1d      	subs	r5, r3, r4
    239e:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    23a0:	4b28      	ldr	r3, [pc, #160]	; (2444 <_usb_ep0_on_tansfer_ok+0xd8>)
    23a2:	6898      	ldr	r0, [r3, #8]
    23a4:	1900      	adds	r0, r0, r4
    23a6:	002a      	movs	r2, r5
    23a8:	4928      	ldr	r1, [pc, #160]	; (244c <_usb_ep0_on_tansfer_ok+0xe0>)
    23aa:	4b29      	ldr	r3, [pc, #164]	; (2450 <_usb_ep0_on_tansfer_ok+0xe4>)
    23ac:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    23ae:	1964      	adds	r4, r4, r5
    23b0:	b2a4      	uxth	r4, r4
    23b2:	4b25      	ldr	r3, [pc, #148]	; (2448 <_usb_ep0_on_tansfer_ok+0xdc>)
    23b4:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    23b6:	2d08      	cmp	r5, #8
    23b8:	d00a      	beq.n	23d0 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    23ba:	4b22      	ldr	r3, [pc, #136]	; (2444 <_usb_ep0_on_tansfer_ok+0xd8>)
    23bc:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    23be:	695b      	ldr	r3, [r3, #20]
    23c0:	2b00      	cmp	r3, #0
    23c2:	d002      	beq.n	23ca <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    23c4:	4798      	blx	r3
    23c6:	2800      	cmp	r0, #0
    23c8:	d014      	beq.n	23f4 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    23ca:	4b22      	ldr	r3, [pc, #136]	; (2454 <_usb_ep0_on_tansfer_ok+0xe8>)
    23cc:	4798      	blx	r3
    23ce:	e7dc      	b.n	238a <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    23d0:	4b1c      	ldr	r3, [pc, #112]	; (2444 <_usb_ep0_on_tansfer_ok+0xd8>)
    23d2:	88da      	ldrh	r2, [r3, #6]
    23d4:	4b20      	ldr	r3, [pc, #128]	; (2458 <_usb_ep0_on_tansfer_ok+0xec>)
    23d6:	881b      	ldrh	r3, [r3, #0]
    23d8:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    23da:	429a      	cmp	r2, r3
    23dc:	dded      	ble.n	23ba <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    23de:	4b19      	ldr	r3, [pc, #100]	; (2444 <_usb_ep0_on_tansfer_ok+0xd8>)
    23e0:	899b      	ldrh	r3, [r3, #12]
    23e2:	42a3      	cmp	r3, r4
    23e4:	d00c      	beq.n	2400 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    23e6:	2308      	movs	r3, #8
    23e8:	4a18      	ldr	r2, [pc, #96]	; (244c <_usb_ep0_on_tansfer_ok+0xe0>)
    23ea:	2100      	movs	r1, #0
    23ec:	481b      	ldr	r0, [pc, #108]	; (245c <_usb_ep0_on_tansfer_ok+0xf0>)
    23ee:	4c1c      	ldr	r4, [pc, #112]	; (2460 <_usb_ep0_on_tansfer_ok+0xf4>)
    23f0:	47a0      	blx	r4
    23f2:	e7ca      	b.n	238a <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    23f4:	2205      	movs	r2, #5
    23f6:	4b12      	ldr	r3, [pc, #72]	; (2440 <_usb_ep0_on_tansfer_ok+0xd4>)
    23f8:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    23fa:	4b1a      	ldr	r3, [pc, #104]	; (2464 <_usb_ep0_on_tansfer_ok+0xf8>)
    23fc:	4798      	blx	r3
    23fe:	e7c4      	b.n	238a <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    2400:	4b10      	ldr	r3, [pc, #64]	; (2444 <_usb_ep0_on_tansfer_ok+0xd8>)
    2402:	695b      	ldr	r3, [r3, #20]
    2404:	2b00      	cmp	r3, #0
    2406:	d00b      	beq.n	2420 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    2408:	4798      	blx	r3
    240a:	2800      	cmp	r0, #0
    240c:	d00f      	beq.n	242e <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    240e:	4912      	ldr	r1, [pc, #72]	; (2458 <_usb_ep0_on_tansfer_ok+0xec>)
    2410:	4a0d      	ldr	r2, [pc, #52]	; (2448 <_usb_ep0_on_tansfer_ok+0xdc>)
    2412:	880b      	ldrh	r3, [r1, #0]
    2414:	8810      	ldrh	r0, [r2, #0]
    2416:	181b      	adds	r3, r3, r0
    2418:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    241a:	2300      	movs	r3, #0
    241c:	8013      	strh	r3, [r2, #0]
    241e:	e7e2      	b.n	23e6 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2420:	2205      	movs	r2, #5
    2422:	4b07      	ldr	r3, [pc, #28]	; (2440 <_usb_ep0_on_tansfer_ok+0xd4>)
    2424:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2426:	2000      	movs	r0, #0
    2428:	4b0e      	ldr	r3, [pc, #56]	; (2464 <_usb_ep0_on_tansfer_ok+0xf8>)
    242a:	4798      	blx	r3
    242c:	e7ad      	b.n	238a <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    242e:	2205      	movs	r2, #5
    2430:	4b03      	ldr	r3, [pc, #12]	; (2440 <_usb_ep0_on_tansfer_ok+0xd4>)
    2432:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2434:	4b0b      	ldr	r3, [pc, #44]	; (2464 <_usb_ep0_on_tansfer_ok+0xf8>)
    2436:	4798      	blx	r3
    2438:	e7a7      	b.n	238a <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    243a:	4b0b      	ldr	r3, [pc, #44]	; (2468 <_usb_ep0_on_tansfer_ok+0xfc>)
    243c:	4798      	blx	r3
    243e:	e7a4      	b.n	238a <_usb_ep0_on_tansfer_ok+0x1e>
    2440:	20000162 	.word	0x20000162
    2444:	20000540 	.word	0x20000540
    2448:	2000015e 	.word	0x2000015e
    244c:	20000558 	.word	0x20000558
    2450:	00003bf5 	.word	0x00003bf5
    2454:	00001f65 	.word	0x00001f65
    2458:	20000160 	.word	0x20000160
    245c:	200003d8 	.word	0x200003d8
    2460:	00002ddd 	.word	0x00002ddd
    2464:	0000233d 	.word	0x0000233d
    2468:	00001ff5 	.word	0x00001ff5

0000246c <udd_ep_clear_halt>:
{
    246c:	b570      	push	{r4, r5, r6, lr}
    246e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2470:	230f      	movs	r3, #15
    2472:	4003      	ands	r3, r0
		return false;
    2474:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2476:	2b01      	cmp	r3, #1
    2478:	d900      	bls.n	247c <udd_ep_clear_halt+0x10>
}
    247a:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    247c:	0020      	movs	r0, r4
    247e:	4b09      	ldr	r3, [pc, #36]	; (24a4 <udd_ep_clear_halt+0x38>)
    2480:	4798      	blx	r3
    2482:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2484:	0021      	movs	r1, r4
    2486:	4808      	ldr	r0, [pc, #32]	; (24a8 <udd_ep_clear_halt+0x3c>)
    2488:	4b08      	ldr	r3, [pc, #32]	; (24ac <udd_ep_clear_halt+0x40>)
    248a:	4798      	blx	r3
	if (ptr_job->busy == true) {
    248c:	7cab      	ldrb	r3, [r5, #18]
	return true;
    248e:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    2490:	07db      	lsls	r3, r3, #31
    2492:	d5f2      	bpl.n	247a <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    2494:	7cab      	ldrb	r3, [r5, #18]
    2496:	2201      	movs	r2, #1
    2498:	4393      	bics	r3, r2
    249a:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    249c:	682b      	ldr	r3, [r5, #0]
    249e:	4798      	blx	r3
	return true;
    24a0:	2001      	movs	r0, #1
    24a2:	e7ea      	b.n	247a <udd_ep_clear_halt+0xe>
    24a4:	00001be5 	.word	0x00001be5
    24a8:	200003d8 	.word	0x200003d8
    24ac:	00002d03 	.word	0x00002d03

000024b0 <udd_ep_run>:
{
    24b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24b2:	b087      	sub	sp, #28
    24b4:	0005      	movs	r5, r0
    24b6:	9103      	str	r1, [sp, #12]
    24b8:	9202      	str	r2, [sp, #8]
    24ba:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    24bc:	260f      	movs	r6, #15
    24be:	4006      	ands	r6, r0
		return false;
    24c0:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    24c2:	2e01      	cmp	r6, #1
    24c4:	d902      	bls.n	24cc <udd_ep_run+0x1c>
}
    24c6:	0020      	movs	r0, r4
    24c8:	b007      	add	sp, #28
    24ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    24cc:	4b64      	ldr	r3, [pc, #400]	; (2660 <udd_ep_run+0x1b0>)
    24ce:	4798      	blx	r3
    24d0:	1e04      	subs	r4, r0, #0
    24d2:	d000      	beq.n	24d6 <udd_ep_run+0x26>
    24d4:	e0bd      	b.n	2652 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    24d6:	0028      	movs	r0, r5
    24d8:	4b62      	ldr	r3, [pc, #392]	; (2664 <udd_ep_run+0x1b4>)
    24da:	4798      	blx	r3
    24dc:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    24de:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    24e2:	425a      	negs	r2, r3
    24e4:	4153      	adcs	r3, r2
    24e6:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    24e8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    24ea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    24ee:	2200      	movs	r2, #0
    24f0:	4b5d      	ldr	r3, [pc, #372]	; (2668 <udd_ep_run+0x1b8>)
    24f2:	701a      	strb	r2, [r3, #0]
	return flags;
    24f4:	9b05      	ldr	r3, [sp, #20]
	if (ptr_job->busy == true) {
    24f6:	7c82      	ldrb	r2, [r0, #18]
    24f8:	07d2      	lsls	r2, r2, #31
    24fa:	d508      	bpl.n	250e <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    24fc:	2b00      	cmp	r3, #0
    24fe:	d0e2      	beq.n	24c6 <udd_ep_run+0x16>
		cpu_irq_enable();
    2500:	2201      	movs	r2, #1
    2502:	4b59      	ldr	r3, [pc, #356]	; (2668 <udd_ep_run+0x1b8>)
    2504:	701a      	strb	r2, [r3, #0]
    2506:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    250a:	b662      	cpsie	i
    250c:	e7db      	b.n	24c6 <udd_ep_run+0x16>
	ptr_job->busy = true;
    250e:	7c82      	ldrb	r2, [r0, #18]
    2510:	2101      	movs	r1, #1
    2512:	430a      	orrs	r2, r1
    2514:	7482      	strb	r2, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    2516:	2b00      	cmp	r3, #0
    2518:	d005      	beq.n	2526 <udd_ep_run+0x76>
		cpu_irq_enable();
    251a:	2201      	movs	r2, #1
    251c:	4b52      	ldr	r3, [pc, #328]	; (2668 <udd_ep_run+0x1b8>)
    251e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2520:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2524:	b662      	cpsie	i
	ptr_job->buf = buf;
    2526:	9b02      	ldr	r3, [sp, #8]
    2528:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    252a:	9b01      	ldr	r3, [sp, #4]
    252c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    252e:	2300      	movs	r3, #0
    2530:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    2532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2534:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    2536:	2301      	movs	r3, #1
    2538:	9a03      	ldr	r2, [sp, #12]
    253a:	4013      	ands	r3, r2
    253c:	005a      	lsls	r2, r3, #1
    253e:	7cbb      	ldrb	r3, [r7, #18]
    2540:	2102      	movs	r1, #2
    2542:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    2544:	4313      	orrs	r3, r2
    2546:	2204      	movs	r2, #4
    2548:	4393      	bics	r3, r2
    254a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    254c:	b26b      	sxtb	r3, r5
    254e:	2b00      	cmp	r3, #0
    2550:	db20      	blt.n	2594 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    2552:	9b01      	ldr	r3, [sp, #4]
    2554:	2b00      	cmp	r3, #0
    2556:	d06f      	beq.n	2638 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    2558:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    255a:	4b44      	ldr	r3, [pc, #272]	; (266c <udd_ep_run+0x1bc>)
    255c:	429c      	cmp	r4, r3
    255e:	d95a      	bls.n	2616 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2560:	8a39      	ldrh	r1, [r7, #16]
    2562:	001c      	movs	r4, r3
    2564:	0018      	movs	r0, r3
    2566:	4b42      	ldr	r3, [pc, #264]	; (2670 <udd_ep_run+0x1c0>)
    2568:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    256a:	1a63      	subs	r3, r4, r1
    256c:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    256e:	8a3b      	ldrh	r3, [r7, #16]
    2570:	429a      	cmp	r2, r3
    2572:	d257      	bcs.n	2624 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    2574:	7cba      	ldrb	r2, [r7, #18]
    2576:	2104      	movs	r1, #4
    2578:	430a      	orrs	r2, r1
    257a:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    257c:	1e72      	subs	r2, r6, #1
    257e:	0192      	lsls	r2, r2, #6
    2580:	493c      	ldr	r1, [pc, #240]	; (2674 <udd_ep_run+0x1c4>)
    2582:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2584:	0031      	movs	r1, r6
    2586:	483c      	ldr	r0, [pc, #240]	; (2678 <udd_ep_run+0x1c8>)
    2588:	4c3c      	ldr	r4, [pc, #240]	; (267c <udd_ep_run+0x1cc>)
    258a:	47a0      	blx	r4
				return (STATUS_OK ==
    258c:	4244      	negs	r4, r0
    258e:	4144      	adcs	r4, r0
    2590:	b2e4      	uxtb	r4, r4
    2592:	e798      	b.n	24c6 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    2594:	9b01      	ldr	r3, [sp, #4]
    2596:	2b00      	cmp	r3, #0
    2598:	d027      	beq.n	25ea <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    259a:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    259c:	4b33      	ldr	r3, [pc, #204]	; (266c <udd_ep_run+0x1bc>)
    259e:	429d      	cmp	r5, r3
    25a0:	d906      	bls.n	25b0 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    25a2:	8a39      	ldrh	r1, [r7, #16]
    25a4:	001d      	movs	r5, r3
    25a6:	0018      	movs	r0, r3
    25a8:	4b31      	ldr	r3, [pc, #196]	; (2670 <udd_ep_run+0x1c0>)
    25aa:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    25ac:	1a6b      	subs	r3, r5, r1
    25ae:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    25b0:	7cbb      	ldrb	r3, [r7, #18]
    25b2:	079b      	lsls	r3, r3, #30
    25b4:	d507      	bpl.n	25c6 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    25b6:	8a39      	ldrh	r1, [r7, #16]
    25b8:	0028      	movs	r0, r5
    25ba:	4b31      	ldr	r3, [pc, #196]	; (2680 <udd_ep_run+0x1d0>)
    25bc:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    25be:	b289      	uxth	r1, r1
    25c0:	424c      	negs	r4, r1
    25c2:	414c      	adcs	r4, r1
    25c4:	b2e4      	uxtb	r4, r4
    25c6:	2001      	movs	r0, #1
    25c8:	4020      	ands	r0, r4
    25ca:	0040      	lsls	r0, r0, #1
    25cc:	7cbc      	ldrb	r4, [r7, #18]
    25ce:	2302      	movs	r3, #2
    25d0:	439c      	bics	r4, r3
    25d2:	4304      	orrs	r4, r0
    25d4:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    25d6:	002b      	movs	r3, r5
    25d8:	9a02      	ldr	r2, [sp, #8]
    25da:	0031      	movs	r1, r6
    25dc:	4826      	ldr	r0, [pc, #152]	; (2678 <udd_ep_run+0x1c8>)
    25de:	4c29      	ldr	r4, [pc, #164]	; (2684 <udd_ep_run+0x1d4>)
    25e0:	47a0      	blx	r4
		return (STATUS_OK ==
    25e2:	4244      	negs	r4, r0
    25e4:	4144      	adcs	r4, r0
    25e6:	b2e4      	uxtb	r4, r4
    25e8:	e76d      	b.n	24c6 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    25ea:	7cbb      	ldrb	r3, [r7, #18]
    25ec:	079b      	lsls	r3, r3, #30
    25ee:	d505      	bpl.n	25fc <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    25f0:	7cbb      	ldrb	r3, [r7, #18]
    25f2:	2202      	movs	r2, #2
    25f4:	4393      	bics	r3, r2
    25f6:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    25f8:	2500      	movs	r5, #0
    25fa:	e7ec      	b.n	25d6 <udd_ep_run+0x126>
			ptr_job->busy = false;
    25fc:	7cbb      	ldrb	r3, [r7, #18]
    25fe:	2201      	movs	r2, #1
    2600:	4393      	bics	r3, r2
    2602:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2606:	2b00      	cmp	r3, #0
    2608:	d025      	beq.n	2656 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    260a:	002a      	movs	r2, r5
    260c:	2100      	movs	r1, #0
    260e:	2000      	movs	r0, #0
    2610:	4798      	blx	r3
			return true;
    2612:	2401      	movs	r4, #1
    2614:	e757      	b.n	24c6 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    2616:	8a39      	ldrh	r1, [r7, #16]
    2618:	0020      	movs	r0, r4
    261a:	4b19      	ldr	r3, [pc, #100]	; (2680 <udd_ep_run+0x1d0>)
    261c:	4798      	blx	r3
    261e:	1a63      	subs	r3, r4, r1
    2620:	b29a      	uxth	r2, r3
    2622:	e7a4      	b.n	256e <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2624:	0013      	movs	r3, r2
    2626:	9a02      	ldr	r2, [sp, #8]
    2628:	0031      	movs	r1, r6
    262a:	4813      	ldr	r0, [pc, #76]	; (2678 <udd_ep_run+0x1c8>)
    262c:	4c13      	ldr	r4, [pc, #76]	; (267c <udd_ep_run+0x1cc>)
    262e:	47a0      	blx	r4
				return (STATUS_OK ==
    2630:	4244      	negs	r4, r0
    2632:	4144      	adcs	r4, r0
    2634:	b2e4      	uxtb	r4, r4
    2636:	e746      	b.n	24c6 <udd_ep_run+0x16>
			ptr_job->busy = false;
    2638:	7cbb      	ldrb	r3, [r7, #18]
    263a:	2201      	movs	r2, #1
    263c:	4393      	bics	r3, r2
    263e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2642:	2b00      	cmp	r3, #0
    2644:	d009      	beq.n	265a <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2646:	002a      	movs	r2, r5
    2648:	2100      	movs	r1, #0
    264a:	2000      	movs	r0, #0
    264c:	4798      	blx	r3
			return true;
    264e:	2401      	movs	r4, #1
    2650:	e739      	b.n	24c6 <udd_ep_run+0x16>
		return false;
    2652:	2400      	movs	r4, #0
    2654:	e737      	b.n	24c6 <udd_ep_run+0x16>
			return true;
    2656:	2401      	movs	r4, #1
    2658:	e735      	b.n	24c6 <udd_ep_run+0x16>
			return true;
    265a:	2401      	movs	r4, #1
    265c:	e733      	b.n	24c6 <udd_ep_run+0x16>
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	00002329 	.word	0x00002329
    2664:	00001be5 	.word	0x00001be5
    2668:	200000dc 	.word	0x200000dc
    266c:	00001fff 	.word	0x00001fff
    2670:	00003b61 	.word	0x00003b61
    2674:	20000398 	.word	0x20000398
    2678:	200003d8 	.word	0x200003d8
    267c:	00002ddd 	.word	0x00002ddd
    2680:	0000398d 	.word	0x0000398d
    2684:	00002d89 	.word	0x00002d89

00002688 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2688:	4b02      	ldr	r3, [pc, #8]	; (2694 <udd_set_address+0xc>)
    268a:	681b      	ldr	r3, [r3, #0]
    268c:	2280      	movs	r2, #128	; 0x80
    268e:	4310      	orrs	r0, r2
    2690:	7298      	strb	r0, [r3, #10]
}
    2692:	4770      	bx	lr
    2694:	200003d8 	.word	0x200003d8

00002698 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    2698:	4b02      	ldr	r3, [pc, #8]	; (26a4 <udd_getaddress+0xc>)
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	7a98      	ldrb	r0, [r3, #10]
    269e:	0640      	lsls	r0, r0, #25
    26a0:	0e40      	lsrs	r0, r0, #25
}
    26a2:	4770      	bx	lr
    26a4:	200003d8 	.word	0x200003d8

000026a8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    26a8:	4b01      	ldr	r3, [pc, #4]	; (26b0 <udd_set_setup_payload+0x8>)
    26aa:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    26ac:	8199      	strh	r1, [r3, #12]
}
    26ae:	4770      	bx	lr
    26b0:	20000540 	.word	0x20000540

000026b4 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    26b4:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    26b6:	2003      	movs	r0, #3
    26b8:	4b16      	ldr	r3, [pc, #88]	; (2714 <udd_attach+0x60>)
    26ba:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    26bc:	4c16      	ldr	r4, [pc, #88]	; (2718 <udd_attach+0x64>)
    26be:	6822      	ldr	r2, [r4, #0]
    26c0:	8913      	ldrh	r3, [r2, #8]
    26c2:	2101      	movs	r1, #1
    26c4:	438b      	bics	r3, r1
    26c6:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    26c8:	4a14      	ldr	r2, [pc, #80]	; (271c <udd_attach+0x68>)
    26ca:	3103      	adds	r1, #3
    26cc:	0020      	movs	r0, r4
    26ce:	4e14      	ldr	r6, [pc, #80]	; (2720 <udd_attach+0x6c>)
    26d0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    26d2:	4a14      	ldr	r2, [pc, #80]	; (2724 <udd_attach+0x70>)
    26d4:	2100      	movs	r1, #0
    26d6:	0020      	movs	r0, r4
    26d8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    26da:	4a13      	ldr	r2, [pc, #76]	; (2728 <udd_attach+0x74>)
    26dc:	2101      	movs	r1, #1
    26de:	0020      	movs	r0, r4
    26e0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    26e2:	4a12      	ldr	r2, [pc, #72]	; (272c <udd_attach+0x78>)
    26e4:	2102      	movs	r1, #2
    26e6:	0020      	movs	r0, r4
    26e8:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    26ea:	2104      	movs	r1, #4
    26ec:	0020      	movs	r0, r4
    26ee:	4d10      	ldr	r5, [pc, #64]	; (2730 <udd_attach+0x7c>)
    26f0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    26f2:	2100      	movs	r1, #0
    26f4:	0020      	movs	r0, r4
    26f6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    26f8:	2101      	movs	r1, #1
    26fa:	0020      	movs	r0, r4
    26fc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    26fe:	2102      	movs	r1, #2
    2700:	0020      	movs	r0, r4
    2702:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2704:	4a0b      	ldr	r2, [pc, #44]	; (2734 <udd_attach+0x80>)
    2706:	2106      	movs	r1, #6
    2708:	0020      	movs	r0, r4
    270a:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    270c:	2106      	movs	r1, #6
    270e:	0020      	movs	r0, r4
    2710:	47a8      	blx	r5
#endif
}
    2712:	bd70      	pop	{r4, r5, r6, pc}
    2714:	00001b29 	.word	0x00001b29
    2718:	200003d8 	.word	0x200003d8
    271c:	00001e89 	.word	0x00001e89
    2720:	000027d9 	.word	0x000027d9
    2724:	00002181 	.word	0x00002181
    2728:	00001eb5 	.word	0x00001eb5
    272c:	00001e1d 	.word	0x00001e1d
    2730:	000027fd 	.word	0x000027fd
    2734:	00001de9 	.word	0x00001de9

00002738 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    2738:	b570      	push	{r4, r5, r6, lr}
    273a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    273c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2740:	425a      	negs	r2, r3
    2742:	4153      	adcs	r3, r2
    2744:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2746:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2748:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    274c:	2200      	movs	r2, #0
    274e:	4b1a      	ldr	r3, [pc, #104]	; (27b8 <udd_enable+0x80>)
    2750:	701a      	strb	r2, [r3, #0]
	return flags;
    2752:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    2754:	ad01      	add	r5, sp, #4
    2756:	0028      	movs	r0, r5
    2758:	4b18      	ldr	r3, [pc, #96]	; (27bc <udd_enable+0x84>)
    275a:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    275c:	2303      	movs	r3, #3
    275e:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    2760:	4e17      	ldr	r6, [pc, #92]	; (27c0 <udd_enable+0x88>)
    2762:	002a      	movs	r2, r5
    2764:	2182      	movs	r1, #130	; 0x82
    2766:	05c9      	lsls	r1, r1, #23
    2768:	0030      	movs	r0, r6
    276a:	4b16      	ldr	r3, [pc, #88]	; (27c4 <udd_enable+0x8c>)
    276c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    276e:	0030      	movs	r0, r6
    2770:	4b15      	ldr	r3, [pc, #84]	; (27c8 <udd_enable+0x90>)
    2772:	4798      	blx	r3
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    2774:	4b15      	ldr	r3, [pc, #84]	; (27cc <udd_enable+0x94>)
    2776:	8b1b      	ldrh	r3, [r3, #24]
    2778:	069b      	lsls	r3, r3, #26
    277a:	d415      	bmi.n	27a8 <udd_enable+0x70>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    277c:	4913      	ldr	r1, [pc, #76]	; (27cc <udd_enable+0x94>)
    277e:	22d0      	movs	r2, #208	; 0xd0
    2780:	0112      	lsls	r2, r2, #4
    2782:	68cb      	ldr	r3, [r1, #12]
    2784:	4013      	ands	r3, r2
    2786:	4293      	cmp	r3, r2
    2788:	d1fb      	bne.n	2782 <udd_enable+0x4a>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    278a:	2001      	movs	r0, #1
    278c:	4b10      	ldr	r3, [pc, #64]	; (27d0 <udd_enable+0x98>)
    278e:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    2790:	4b10      	ldr	r3, [pc, #64]	; (27d4 <udd_enable+0x9c>)
    2792:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2794:	2c00      	cmp	r4, #0
    2796:	d005      	beq.n	27a4 <udd_enable+0x6c>
		cpu_irq_enable();
    2798:	2201      	movs	r2, #1
    279a:	4b07      	ldr	r3, [pc, #28]	; (27b8 <udd_enable+0x80>)
    279c:	701a      	strb	r2, [r3, #0]
    279e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    27a2:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    27a4:	b002      	add	sp, #8
    27a6:	bd70      	pop	{r4, r5, r6, pc}
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    27a8:	4908      	ldr	r1, [pc, #32]	; (27cc <udd_enable+0x94>)
    27aa:	2280      	movs	r2, #128	; 0x80
    27ac:	0052      	lsls	r2, r2, #1
    27ae:	68cb      	ldr	r3, [r1, #12]
    27b0:	4213      	tst	r3, r2
    27b2:	d0fc      	beq.n	27ae <udd_enable+0x76>
    27b4:	e7e9      	b.n	278a <udd_enable+0x52>
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	200000dc 	.word	0x200000dc
    27bc:	00003551 	.word	0x00003551
    27c0:	200003d8 	.word	0x200003d8
    27c4:	00003561 	.word	0x00003561
    27c8:	00002e5d 	.word	0x00002e5d
    27cc:	40000c00 	.word	0x40000c00
    27d0:	00001b29 	.word	0x00001b29
    27d4:	000026b5 	.word	0x000026b5

000027d8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    27d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    27da:	000b      	movs	r3, r1
    27dc:	332e      	adds	r3, #46	; 0x2e
    27de:	009b      	lsls	r3, r3, #2
    27e0:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    27e2:	22aa      	movs	r2, #170	; 0xaa
    27e4:	0052      	lsls	r2, r2, #1
    27e6:	0049      	lsls	r1, r1, #1
    27e8:	5a83      	ldrh	r3, [r0, r2]
    27ea:	4c03      	ldr	r4, [pc, #12]	; (27f8 <usb_device_register_callback+0x20>)
    27ec:	5b09      	ldrh	r1, [r1, r4]
    27ee:	430b      	orrs	r3, r1
    27f0:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    27f2:	2000      	movs	r0, #0
    27f4:	bd10      	pop	{r4, pc}
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	00004034 	.word	0x00004034

000027fc <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    27fc:	0049      	lsls	r1, r1, #1
    27fe:	4b06      	ldr	r3, [pc, #24]	; (2818 <usb_device_enable_callback+0x1c>)
    2800:	5acb      	ldrh	r3, [r1, r3]
    2802:	6802      	ldr	r2, [r0, #0]
    2804:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    2806:	21ab      	movs	r1, #171	; 0xab
    2808:	0049      	lsls	r1, r1, #1
    280a:	5a42      	ldrh	r2, [r0, r1]
    280c:	431a      	orrs	r2, r3
    280e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    2810:	6802      	ldr	r2, [r0, #0]
    2812:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    2814:	2000      	movs	r0, #0
    2816:	4770      	bx	lr
    2818:	00004034 	.word	0x00004034

0000281c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    281c:	0049      	lsls	r1, r1, #1
    281e:	4b05      	ldr	r3, [pc, #20]	; (2834 <usb_device_disable_callback+0x18>)
    2820:	5aca      	ldrh	r2, [r1, r3]
    2822:	21ab      	movs	r1, #171	; 0xab
    2824:	0049      	lsls	r1, r1, #1
    2826:	5a43      	ldrh	r3, [r0, r1]
    2828:	4393      	bics	r3, r2
    282a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    282c:	6803      	ldr	r3, [r0, #0]
    282e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    2830:	2000      	movs	r0, #0
    2832:	4770      	bx	lr
    2834:	00004034 	.word	0x00004034

00002838 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    2838:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    283a:	008c      	lsls	r4, r1, #2
    283c:	18a4      	adds	r4, r4, r2
    283e:	3434      	adds	r4, #52	; 0x34
    2840:	00a4      	lsls	r4, r4, #2
    2842:	1904      	adds	r4, r0, r4
    2844:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2846:	1840      	adds	r0, r0, r1
    2848:	3059      	adds	r0, #89	; 0x59
    284a:	30ff      	adds	r0, #255	; 0xff
    284c:	7803      	ldrb	r3, [r0, #0]
    284e:	4903      	ldr	r1, [pc, #12]	; (285c <usb_device_endpoint_register_callback+0x24>)
    2850:	5c8a      	ldrb	r2, [r1, r2]
    2852:	4313      	orrs	r3, r2
    2854:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2856:	2000      	movs	r0, #0
    2858:	bd10      	pop	{r4, pc}
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	00004044 	.word	0x00004044

00002860 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    2860:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    2862:	008b      	lsls	r3, r1, #2
    2864:	189b      	adds	r3, r3, r2
    2866:	3334      	adds	r3, #52	; 0x34
    2868:	009b      	lsls	r3, r3, #2
    286a:	18c3      	adds	r3, r0, r3
    286c:	2400      	movs	r4, #0
    286e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2870:	1840      	adds	r0, r0, r1
    2872:	3059      	adds	r0, #89	; 0x59
    2874:	30ff      	adds	r0, #255	; 0xff
    2876:	4b03      	ldr	r3, [pc, #12]	; (2884 <usb_device_endpoint_unregister_callback+0x24>)
    2878:	5c9a      	ldrb	r2, [r3, r2]
    287a:	7803      	ldrb	r3, [r0, #0]
    287c:	4393      	bics	r3, r2
    287e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2880:	2000      	movs	r0, #0
    2882:	bd10      	pop	{r4, pc}
    2884:	00004044 	.word	0x00004044

00002888 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2888:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    288a:	230f      	movs	r3, #15
    288c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    288e:	18c4      	adds	r4, r0, r3
    2890:	3461      	adds	r4, #97	; 0x61
    2892:	34ff      	adds	r4, #255	; 0xff
    2894:	7825      	ldrb	r5, [r4, #0]
    2896:	4e2f      	ldr	r6, [pc, #188]	; (2954 <usb_device_endpoint_enable_callback+0xcc>)
    2898:	5cb6      	ldrb	r6, [r6, r2]
    289a:	4335      	orrs	r5, r6
    289c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    289e:	2a00      	cmp	r2, #0
    28a0:	d129      	bne.n	28f6 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    28a2:	2b00      	cmp	r3, #0
    28a4:	d112      	bne.n	28cc <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    28a6:	2503      	movs	r5, #3
    28a8:	240a      	movs	r4, #10
    28aa:	34ff      	adds	r4, #255	; 0xff
    28ac:	6806      	ldr	r6, [r0, #0]
    28ae:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    28b0:	2a03      	cmp	r2, #3
    28b2:	d109      	bne.n	28c8 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    28b4:	b249      	sxtb	r1, r1
    28b6:	2900      	cmp	r1, #0
    28b8:	db44      	blt.n	2944 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    28ba:	6802      	ldr	r2, [r0, #0]
    28bc:	015b      	lsls	r3, r3, #5
    28be:	18d3      	adds	r3, r2, r3
    28c0:	330a      	adds	r3, #10
    28c2:	33ff      	adds	r3, #255	; 0xff
    28c4:	2220      	movs	r2, #32
    28c6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    28c8:	2000      	movs	r0, #0
    28ca:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    28cc:	b24c      	sxtb	r4, r1
    28ce:	2c00      	cmp	r4, #0
    28d0:	db08      	blt.n	28e4 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    28d2:	015c      	lsls	r4, r3, #5
    28d4:	6805      	ldr	r5, [r0, #0]
    28d6:	46ac      	mov	ip, r5
    28d8:	4464      	add	r4, ip
    28da:	340a      	adds	r4, #10
    28dc:	34ff      	adds	r4, #255	; 0xff
    28de:	2501      	movs	r5, #1
    28e0:	7025      	strb	r5, [r4, #0]
    28e2:	e7e5      	b.n	28b0 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    28e4:	015c      	lsls	r4, r3, #5
    28e6:	6805      	ldr	r5, [r0, #0]
    28e8:	46ac      	mov	ip, r5
    28ea:	4464      	add	r4, ip
    28ec:	340a      	adds	r4, #10
    28ee:	34ff      	adds	r4, #255	; 0xff
    28f0:	2502      	movs	r5, #2
    28f2:	7025      	strb	r5, [r4, #0]
    28f4:	e7dc      	b.n	28b0 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    28f6:	2a01      	cmp	r2, #1
    28f8:	d11a      	bne.n	2930 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    28fa:	2b00      	cmp	r3, #0
    28fc:	d105      	bne.n	290a <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    28fe:	6802      	ldr	r2, [r0, #0]
    2900:	210c      	movs	r1, #12
    2902:	230a      	movs	r3, #10
    2904:	33ff      	adds	r3, #255	; 0xff
    2906:	54d1      	strb	r1, [r2, r3]
    2908:	e7de      	b.n	28c8 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    290a:	b249      	sxtb	r1, r1
    290c:	2900      	cmp	r1, #0
    290e:	db07      	blt.n	2920 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    2910:	6802      	ldr	r2, [r0, #0]
    2912:	015b      	lsls	r3, r3, #5
    2914:	18d3      	adds	r3, r2, r3
    2916:	330a      	adds	r3, #10
    2918:	33ff      	adds	r3, #255	; 0xff
    291a:	2204      	movs	r2, #4
    291c:	701a      	strb	r2, [r3, #0]
    291e:	e7d3      	b.n	28c8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2920:	6802      	ldr	r2, [r0, #0]
    2922:	015b      	lsls	r3, r3, #5
    2924:	18d3      	adds	r3, r2, r3
    2926:	330a      	adds	r3, #10
    2928:	33ff      	adds	r3, #255	; 0xff
    292a:	2208      	movs	r2, #8
    292c:	701a      	strb	r2, [r3, #0]
    292e:	e7cb      	b.n	28c8 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2930:	2a02      	cmp	r2, #2
    2932:	d1bd      	bne.n	28b0 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2934:	6802      	ldr	r2, [r0, #0]
    2936:	015b      	lsls	r3, r3, #5
    2938:	18d3      	adds	r3, r2, r3
    293a:	330a      	adds	r3, #10
    293c:	33ff      	adds	r3, #255	; 0xff
    293e:	2210      	movs	r2, #16
    2940:	701a      	strb	r2, [r3, #0]
    2942:	e7c1      	b.n	28c8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2944:	6802      	ldr	r2, [r0, #0]
    2946:	015b      	lsls	r3, r3, #5
    2948:	18d3      	adds	r3, r2, r3
    294a:	330a      	adds	r3, #10
    294c:	33ff      	adds	r3, #255	; 0xff
    294e:	2240      	movs	r2, #64	; 0x40
    2950:	701a      	strb	r2, [r3, #0]
    2952:	e7b9      	b.n	28c8 <usb_device_endpoint_enable_callback+0x40>
    2954:	00004044 	.word	0x00004044

00002958 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2958:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    295a:	230f      	movs	r3, #15
    295c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    295e:	18c4      	adds	r4, r0, r3
    2960:	3461      	adds	r4, #97	; 0x61
    2962:	34ff      	adds	r4, #255	; 0xff
    2964:	4d2f      	ldr	r5, [pc, #188]	; (2a24 <usb_device_endpoint_disable_callback+0xcc>)
    2966:	5cae      	ldrb	r6, [r5, r2]
    2968:	7825      	ldrb	r5, [r4, #0]
    296a:	43b5      	bics	r5, r6
    296c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    296e:	2a00      	cmp	r2, #0
    2970:	d129      	bne.n	29c6 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2972:	2b00      	cmp	r3, #0
    2974:	d112      	bne.n	299c <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    2976:	2503      	movs	r5, #3
    2978:	2484      	movs	r4, #132	; 0x84
    297a:	0064      	lsls	r4, r4, #1
    297c:	6806      	ldr	r6, [r0, #0]
    297e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2980:	2a03      	cmp	r2, #3
    2982:	d109      	bne.n	2998 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2984:	b249      	sxtb	r1, r1
    2986:	2900      	cmp	r1, #0
    2988:	db44      	blt.n	2a14 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    298a:	6802      	ldr	r2, [r0, #0]
    298c:	015b      	lsls	r3, r3, #5
    298e:	18d3      	adds	r3, r2, r3
    2990:	3309      	adds	r3, #9
    2992:	33ff      	adds	r3, #255	; 0xff
    2994:	2220      	movs	r2, #32
    2996:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2998:	2000      	movs	r0, #0
    299a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    299c:	b24c      	sxtb	r4, r1
    299e:	2c00      	cmp	r4, #0
    29a0:	db08      	blt.n	29b4 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    29a2:	015c      	lsls	r4, r3, #5
    29a4:	6805      	ldr	r5, [r0, #0]
    29a6:	46ac      	mov	ip, r5
    29a8:	4464      	add	r4, ip
    29aa:	3409      	adds	r4, #9
    29ac:	34ff      	adds	r4, #255	; 0xff
    29ae:	2501      	movs	r5, #1
    29b0:	7025      	strb	r5, [r4, #0]
    29b2:	e7e5      	b.n	2980 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    29b4:	015c      	lsls	r4, r3, #5
    29b6:	6805      	ldr	r5, [r0, #0]
    29b8:	46ac      	mov	ip, r5
    29ba:	4464      	add	r4, ip
    29bc:	3409      	adds	r4, #9
    29be:	34ff      	adds	r4, #255	; 0xff
    29c0:	2502      	movs	r5, #2
    29c2:	7025      	strb	r5, [r4, #0]
    29c4:	e7dc      	b.n	2980 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    29c6:	2a01      	cmp	r2, #1
    29c8:	d11a      	bne.n	2a00 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    29ca:	2b00      	cmp	r3, #0
    29cc:	d105      	bne.n	29da <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    29ce:	6802      	ldr	r2, [r0, #0]
    29d0:	210c      	movs	r1, #12
    29d2:	3309      	adds	r3, #9
    29d4:	33ff      	adds	r3, #255	; 0xff
    29d6:	54d1      	strb	r1, [r2, r3]
    29d8:	e7de      	b.n	2998 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    29da:	b249      	sxtb	r1, r1
    29dc:	2900      	cmp	r1, #0
    29de:	db07      	blt.n	29f0 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    29e0:	6802      	ldr	r2, [r0, #0]
    29e2:	015b      	lsls	r3, r3, #5
    29e4:	18d3      	adds	r3, r2, r3
    29e6:	3309      	adds	r3, #9
    29e8:	33ff      	adds	r3, #255	; 0xff
    29ea:	2204      	movs	r2, #4
    29ec:	701a      	strb	r2, [r3, #0]
    29ee:	e7d3      	b.n	2998 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    29f0:	6802      	ldr	r2, [r0, #0]
    29f2:	015b      	lsls	r3, r3, #5
    29f4:	18d3      	adds	r3, r2, r3
    29f6:	3309      	adds	r3, #9
    29f8:	33ff      	adds	r3, #255	; 0xff
    29fa:	2208      	movs	r2, #8
    29fc:	701a      	strb	r2, [r3, #0]
    29fe:	e7cb      	b.n	2998 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2a00:	2a02      	cmp	r2, #2
    2a02:	d1bd      	bne.n	2980 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    2a04:	6802      	ldr	r2, [r0, #0]
    2a06:	015b      	lsls	r3, r3, #5
    2a08:	18d3      	adds	r3, r2, r3
    2a0a:	3309      	adds	r3, #9
    2a0c:	33ff      	adds	r3, #255	; 0xff
    2a0e:	2210      	movs	r2, #16
    2a10:	701a      	strb	r2, [r3, #0]
    2a12:	e7c1      	b.n	2998 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2a14:	6802      	ldr	r2, [r0, #0]
    2a16:	015b      	lsls	r3, r3, #5
    2a18:	18d3      	adds	r3, r2, r3
    2a1a:	3309      	adds	r3, #9
    2a1c:	33ff      	adds	r3, #255	; 0xff
    2a1e:	2240      	movs	r2, #64	; 0x40
    2a20:	701a      	strb	r2, [r3, #0]
    2a22:	e7b9      	b.n	2998 <usb_device_endpoint_disable_callback+0x40>
    2a24:	00004044 	.word	0x00004044

00002a28 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    2a28:	2300      	movs	r3, #0
    2a2a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    2a2c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    2a2e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    2a30:	3301      	adds	r3, #1
    2a32:	70c3      	strb	r3, [r0, #3]
}
    2a34:	4770      	bx	lr
	...

00002a38 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    2a38:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2a3a:	780c      	ldrb	r4, [r1, #0]
    2a3c:	230f      	movs	r3, #15
    2a3e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2a40:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    2a42:	78ca      	ldrb	r2, [r1, #3]
    2a44:	2a04      	cmp	r2, #4
    2a46:	d870      	bhi.n	2b2a <usb_device_endpoint_set_config+0xf2>
    2a48:	0092      	lsls	r2, r2, #2
    2a4a:	4d89      	ldr	r5, [pc, #548]	; (2c70 <usb_device_endpoint_set_config+0x238>)
    2a4c:	58aa      	ldr	r2, [r5, r2]
    2a4e:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    2a50:	6802      	ldr	r2, [r0, #0]
    2a52:	3308      	adds	r3, #8
    2a54:	015b      	lsls	r3, r3, #5
    2a56:	2100      	movs	r1, #0
    2a58:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    2a5a:	2200      	movs	r2, #0
    2a5c:	e082      	b.n	2b64 <usb_device_endpoint_set_config+0x12c>
    2a5e:	015c      	lsls	r4, r3, #5
    2a60:	6802      	ldr	r2, [r0, #0]
    2a62:	4694      	mov	ip, r2
    2a64:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2a66:	2280      	movs	r2, #128	; 0x80
    2a68:	0052      	lsls	r2, r2, #1
    2a6a:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    2a6c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2a6e:	076d      	lsls	r5, r5, #29
    2a70:	d178      	bne.n	2b64 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    2a72:	32e4      	adds	r2, #228	; 0xe4
    2a74:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2a76:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    2a78:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2a7a:	422e      	tst	r6, r5
    2a7c:	d172      	bne.n	2b64 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    2a7e:	3d5f      	subs	r5, #95	; 0x5f
    2a80:	32e4      	adds	r2, #228	; 0xe4
    2a82:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2a84:	001a      	movs	r2, r3
    2a86:	3208      	adds	r2, #8
    2a88:	0152      	lsls	r2, r2, #5
    2a8a:	6804      	ldr	r4, [r0, #0]
    2a8c:	18a4      	adds	r4, r4, r2
    2a8e:	352f      	adds	r5, #47	; 0x2f
    2a90:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2a92:	6800      	ldr	r0, [r0, #0]
    2a94:	1882      	adds	r2, r0, r2
    2a96:	2080      	movs	r0, #128	; 0x80
    2a98:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    2a9a:	788a      	ldrb	r2, [r1, #2]
    2a9c:	2a00      	cmp	r2, #0
    2a9e:	d01f      	beq.n	2ae0 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2aa0:	0158      	lsls	r0, r3, #5
    2aa2:	4a74      	ldr	r2, [pc, #464]	; (2c74 <usb_device_endpoint_set_config+0x23c>)
    2aa4:	1812      	adds	r2, r2, r0
    2aa6:	6854      	ldr	r4, [r2, #4]
    2aa8:	2080      	movs	r0, #128	; 0x80
    2aaa:	0600      	lsls	r0, r0, #24
    2aac:	4304      	orrs	r4, r0
    2aae:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2ab0:	6954      	ldr	r4, [r2, #20]
    2ab2:	4320      	orrs	r0, r4
    2ab4:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2ab6:	2507      	movs	r5, #7
    2ab8:	784c      	ldrb	r4, [r1, #1]
    2aba:	015a      	lsls	r2, r3, #5
    2abc:	4b6d      	ldr	r3, [pc, #436]	; (2c74 <usb_device_endpoint_set_config+0x23c>)
    2abe:	189b      	adds	r3, r3, r2
    2ac0:	6858      	ldr	r0, [r3, #4]
    2ac2:	402c      	ands	r4, r5
    2ac4:	0724      	lsls	r4, r4, #28
    2ac6:	4e6c      	ldr	r6, [pc, #432]	; (2c78 <usb_device_endpoint_set_config+0x240>)
    2ac8:	4030      	ands	r0, r6
    2aca:	4320      	orrs	r0, r4
    2acc:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2ace:	7849      	ldrb	r1, [r1, #1]
    2ad0:	695a      	ldr	r2, [r3, #20]
    2ad2:	4029      	ands	r1, r5
    2ad4:	0709      	lsls	r1, r1, #28
    2ad6:	4032      	ands	r2, r6
    2ad8:	430a      	orrs	r2, r1
    2ada:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    2adc:	2200      	movs	r2, #0
    2ade:	e041      	b.n	2b64 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2ae0:	0158      	lsls	r0, r3, #5
    2ae2:	4a64      	ldr	r2, [pc, #400]	; (2c74 <usb_device_endpoint_set_config+0x23c>)
    2ae4:	1812      	adds	r2, r2, r0
    2ae6:	6850      	ldr	r0, [r2, #4]
    2ae8:	0040      	lsls	r0, r0, #1
    2aea:	0840      	lsrs	r0, r0, #1
    2aec:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2aee:	6950      	ldr	r0, [r2, #20]
    2af0:	0040      	lsls	r0, r0, #1
    2af2:	0840      	lsrs	r0, r0, #1
    2af4:	6150      	str	r0, [r2, #20]
    2af6:	e7de      	b.n	2ab6 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    2af8:	2c00      	cmp	r4, #0
    2afa:	db35      	blt.n	2b68 <usb_device_endpoint_set_config+0x130>
    2afc:	015d      	lsls	r5, r3, #5
    2afe:	6802      	ldr	r2, [r0, #0]
    2b00:	4694      	mov	ip, r2
    2b02:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2b04:	2280      	movs	r2, #128	; 0x80
    2b06:	0052      	lsls	r2, r2, #1
    2b08:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    2b0a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2b0c:	0776      	lsls	r6, r6, #29
    2b0e:	d129      	bne.n	2b64 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    2b10:	2680      	movs	r6, #128	; 0x80
    2b12:	0076      	lsls	r6, r6, #1
    2b14:	5daa      	ldrb	r2, [r5, r6]
    2b16:	2702      	movs	r7, #2
    2b18:	433a      	orrs	r2, r7
    2b1a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2b1c:	6802      	ldr	r2, [r0, #0]
    2b1e:	0018      	movs	r0, r3
    2b20:	3008      	adds	r0, #8
    2b22:	0140      	lsls	r0, r0, #5
    2b24:	1812      	adds	r2, r2, r0
    2b26:	2040      	movs	r0, #64	; 0x40
    2b28:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2b2a:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2b2c:	784f      	ldrb	r7, [r1, #1]
    2b2e:	005d      	lsls	r5, r3, #1
    2b30:	18ad      	adds	r5, r5, r2
    2b32:	012d      	lsls	r5, r5, #4
    2b34:	4e4f      	ldr	r6, [pc, #316]	; (2c74 <usb_device_endpoint_set_config+0x23c>)
    2b36:	1975      	adds	r5, r6, r5
    2b38:	6868      	ldr	r0, [r5, #4]
    2b3a:	2407      	movs	r4, #7
    2b3c:	403c      	ands	r4, r7
    2b3e:	0724      	lsls	r4, r4, #28
    2b40:	4e4d      	ldr	r6, [pc, #308]	; (2c78 <usb_device_endpoint_set_config+0x240>)
    2b42:	4030      	ands	r0, r6
    2b44:	4320      	orrs	r0, r4
    2b46:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    2b48:	7889      	ldrb	r1, [r1, #2]
    2b4a:	2900      	cmp	r1, #0
    2b4c:	d000      	beq.n	2b50 <usb_device_endpoint_set_config+0x118>
    2b4e:	e088      	b.n	2c62 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2b50:	005b      	lsls	r3, r3, #1
    2b52:	189b      	adds	r3, r3, r2
    2b54:	011b      	lsls	r3, r3, #4
    2b56:	4a47      	ldr	r2, [pc, #284]	; (2c74 <usb_device_endpoint_set_config+0x23c>)
    2b58:	18d3      	adds	r3, r2, r3
    2b5a:	685a      	ldr	r2, [r3, #4]
    2b5c:	0052      	lsls	r2, r2, #1
    2b5e:	0852      	lsrs	r2, r2, #1
    2b60:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    2b62:	2200      	movs	r2, #0
}
    2b64:	0010      	movs	r0, r2
    2b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b68:	015d      	lsls	r5, r3, #5
    2b6a:	6802      	ldr	r2, [r0, #0]
    2b6c:	4694      	mov	ip, r2
    2b6e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2b70:	2280      	movs	r2, #128	; 0x80
    2b72:	0052      	lsls	r2, r2, #1
    2b74:	5caf      	ldrb	r7, [r5, r2]
    2b76:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2b78:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2b7a:	4237      	tst	r7, r6
    2b7c:	d1f2      	bne.n	2b64 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    2b7e:	3690      	adds	r6, #144	; 0x90
    2b80:	5daa      	ldrb	r2, [r5, r6]
    2b82:	2720      	movs	r7, #32
    2b84:	433a      	orrs	r2, r7
    2b86:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2b88:	6802      	ldr	r2, [r0, #0]
    2b8a:	0018      	movs	r0, r3
    2b8c:	3008      	adds	r0, #8
    2b8e:	0140      	lsls	r0, r0, #5
    2b90:	1812      	adds	r2, r2, r0
    2b92:	2080      	movs	r0, #128	; 0x80
    2b94:	7110      	strb	r0, [r2, #4]
    2b96:	e7c8      	b.n	2b2a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2b98:	2c00      	cmp	r4, #0
    2b9a:	db17      	blt.n	2bcc <usb_device_endpoint_set_config+0x194>
    2b9c:	015d      	lsls	r5, r3, #5
    2b9e:	6802      	ldr	r2, [r0, #0]
    2ba0:	4694      	mov	ip, r2
    2ba2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2ba4:	2280      	movs	r2, #128	; 0x80
    2ba6:	0052      	lsls	r2, r2, #1
    2ba8:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    2baa:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2bac:	0776      	lsls	r6, r6, #29
    2bae:	d1d9      	bne.n	2b64 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    2bb0:	2680      	movs	r6, #128	; 0x80
    2bb2:	0076      	lsls	r6, r6, #1
    2bb4:	5daa      	ldrb	r2, [r5, r6]
    2bb6:	2703      	movs	r7, #3
    2bb8:	433a      	orrs	r2, r7
    2bba:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2bbc:	6802      	ldr	r2, [r0, #0]
    2bbe:	0018      	movs	r0, r3
    2bc0:	3008      	adds	r0, #8
    2bc2:	0140      	lsls	r0, r0, #5
    2bc4:	1812      	adds	r2, r2, r0
    2bc6:	2040      	movs	r0, #64	; 0x40
    2bc8:	7150      	strb	r0, [r2, #5]
    2bca:	e7ae      	b.n	2b2a <usb_device_endpoint_set_config+0xf2>
    2bcc:	015d      	lsls	r5, r3, #5
    2bce:	6802      	ldr	r2, [r0, #0]
    2bd0:	4694      	mov	ip, r2
    2bd2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2bd4:	2280      	movs	r2, #128	; 0x80
    2bd6:	0052      	lsls	r2, r2, #1
    2bd8:	5caf      	ldrb	r7, [r5, r2]
    2bda:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2bdc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2bde:	4237      	tst	r7, r6
    2be0:	d1c0      	bne.n	2b64 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2be2:	3690      	adds	r6, #144	; 0x90
    2be4:	5daa      	ldrb	r2, [r5, r6]
    2be6:	2730      	movs	r7, #48	; 0x30
    2be8:	433a      	orrs	r2, r7
    2bea:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2bec:	6802      	ldr	r2, [r0, #0]
    2bee:	0018      	movs	r0, r3
    2bf0:	3008      	adds	r0, #8
    2bf2:	0140      	lsls	r0, r0, #5
    2bf4:	1812      	adds	r2, r2, r0
    2bf6:	2080      	movs	r0, #128	; 0x80
    2bf8:	7110      	strb	r0, [r2, #4]
    2bfa:	e796      	b.n	2b2a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2bfc:	2c00      	cmp	r4, #0
    2bfe:	db17      	blt.n	2c30 <usb_device_endpoint_set_config+0x1f8>
    2c00:	015d      	lsls	r5, r3, #5
    2c02:	6802      	ldr	r2, [r0, #0]
    2c04:	4694      	mov	ip, r2
    2c06:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2c08:	2280      	movs	r2, #128	; 0x80
    2c0a:	0052      	lsls	r2, r2, #1
    2c0c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    2c0e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2c10:	0776      	lsls	r6, r6, #29
    2c12:	d1a7      	bne.n	2b64 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2c14:	2680      	movs	r6, #128	; 0x80
    2c16:	0076      	lsls	r6, r6, #1
    2c18:	5daa      	ldrb	r2, [r5, r6]
    2c1a:	2704      	movs	r7, #4
    2c1c:	433a      	orrs	r2, r7
    2c1e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2c20:	6802      	ldr	r2, [r0, #0]
    2c22:	0018      	movs	r0, r3
    2c24:	3008      	adds	r0, #8
    2c26:	0140      	lsls	r0, r0, #5
    2c28:	1812      	adds	r2, r2, r0
    2c2a:	2040      	movs	r0, #64	; 0x40
    2c2c:	7150      	strb	r0, [r2, #5]
    2c2e:	e77c      	b.n	2b2a <usb_device_endpoint_set_config+0xf2>
    2c30:	015d      	lsls	r5, r3, #5
    2c32:	6802      	ldr	r2, [r0, #0]
    2c34:	4694      	mov	ip, r2
    2c36:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2c38:	2280      	movs	r2, #128	; 0x80
    2c3a:	0052      	lsls	r2, r2, #1
    2c3c:	5caf      	ldrb	r7, [r5, r2]
    2c3e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2c40:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2c42:	4237      	tst	r7, r6
    2c44:	d000      	beq.n	2c48 <usb_device_endpoint_set_config+0x210>
    2c46:	e78d      	b.n	2b64 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2c48:	3690      	adds	r6, #144	; 0x90
    2c4a:	5daa      	ldrb	r2, [r5, r6]
    2c4c:	2740      	movs	r7, #64	; 0x40
    2c4e:	433a      	orrs	r2, r7
    2c50:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2c52:	6802      	ldr	r2, [r0, #0]
    2c54:	0018      	movs	r0, r3
    2c56:	3008      	adds	r0, #8
    2c58:	0140      	lsls	r0, r0, #5
    2c5a:	1812      	adds	r2, r2, r0
    2c5c:	2080      	movs	r0, #128	; 0x80
    2c5e:	7110      	strb	r0, [r2, #4]
    2c60:	e763      	b.n	2b2a <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2c62:	6869      	ldr	r1, [r5, #4]
    2c64:	2380      	movs	r3, #128	; 0x80
    2c66:	061b      	lsls	r3, r3, #24
    2c68:	430b      	orrs	r3, r1
    2c6a:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    2c6c:	2200      	movs	r2, #0
    2c6e:	e779      	b.n	2b64 <usb_device_endpoint_set_config+0x12c>
    2c70:	00004020 	.word	0x00004020
    2c74:	20000560 	.word	0x20000560
    2c78:	8fffffff 	.word	0x8fffffff

00002c7c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2c7c:	230f      	movs	r3, #15
    2c7e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    2c80:	b249      	sxtb	r1, r1
    2c82:	2900      	cmp	r1, #0
    2c84:	db0a      	blt.n	2c9c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2c86:	3308      	adds	r3, #8
    2c88:	015b      	lsls	r3, r3, #5
    2c8a:	6802      	ldr	r2, [r0, #0]
    2c8c:	18d2      	adds	r2, r2, r3
    2c8e:	2140      	movs	r1, #64	; 0x40
    2c90:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2c92:	6802      	ldr	r2, [r0, #0]
    2c94:	18d3      	adds	r3, r2, r3
    2c96:	2201      	movs	r2, #1
    2c98:	71da      	strb	r2, [r3, #7]
	}
}
    2c9a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2c9c:	3308      	adds	r3, #8
    2c9e:	015b      	lsls	r3, r3, #5
    2ca0:	6802      	ldr	r2, [r0, #0]
    2ca2:	18d2      	adds	r2, r2, r3
    2ca4:	2180      	movs	r1, #128	; 0x80
    2ca6:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2ca8:	6802      	ldr	r2, [r0, #0]
    2caa:	18d3      	adds	r3, r2, r3
    2cac:	2202      	movs	r2, #2
    2cae:	71da      	strb	r2, [r3, #7]
    2cb0:	e7f3      	b.n	2c9a <usb_device_endpoint_abort_job+0x1e>

00002cb2 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2cb2:	230f      	movs	r3, #15
    2cb4:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2cb6:	b249      	sxtb	r1, r1
    2cb8:	2900      	cmp	r1, #0
    2cba:	db07      	blt.n	2ccc <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2cbc:	6802      	ldr	r2, [r0, #0]
    2cbe:	3308      	adds	r3, #8
    2cc0:	015b      	lsls	r3, r3, #5
    2cc2:	18d3      	adds	r3, r2, r3
    2cc4:	7998      	ldrb	r0, [r3, #6]
    2cc6:	06c0      	lsls	r0, r0, #27
    2cc8:	0fc0      	lsrs	r0, r0, #31
	}
}
    2cca:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2ccc:	6802      	ldr	r2, [r0, #0]
    2cce:	3308      	adds	r3, #8
    2cd0:	015b      	lsls	r3, r3, #5
    2cd2:	18d3      	adds	r3, r2, r3
    2cd4:	7998      	ldrb	r0, [r3, #6]
    2cd6:	0680      	lsls	r0, r0, #26
    2cd8:	0fc0      	lsrs	r0, r0, #31
    2cda:	e7f6      	b.n	2cca <usb_device_endpoint_is_halted+0x18>

00002cdc <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2cdc:	230f      	movs	r3, #15
    2cde:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    2ce0:	b249      	sxtb	r1, r1
    2ce2:	2900      	cmp	r1, #0
    2ce4:	db06      	blt.n	2cf4 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2ce6:	6802      	ldr	r2, [r0, #0]
    2ce8:	3308      	adds	r3, #8
    2cea:	015b      	lsls	r3, r3, #5
    2cec:	18d3      	adds	r3, r2, r3
    2cee:	2210      	movs	r2, #16
    2cf0:	715a      	strb	r2, [r3, #5]
	}
}
    2cf2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2cf4:	6802      	ldr	r2, [r0, #0]
    2cf6:	3308      	adds	r3, #8
    2cf8:	015b      	lsls	r3, r3, #5
    2cfa:	18d3      	adds	r3, r2, r3
    2cfc:	2220      	movs	r2, #32
    2cfe:	715a      	strb	r2, [r3, #5]
    2d00:	e7f7      	b.n	2cf2 <usb_device_endpoint_set_halt+0x16>

00002d02 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    2d02:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2d04:	230f      	movs	r3, #15
    2d06:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2d08:	b249      	sxtb	r1, r1
    2d0a:	2900      	cmp	r1, #0
    2d0c:	db1d      	blt.n	2d4a <usb_device_endpoint_clear_halt+0x48>
    2d0e:	0159      	lsls	r1, r3, #5
    2d10:	6802      	ldr	r2, [r0, #0]
    2d12:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    2d14:	2483      	movs	r4, #131	; 0x83
    2d16:	0064      	lsls	r4, r4, #1
    2d18:	5d14      	ldrb	r4, [r2, r4]
    2d1a:	06e4      	lsls	r4, r4, #27
    2d1c:	d514      	bpl.n	2d48 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    2d1e:	2510      	movs	r5, #16
    2d20:	2482      	movs	r4, #130	; 0x82
    2d22:	0064      	lsls	r4, r4, #1
    2d24:	5515      	strb	r5, [r2, r4]
    2d26:	6802      	ldr	r2, [r0, #0]
    2d28:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2d2a:	2108      	movs	r1, #8
    2d2c:	31ff      	adds	r1, #255	; 0xff
    2d2e:	5c51      	ldrb	r1, [r2, r1]
    2d30:	0689      	lsls	r1, r1, #26
    2d32:	d509      	bpl.n	2d48 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2d34:	3ce4      	subs	r4, #228	; 0xe4
    2d36:	2108      	movs	r1, #8
    2d38:	31ff      	adds	r1, #255	; 0xff
    2d3a:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    2d3c:	6802      	ldr	r2, [r0, #0]
    2d3e:	3308      	adds	r3, #8
    2d40:	015b      	lsls	r3, r3, #5
    2d42:	18d3      	adds	r3, r2, r3
    2d44:	2201      	movs	r2, #1
    2d46:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    2d48:	bd30      	pop	{r4, r5, pc}
    2d4a:	0159      	lsls	r1, r3, #5
    2d4c:	6802      	ldr	r2, [r0, #0]
    2d4e:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    2d50:	2483      	movs	r4, #131	; 0x83
    2d52:	0064      	lsls	r4, r4, #1
    2d54:	5d14      	ldrb	r4, [r2, r4]
    2d56:	06a4      	lsls	r4, r4, #26
    2d58:	d5f6      	bpl.n	2d48 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    2d5a:	2520      	movs	r5, #32
    2d5c:	2482      	movs	r4, #130	; 0x82
    2d5e:	0064      	lsls	r4, r4, #1
    2d60:	5515      	strb	r5, [r2, r4]
    2d62:	6802      	ldr	r2, [r0, #0]
    2d64:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2d66:	2108      	movs	r1, #8
    2d68:	31ff      	adds	r1, #255	; 0xff
    2d6a:	5c51      	ldrb	r1, [r2, r1]
    2d6c:	0649      	lsls	r1, r1, #25
    2d6e:	d5eb      	bpl.n	2d48 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2d70:	3cc4      	subs	r4, #196	; 0xc4
    2d72:	2108      	movs	r1, #8
    2d74:	31ff      	adds	r1, #255	; 0xff
    2d76:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    2d78:	6802      	ldr	r2, [r0, #0]
    2d7a:	3308      	adds	r3, #8
    2d7c:	015b      	lsls	r3, r3, #5
    2d7e:	18d3      	adds	r3, r2, r3
    2d80:	2202      	movs	r2, #2
    2d82:	711a      	strb	r2, [r3, #4]
    2d84:	e7e0      	b.n	2d48 <usb_device_endpoint_clear_halt+0x46>
	...

00002d88 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2d88:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2d8a:	000c      	movs	r4, r1
    2d8c:	3408      	adds	r4, #8
    2d8e:	0164      	lsls	r4, r4, #5
    2d90:	6805      	ldr	r5, [r0, #0]
    2d92:	5d64      	ldrb	r4, [r4, r5]
    2d94:	0664      	lsls	r4, r4, #25
    2d96:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2d98:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2d9a:	2c00      	cmp	r4, #0
    2d9c:	d101      	bne.n	2da2 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    2d9e:	0028      	movs	r0, r5
    2da0:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    2da2:	014c      	lsls	r4, r1, #5
    2da4:	4d0b      	ldr	r5, [pc, #44]	; (2dd4 <usb_device_endpoint_write_buffer_job+0x4c>)
    2da6:	192d      	adds	r5, r5, r4
    2da8:	002c      	movs	r4, r5
    2daa:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2dac:	696a      	ldr	r2, [r5, #20]
    2dae:	4d0a      	ldr	r5, [pc, #40]	; (2dd8 <usb_device_endpoint_write_buffer_job+0x50>)
    2db0:	402a      	ands	r2, r5
    2db2:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    2db4:	6962      	ldr	r2, [r4, #20]
    2db6:	049b      	lsls	r3, r3, #18
    2db8:	0c9b      	lsrs	r3, r3, #18
    2dba:	0b92      	lsrs	r2, r2, #14
    2dbc:	0392      	lsls	r2, r2, #14
    2dbe:	4313      	orrs	r3, r2
    2dc0:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2dc2:	6803      	ldr	r3, [r0, #0]
    2dc4:	3108      	adds	r1, #8
    2dc6:	0149      	lsls	r1, r1, #5
    2dc8:	1859      	adds	r1, r3, r1
    2dca:	2380      	movs	r3, #128	; 0x80
    2dcc:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    2dce:	2500      	movs	r5, #0
    2dd0:	e7e5      	b.n	2d9e <usb_device_endpoint_write_buffer_job+0x16>
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	20000560 	.word	0x20000560
    2dd8:	f0003fff 	.word	0xf0003fff

00002ddc <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2ddc:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2dde:	000c      	movs	r4, r1
    2de0:	3408      	adds	r4, #8
    2de2:	0164      	lsls	r4, r4, #5
    2de4:	6805      	ldr	r5, [r0, #0]
    2de6:	5d64      	ldrb	r4, [r4, r5]
    2de8:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2dea:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2dec:	2c00      	cmp	r4, #0
    2dee:	d101      	bne.n	2df4 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    2df0:	0028      	movs	r0, r5
    2df2:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2df4:	4c0b      	ldr	r4, [pc, #44]	; (2e24 <usb_device_endpoint_read_buffer_job+0x48>)
    2df6:	014d      	lsls	r5, r1, #5
    2df8:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    2dfa:	1962      	adds	r2, r4, r5
    2dfc:	6854      	ldr	r4, [r2, #4]
    2dfe:	049b      	lsls	r3, r3, #18
    2e00:	091b      	lsrs	r3, r3, #4
    2e02:	4d09      	ldr	r5, [pc, #36]	; (2e28 <usb_device_endpoint_read_buffer_job+0x4c>)
    2e04:	402c      	ands	r4, r5
    2e06:	4323      	orrs	r3, r4
    2e08:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2e0a:	6853      	ldr	r3, [r2, #4]
    2e0c:	0b9b      	lsrs	r3, r3, #14
    2e0e:	039b      	lsls	r3, r3, #14
    2e10:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2e12:	6803      	ldr	r3, [r0, #0]
    2e14:	3108      	adds	r1, #8
    2e16:	0149      	lsls	r1, r1, #5
    2e18:	1859      	adds	r1, r3, r1
    2e1a:	2340      	movs	r3, #64	; 0x40
    2e1c:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    2e1e:	2500      	movs	r5, #0
    2e20:	e7e6      	b.n	2df0 <usb_device_endpoint_read_buffer_job+0x14>
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	20000560 	.word	0x20000560
    2e28:	f0003fff 	.word	0xf0003fff

00002e2c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2e2c:	4b09      	ldr	r3, [pc, #36]	; (2e54 <usb_device_endpoint_setup_buffer_job+0x28>)
    2e2e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    2e30:	685a      	ldr	r2, [r3, #4]
    2e32:	4909      	ldr	r1, [pc, #36]	; (2e58 <usb_device_endpoint_setup_buffer_job+0x2c>)
    2e34:	4011      	ands	r1, r2
    2e36:	2280      	movs	r2, #128	; 0x80
    2e38:	0292      	lsls	r2, r2, #10
    2e3a:	430a      	orrs	r2, r1
    2e3c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2e3e:	685a      	ldr	r2, [r3, #4]
    2e40:	0b92      	lsrs	r2, r2, #14
    2e42:	0392      	lsls	r2, r2, #14
    2e44:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2e46:	6802      	ldr	r2, [r0, #0]
    2e48:	2140      	movs	r1, #64	; 0x40
    2e4a:	2382      	movs	r3, #130	; 0x82
    2e4c:	005b      	lsls	r3, r3, #1
    2e4e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    2e50:	2000      	movs	r0, #0
    2e52:	4770      	bx	lr
    2e54:	20000560 	.word	0x20000560
    2e58:	f0003fff 	.word	0xf0003fff

00002e5c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    2e5c:	6802      	ldr	r2, [r0, #0]
    2e5e:	7813      	ldrb	r3, [r2, #0]
    2e60:	2102      	movs	r1, #2
    2e62:	430b      	orrs	r3, r1
    2e64:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    2e66:	6802      	ldr	r2, [r0, #0]
    2e68:	7893      	ldrb	r3, [r2, #2]
    2e6a:	2b02      	cmp	r3, #2
    2e6c:	d0fc      	beq.n	2e68 <usb_enable+0xc>
}
    2e6e:	4770      	bx	lr

00002e70 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    2e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e72:	46de      	mov	lr, fp
    2e74:	4657      	mov	r7, sl
    2e76:	464e      	mov	r6, r9
    2e78:	4645      	mov	r5, r8
    2e7a:	b5e0      	push	{r5, r6, r7, lr}
    2e7c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    2e7e:	4bc4      	ldr	r3, [pc, #784]	; (3190 <USB_Handler+0x320>)
    2e80:	681f      	ldr	r7, [r3, #0]
    2e82:	683d      	ldr	r5, [r7, #0]
    2e84:	782b      	ldrb	r3, [r5, #0]
    2e86:	09db      	lsrs	r3, r3, #7
    2e88:	d114      	bne.n	2eb4 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    2e8a:	8c2e      	ldrh	r6, [r5, #32]
    2e8c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    2e8e:	2e00      	cmp	r6, #0
    2e90:	d000      	beq.n	2e94 <USB_Handler+0x24>
    2e92:	e22d      	b.n	32f0 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2e94:	8bae      	ldrh	r6, [r5, #28]
    2e96:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    2e98:	23ab      	movs	r3, #171	; 0xab
    2e9a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    2e9c:	5afb      	ldrh	r3, [r7, r3]
    2e9e:	22aa      	movs	r2, #170	; 0xaa
    2ea0:	0052      	lsls	r2, r2, #1
    2ea2:	5abd      	ldrh	r5, [r7, r2]
    2ea4:	401d      	ands	r5, r3
    2ea6:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2ea8:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    2eaa:	4fba      	ldr	r7, [pc, #744]	; (3194 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2eac:	4bb8      	ldr	r3, [pc, #736]	; (3190 <USB_Handler+0x320>)
    2eae:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2eb0:	4698      	mov	r8, r3
    2eb2:	e208      	b.n	32c6 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    2eb4:	8c2b      	ldrh	r3, [r5, #32]
    2eb6:	b29b      	uxth	r3, r3
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d100      	bne.n	2ebe <USB_Handler+0x4e>
    2ebc:	e13d      	b.n	313a <USB_Handler+0x2ca>
    2ebe:	8c28      	ldrh	r0, [r5, #32]
    2ec0:	b280      	uxth	r0, r0
    2ec2:	4bb5      	ldr	r3, [pc, #724]	; (3198 <USB_Handler+0x328>)
    2ec4:	4798      	blx	r3
    2ec6:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    2ec8:	281f      	cmp	r0, #31
    2eca:	d900      	bls.n	2ece <USB_Handler+0x5e>
    2ecc:	e135      	b.n	313a <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    2ece:	0003      	movs	r3, r0
    2ed0:	3308      	adds	r3, #8
    2ed2:	015b      	lsls	r3, r3, #5
    2ed4:	18ed      	adds	r5, r5, r3
    2ed6:	79ed      	ldrb	r5, [r5, #7]
    2ed8:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    2eda:	07ab      	lsls	r3, r5, #30
    2edc:	d041      	beq.n	2f62 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2ede:	4aaf      	ldr	r2, [pc, #700]	; (319c <USB_Handler+0x32c>)
    2ee0:	2301      	movs	r3, #1
    2ee2:	4083      	lsls	r3, r0
    2ee4:	6811      	ldr	r1, [r2, #0]
    2ee6:	4399      	bics	r1, r3
    2ee8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2eea:	0003      	movs	r3, r0
    2eec:	3308      	adds	r3, #8
    2eee:	015b      	lsls	r3, r3, #5
    2ef0:	683a      	ldr	r2, [r7, #0]
    2ef2:	4694      	mov	ip, r2
    2ef4:	4463      	add	r3, ip
    2ef6:	2203      	movs	r2, #3
    2ef8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2efa:	183b      	adds	r3, r7, r0
    2efc:	33ae      	adds	r3, #174	; 0xae
    2efe:	781b      	ldrb	r3, [r3, #0]
    2f00:	07db      	lsls	r3, r3, #31
    2f02:	d52e      	bpl.n	2f62 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    2f04:	4ba6      	ldr	r3, [pc, #664]	; (31a0 <USB_Handler+0x330>)
    2f06:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    2f08:	683a      	ldr	r2, [r7, #0]
    2f0a:	0003      	movs	r3, r0
    2f0c:	3308      	adds	r3, #8
    2f0e:	015b      	lsls	r3, r3, #5
    2f10:	5c9b      	ldrb	r3, [r3, r2]
    2f12:	079b      	lsls	r3, r3, #30
    2f14:	0f9b      	lsrs	r3, r3, #30
    2f16:	2b01      	cmp	r3, #1
    2f18:	d100      	bne.n	2f1c <USB_Handler+0xac>
    2f1a:	e094      	b.n	3046 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2f1c:	0142      	lsls	r2, r0, #5
    2f1e:	4ba1      	ldr	r3, [pc, #644]	; (31a4 <USB_Handler+0x334>)
    2f20:	189b      	adds	r3, r3, r2
    2f22:	685a      	ldr	r2, [r3, #4]
    2f24:	0112      	lsls	r2, r2, #4
    2f26:	0c92      	lsrs	r2, r2, #18
    2f28:	b290      	uxth	r0, r2
    2f2a:	499d      	ldr	r1, [pc, #628]	; (31a0 <USB_Handler+0x330>)
    2f2c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2f2e:	685a      	ldr	r2, [r3, #4]
    2f30:	0492      	lsls	r2, r2, #18
    2f32:	0c92      	lsrs	r2, r2, #18
    2f34:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2f36:	685a      	ldr	r2, [r3, #4]
    2f38:	499b      	ldr	r1, [pc, #620]	; (31a8 <USB_Handler+0x338>)
    2f3a:	400a      	ands	r2, r1
    2f3c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    2f3e:	2800      	cmp	r0, #0
    2f40:	d107      	bne.n	2f52 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2f42:	0162      	lsls	r2, r4, #5
    2f44:	4b97      	ldr	r3, [pc, #604]	; (31a4 <USB_Handler+0x334>)
    2f46:	189b      	adds	r3, r3, r2
    2f48:	685b      	ldr	r3, [r3, #4]
    2f4a:	049b      	lsls	r3, r3, #18
    2f4c:	0c9b      	lsrs	r3, r3, #18
    2f4e:	4a94      	ldr	r2, [pc, #592]	; (31a0 <USB_Handler+0x330>)
    2f50:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    2f52:	4b8f      	ldr	r3, [pc, #572]	; (3190 <USB_Handler+0x320>)
    2f54:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    2f56:	1ca3      	adds	r3, r4, #2
    2f58:	011b      	lsls	r3, r3, #4
    2f5a:	18c3      	adds	r3, r0, r3
    2f5c:	685b      	ldr	r3, [r3, #4]
    2f5e:	4990      	ldr	r1, [pc, #576]	; (31a0 <USB_Handler+0x330>)
    2f60:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    2f62:	076b      	lsls	r3, r5, #29
    2f64:	d51f      	bpl.n	2fa6 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    2f66:	4b8a      	ldr	r3, [pc, #552]	; (3190 <USB_Handler+0x320>)
    2f68:	6818      	ldr	r0, [r3, #0]
    2f6a:	6802      	ldr	r2, [r0, #0]
    2f6c:	0023      	movs	r3, r4
    2f6e:	3308      	adds	r3, #8
    2f70:	015b      	lsls	r3, r3, #5
    2f72:	5c9b      	ldrb	r3, [r3, r2]
    2f74:	069b      	lsls	r3, r3, #26
    2f76:	0f5b      	lsrs	r3, r3, #29
    2f78:	2b02      	cmp	r3, #2
    2f7a:	d075      	beq.n	3068 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    2f7c:	0023      	movs	r3, r4
    2f7e:	3308      	adds	r3, #8
    2f80:	015b      	lsls	r3, r3, #5
    2f82:	5c9b      	ldrb	r3, [r3, r2]
    2f84:	069b      	lsls	r3, r3, #26
    2f86:	0f5b      	lsrs	r3, r3, #29
    2f88:	2b03      	cmp	r3, #3
    2f8a:	d100      	bne.n	2f8e <USB_Handler+0x11e>
    2f8c:	e09e      	b.n	30cc <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    2f8e:	0162      	lsls	r2, r4, #5
    2f90:	4b84      	ldr	r3, [pc, #528]	; (31a4 <USB_Handler+0x334>)
    2f92:	189b      	adds	r3, r3, r2
    2f94:	2200      	movs	r2, #0
    2f96:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2f98:	6803      	ldr	r3, [r0, #0]
    2f9a:	0022      	movs	r2, r4
    2f9c:	3208      	adds	r2, #8
    2f9e:	0152      	lsls	r2, r2, #5
    2fa0:	189b      	adds	r3, r3, r2
    2fa2:	2204      	movs	r2, #4
    2fa4:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2fa6:	072b      	lsls	r3, r5, #28
    2fa8:	d515      	bpl.n	2fd6 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2faa:	4a7c      	ldr	r2, [pc, #496]	; (319c <USB_Handler+0x32c>)
    2fac:	2301      	movs	r3, #1
    2fae:	40a3      	lsls	r3, r4
    2fb0:	6811      	ldr	r1, [r2, #0]
    2fb2:	4399      	bics	r1, r3
    2fb4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2fb6:	4b76      	ldr	r3, [pc, #472]	; (3190 <USB_Handler+0x320>)
    2fb8:	6818      	ldr	r0, [r3, #0]
    2fba:	0023      	movs	r3, r4
    2fbc:	3308      	adds	r3, #8
    2fbe:	015b      	lsls	r3, r3, #5
    2fc0:	6802      	ldr	r2, [r0, #0]
    2fc2:	4694      	mov	ip, r2
    2fc4:	4463      	add	r3, ip
    2fc6:	2208      	movs	r2, #8
    2fc8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2fca:	1903      	adds	r3, r0, r4
    2fcc:	33ae      	adds	r3, #174	; 0xae
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	079b      	lsls	r3, r3, #30
    2fd2:	d500      	bpl.n	2fd6 <USB_Handler+0x166>
    2fd4:	e094      	b.n	3100 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    2fd6:	06eb      	lsls	r3, r5, #27
    2fd8:	d515      	bpl.n	3006 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2fda:	4a70      	ldr	r2, [pc, #448]	; (319c <USB_Handler+0x32c>)
    2fdc:	2301      	movs	r3, #1
    2fde:	40a3      	lsls	r3, r4
    2fe0:	6811      	ldr	r1, [r2, #0]
    2fe2:	4399      	bics	r1, r3
    2fe4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2fe6:	4b6a      	ldr	r3, [pc, #424]	; (3190 <USB_Handler+0x320>)
    2fe8:	6818      	ldr	r0, [r3, #0]
    2fea:	0023      	movs	r3, r4
    2fec:	3308      	adds	r3, #8
    2fee:	015b      	lsls	r3, r3, #5
    2ff0:	6802      	ldr	r2, [r0, #0]
    2ff2:	4694      	mov	ip, r2
    2ff4:	4463      	add	r3, ip
    2ff6:	2210      	movs	r2, #16
    2ff8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2ffa:	1903      	adds	r3, r0, r4
    2ffc:	33ae      	adds	r3, #174	; 0xae
    2ffe:	781b      	ldrb	r3, [r3, #0]
    3000:	075b      	lsls	r3, r3, #29
    3002:	d500      	bpl.n	3006 <USB_Handler+0x196>
    3004:	e08a      	b.n	311c <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3006:	06ab      	lsls	r3, r5, #26
    3008:	d400      	bmi.n	300c <USB_Handler+0x19c>
    300a:	e12f      	b.n	326c <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    300c:	4a63      	ldr	r2, [pc, #396]	; (319c <USB_Handler+0x32c>)
    300e:	2301      	movs	r3, #1
    3010:	40a3      	lsls	r3, r4
    3012:	6811      	ldr	r1, [r2, #0]
    3014:	4399      	bics	r1, r3
    3016:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3018:	4b5d      	ldr	r3, [pc, #372]	; (3190 <USB_Handler+0x320>)
    301a:	6818      	ldr	r0, [r3, #0]
    301c:	0023      	movs	r3, r4
    301e:	3308      	adds	r3, #8
    3020:	015b      	lsls	r3, r3, #5
    3022:	6802      	ldr	r2, [r0, #0]
    3024:	4694      	mov	ip, r2
    3026:	4463      	add	r3, ip
    3028:	2220      	movs	r2, #32
    302a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    302c:	1903      	adds	r3, r0, r4
    302e:	33ae      	adds	r3, #174	; 0xae
    3030:	781b      	ldrb	r3, [r3, #0]
    3032:	071b      	lsls	r3, r3, #28
    3034:	d400      	bmi.n	3038 <USB_Handler+0x1c8>
    3036:	e119      	b.n	326c <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    3038:	4959      	ldr	r1, [pc, #356]	; (31a0 <USB_Handler+0x330>)
    303a:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    303c:	0124      	lsls	r4, r4, #4
    303e:	1904      	adds	r4, r0, r4
    3040:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3042:	4798      	blx	r3
    3044:	e112      	b.n	326c <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3046:	0142      	lsls	r2, r0, #5
    3048:	4b56      	ldr	r3, [pc, #344]	; (31a4 <USB_Handler+0x334>)
    304a:	189b      	adds	r3, r3, r2
    304c:	685a      	ldr	r2, [r3, #4]
    304e:	0492      	lsls	r2, r2, #18
    3050:	0c92      	lsrs	r2, r2, #18
    3052:	4953      	ldr	r1, [pc, #332]	; (31a0 <USB_Handler+0x330>)
    3054:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3056:	685a      	ldr	r2, [r3, #4]
    3058:	0112      	lsls	r2, r2, #4
    305a:	0c92      	lsrs	r2, r2, #18
    305c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    305e:	685a      	ldr	r2, [r3, #4]
    3060:	0b92      	lsrs	r2, r2, #14
    3062:	0392      	lsls	r2, r2, #14
    3064:	605a      	str	r2, [r3, #4]
    3066:	e774      	b.n	2f52 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3068:	0023      	movs	r3, r4
    306a:	3308      	adds	r3, #8
    306c:	015b      	lsls	r3, r3, #5
    306e:	5c9b      	ldrb	r3, [r3, r2]
    3070:	079b      	lsls	r3, r3, #30
    3072:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3074:	2b01      	cmp	r3, #1
    3076:	d181      	bne.n	2f7c <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3078:	0161      	lsls	r1, r4, #5
    307a:	4b4a      	ldr	r3, [pc, #296]	; (31a4 <USB_Handler+0x334>)
    307c:	185b      	adds	r3, r3, r1
    307e:	3308      	adds	r3, #8
    3080:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3082:	07db      	lsls	r3, r3, #31
    3084:	d400      	bmi.n	3088 <USB_Handler+0x218>
    3086:	e779      	b.n	2f7c <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    3088:	4a44      	ldr	r2, [pc, #272]	; (319c <USB_Handler+0x32c>)
    308a:	2301      	movs	r3, #1
    308c:	40a3      	lsls	r3, r4
    308e:	6811      	ldr	r1, [r2, #0]
    3090:	4399      	bics	r1, r3
    3092:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3094:	0162      	lsls	r2, r4, #5
    3096:	4b43      	ldr	r3, [pc, #268]	; (31a4 <USB_Handler+0x334>)
    3098:	189b      	adds	r3, r3, r2
    309a:	2200      	movs	r2, #0
    309c:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    309e:	0023      	movs	r3, r4
    30a0:	3308      	adds	r3, #8
    30a2:	015b      	lsls	r3, r3, #5
    30a4:	6802      	ldr	r2, [r0, #0]
    30a6:	4694      	mov	ip, r2
    30a8:	4463      	add	r3, ip
    30aa:	2204      	movs	r2, #4
    30ac:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    30ae:	1903      	adds	r3, r0, r4
    30b0:	33ae      	adds	r3, #174	; 0xae
    30b2:	781b      	ldrb	r3, [r3, #0]
    30b4:	079b      	lsls	r3, r3, #30
    30b6:	d400      	bmi.n	30ba <USB_Handler+0x24a>
    30b8:	e775      	b.n	2fa6 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    30ba:	4939      	ldr	r1, [pc, #228]	; (31a0 <USB_Handler+0x330>)
    30bc:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    30be:	2310      	movs	r3, #16
    30c0:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    30c2:	0123      	lsls	r3, r4, #4
    30c4:	18c3      	adds	r3, r0, r3
    30c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30c8:	4798      	blx	r3
    30ca:	e76c      	b.n	2fa6 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    30cc:	0023      	movs	r3, r4
    30ce:	3308      	adds	r3, #8
    30d0:	015b      	lsls	r3, r3, #5
    30d2:	5c9b      	ldrb	r3, [r3, r2]
    30d4:	079b      	lsls	r3, r3, #30
    30d6:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    30d8:	2b01      	cmp	r3, #1
    30da:	d000      	beq.n	30de <USB_Handler+0x26e>
    30dc:	e757      	b.n	2f8e <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    30de:	0162      	lsls	r2, r4, #5
    30e0:	4b30      	ldr	r3, [pc, #192]	; (31a4 <USB_Handler+0x334>)
    30e2:	189b      	adds	r3, r3, r2
    30e4:	2200      	movs	r2, #0
    30e6:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    30e8:	0023      	movs	r3, r4
    30ea:	3308      	adds	r3, #8
    30ec:	015b      	lsls	r3, r3, #5
    30ee:	6802      	ldr	r2, [r0, #0]
    30f0:	18d2      	adds	r2, r2, r3
    30f2:	2104      	movs	r1, #4
    30f4:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    30f6:	6802      	ldr	r2, [r0, #0]
    30f8:	18d3      	adds	r3, r2, r3
    30fa:	2210      	movs	r2, #16
    30fc:	715a      	strb	r2, [r3, #5]
    30fe:	e752      	b.n	2fa6 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    3100:	4927      	ldr	r1, [pc, #156]	; (31a0 <USB_Handler+0x330>)
    3102:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3104:	0162      	lsls	r2, r4, #5
    3106:	4b27      	ldr	r3, [pc, #156]	; (31a4 <USB_Handler+0x334>)
    3108:	189b      	adds	r3, r3, r2
    310a:	89db      	ldrh	r3, [r3, #14]
    310c:	221f      	movs	r2, #31
    310e:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3110:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3112:	0123      	lsls	r3, r4, #4
    3114:	18c3      	adds	r3, r0, r3
    3116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3118:	4798      	blx	r3
    311a:	e75c      	b.n	2fd6 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    311c:	4920      	ldr	r1, [pc, #128]	; (31a0 <USB_Handler+0x330>)
    311e:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3120:	0162      	lsls	r2, r4, #5
    3122:	4b20      	ldr	r3, [pc, #128]	; (31a4 <USB_Handler+0x334>)
    3124:	189b      	adds	r3, r3, r2
    3126:	685b      	ldr	r3, [r3, #4]
    3128:	011b      	lsls	r3, r3, #4
    312a:	0c9b      	lsrs	r3, r3, #18
    312c:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    312e:	0123      	lsls	r3, r4, #4
    3130:	18c3      	adds	r3, r0, r3
    3132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3134:	2100      	movs	r1, #0
    3136:	4798      	blx	r3
    3138:	e765      	b.n	3006 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    313a:	8bac      	ldrh	r4, [r5, #28]
    313c:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    313e:	0763      	lsls	r3, r4, #29
    3140:	d538      	bpl.n	31b4 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3142:	2304      	movs	r3, #4
    3144:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3146:	4b15      	ldr	r3, [pc, #84]	; (319c <USB_Handler+0x32c>)
    3148:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    314a:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    314c:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    314e:	2610      	movs	r6, #16
    3150:	e002      	b.n	3158 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3152:	3301      	adds	r3, #1
    3154:	2b08      	cmp	r3, #8
    3156:	d029      	beq.n	31ac <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3158:	0002      	movs	r2, r0
    315a:	409a      	lsls	r2, r3
    315c:	4215      	tst	r5, r2
    315e:	d0f8      	beq.n	3152 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3160:	6839      	ldr	r1, [r7, #0]
    3162:	001a      	movs	r2, r3
    3164:	3208      	adds	r2, #8
    3166:	0152      	lsls	r2, r2, #5
    3168:	5c52      	ldrb	r2, [r2, r1]
    316a:	0692      	lsls	r2, r2, #26
    316c:	0f52      	lsrs	r2, r2, #29
    316e:	2a03      	cmp	r2, #3
    3170:	d1ef      	bne.n	3152 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3172:	001a      	movs	r2, r3
    3174:	3208      	adds	r2, #8
    3176:	0152      	lsls	r2, r2, #5
    3178:	5c52      	ldrb	r2, [r2, r1]
    317a:	0792      	lsls	r2, r2, #30
    317c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    317e:	2a01      	cmp	r2, #1
    3180:	d1e7      	bne.n	3152 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3182:	001a      	movs	r2, r3
    3184:	3208      	adds	r2, #8
    3186:	0152      	lsls	r2, r2, #5
    3188:	1889      	adds	r1, r1, r2
    318a:	710e      	strb	r6, [r1, #4]
    318c:	e7e1      	b.n	3152 <USB_Handler+0x2e2>
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	20000190 	.word	0x20000190
    3194:	00004034 	.word	0x00004034
    3198:	00003b6d 	.word	0x00003b6d
    319c:	200001a0 	.word	0x200001a0
    31a0:	200001a4 	.word	0x200001a4
    31a4:	20000560 	.word	0x20000560
    31a8:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    31ac:	339d      	adds	r3, #157	; 0x9d
    31ae:	5cfb      	ldrb	r3, [r7, r3]
    31b0:	07db      	lsls	r3, r3, #31
    31b2:	d462      	bmi.n	327a <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    31b4:	0723      	lsls	r3, r4, #28
    31b6:	d50b      	bpl.n	31d0 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    31b8:	2200      	movs	r2, #0
    31ba:	4baf      	ldr	r3, [pc, #700]	; (3478 <USB_Handler+0x608>)
    31bc:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    31be:	4baf      	ldr	r3, [pc, #700]	; (347c <USB_Handler+0x60c>)
    31c0:	6818      	ldr	r0, [r3, #0]
    31c2:	2308      	movs	r3, #8
    31c4:	6802      	ldr	r2, [r0, #0]
    31c6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    31c8:	339d      	adds	r3, #157	; 0x9d
    31ca:	5cc3      	ldrb	r3, [r0, r3]
    31cc:	079b      	lsls	r3, r3, #30
    31ce:	d458      	bmi.n	3282 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    31d0:	0663      	lsls	r3, r4, #25
    31d2:	d508      	bpl.n	31e6 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    31d4:	4ba9      	ldr	r3, [pc, #676]	; (347c <USB_Handler+0x60c>)
    31d6:	6818      	ldr	r0, [r3, #0]
    31d8:	2340      	movs	r3, #64	; 0x40
    31da:	6802      	ldr	r2, [r0, #0]
    31dc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    31de:	3365      	adds	r3, #101	; 0x65
    31e0:	5cc3      	ldrb	r3, [r0, r3]
    31e2:	06db      	lsls	r3, r3, #27
    31e4:	d450      	bmi.n	3288 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    31e6:	06a3      	lsls	r3, r4, #26
    31e8:	d508      	bpl.n	31fc <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    31ea:	4ba4      	ldr	r3, [pc, #656]	; (347c <USB_Handler+0x60c>)
    31ec:	6818      	ldr	r0, [r3, #0]
    31ee:	2320      	movs	r3, #32
    31f0:	6802      	ldr	r2, [r0, #0]
    31f2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    31f4:	3385      	adds	r3, #133	; 0x85
    31f6:	5cc3      	ldrb	r3, [r0, r3]
    31f8:	071b      	lsls	r3, r3, #28
    31fa:	d448      	bmi.n	328e <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    31fc:	06e3      	lsls	r3, r4, #27
    31fe:	d508      	bpl.n	3212 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3200:	4b9e      	ldr	r3, [pc, #632]	; (347c <USB_Handler+0x60c>)
    3202:	6818      	ldr	r0, [r3, #0]
    3204:	2310      	movs	r3, #16
    3206:	6802      	ldr	r2, [r0, #0]
    3208:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    320a:	3395      	adds	r3, #149	; 0x95
    320c:	5cc3      	ldrb	r3, [r0, r3]
    320e:	075b      	lsls	r3, r3, #29
    3210:	d440      	bmi.n	3294 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3212:	0623      	lsls	r3, r4, #24
    3214:	d50b      	bpl.n	322e <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    3216:	2200      	movs	r2, #0
    3218:	4b97      	ldr	r3, [pc, #604]	; (3478 <USB_Handler+0x608>)
    321a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    321c:	4b97      	ldr	r3, [pc, #604]	; (347c <USB_Handler+0x60c>)
    321e:	6818      	ldr	r0, [r3, #0]
    3220:	2380      	movs	r3, #128	; 0x80
    3222:	6802      	ldr	r2, [r0, #0]
    3224:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3226:	3325      	adds	r3, #37	; 0x25
    3228:	5cc3      	ldrb	r3, [r0, r3]
    322a:	069b      	lsls	r3, r3, #26
    322c:	d435      	bmi.n	329a <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    322e:	05e3      	lsls	r3, r4, #23
    3230:	d50c      	bpl.n	324c <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    3232:	2200      	movs	r2, #0
    3234:	4b90      	ldr	r3, [pc, #576]	; (3478 <USB_Handler+0x608>)
    3236:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3238:	4b90      	ldr	r3, [pc, #576]	; (347c <USB_Handler+0x60c>)
    323a:	6818      	ldr	r0, [r3, #0]
    323c:	2380      	movs	r3, #128	; 0x80
    323e:	005b      	lsls	r3, r3, #1
    3240:	6802      	ldr	r2, [r0, #0]
    3242:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3244:	3b5b      	subs	r3, #91	; 0x5b
    3246:	5cc3      	ldrb	r3, [r0, r3]
    3248:	065b      	lsls	r3, r3, #25
    324a:	d429      	bmi.n	32a0 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    324c:	05a3      	lsls	r3, r4, #22
    324e:	d50d      	bpl.n	326c <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    3250:	2200      	movs	r2, #0
    3252:	4b89      	ldr	r3, [pc, #548]	; (3478 <USB_Handler+0x608>)
    3254:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3256:	4b89      	ldr	r3, [pc, #548]	; (347c <USB_Handler+0x60c>)
    3258:	6818      	ldr	r0, [r3, #0]
    325a:	2380      	movs	r3, #128	; 0x80
    325c:	009b      	lsls	r3, r3, #2
    325e:	6802      	ldr	r2, [r0, #0]
    3260:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3262:	3b5c      	subs	r3, #92	; 0x5c
    3264:	3bff      	subs	r3, #255	; 0xff
    3266:	5cc3      	ldrb	r3, [r0, r3]
    3268:	2b7f      	cmp	r3, #127	; 0x7f
    326a:	d81c      	bhi.n	32a6 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    326c:	b003      	add	sp, #12
    326e:	bc3c      	pop	{r2, r3, r4, r5}
    3270:	4690      	mov	r8, r2
    3272:	4699      	mov	r9, r3
    3274:	46a2      	mov	sl, r4
    3276:	46ab      	mov	fp, r5
    3278:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	0038      	movs	r0, r7
    327e:	4798      	blx	r3
    3280:	e798      	b.n	31b4 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3282:	6883      	ldr	r3, [r0, #8]
    3284:	4798      	blx	r3
    3286:	e7a3      	b.n	31d0 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3288:	6943      	ldr	r3, [r0, #20]
    328a:	4798      	blx	r3
    328c:	e7ab      	b.n	31e6 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    328e:	6903      	ldr	r3, [r0, #16]
    3290:	4798      	blx	r3
    3292:	e7b3      	b.n	31fc <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3294:	68c3      	ldr	r3, [r0, #12]
    3296:	4798      	blx	r3
    3298:	e7bb      	b.n	3212 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    329a:	6983      	ldr	r3, [r0, #24]
    329c:	4798      	blx	r3
    329e:	e7c6      	b.n	322e <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    32a0:	69c3      	ldr	r3, [r0, #28]
    32a2:	4798      	blx	r3
    32a4:	e7d2      	b.n	324c <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    32a6:	6a03      	ldr	r3, [r0, #32]
    32a8:	4798      	blx	r3
    32aa:	e7df      	b.n	326c <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    32ac:	0023      	movs	r3, r4
    32ae:	332e      	adds	r3, #46	; 0x2e
    32b0:	009b      	lsls	r3, r3, #2
    32b2:	4642      	mov	r2, r8
    32b4:	6812      	ldr	r2, [r2, #0]
    32b6:	589b      	ldr	r3, [r3, r2]
    32b8:	4971      	ldr	r1, [pc, #452]	; (3480 <USB_Handler+0x610>)
    32ba:	4642      	mov	r2, r8
    32bc:	6810      	ldr	r0, [r2, #0]
    32be:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    32c0:	3401      	adds	r4, #1
    32c2:	2c07      	cmp	r4, #7
    32c4:	d0d2      	beq.n	326c <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    32c6:	0063      	lsls	r3, r4, #1
    32c8:	5bdb      	ldrh	r3, [r3, r7]
    32ca:	4233      	tst	r3, r6
    32cc:	d003      	beq.n	32d6 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    32ce:	464a      	mov	r2, r9
    32d0:	6812      	ldr	r2, [r2, #0]
    32d2:	6812      	ldr	r2, [r2, #0]
    32d4:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    32d6:	422b      	tst	r3, r5
    32d8:	d0f2      	beq.n	32c0 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    32da:	2c06      	cmp	r4, #6
    32dc:	d1e6      	bne.n	32ac <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    32de:	4b69      	ldr	r3, [pc, #420]	; (3484 <USB_Handler+0x614>)
    32e0:	891b      	ldrh	r3, [r3, #8]
    32e2:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    32e4:	2280      	movs	r2, #128	; 0x80
    32e6:	0052      	lsls	r2, r2, #1
    32e8:	4013      	ands	r3, r2
    32ea:	4a65      	ldr	r2, [pc, #404]	; (3480 <USB_Handler+0x610>)
    32ec:	6013      	str	r3, [r2, #0]
    32ee:	e7dd      	b.n	32ac <USB_Handler+0x43c>
    32f0:	003c      	movs	r4, r7
    32f2:	3459      	adds	r4, #89	; 0x59
    32f4:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    32f6:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    32f8:	2201      	movs	r2, #1
    32fa:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    32fc:	325f      	adds	r2, #95	; 0x5f
    32fe:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3300:	3a50      	subs	r2, #80	; 0x50
    3302:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3304:	3a0d      	subs	r2, #13
    3306:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3308:	46b8      	mov	r8, r7
    330a:	002f      	movs	r7, r5
    330c:	e0c3      	b.n	3496 <USB_Handler+0x626>
    330e:	002a      	movs	r2, r5
    3310:	003d      	movs	r5, r7
    3312:	4647      	mov	r7, r8
    3314:	4690      	mov	r8, r2
    3316:	015b      	lsls	r3, r3, #5
    3318:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    331a:	2308      	movs	r3, #8
    331c:	33ff      	adds	r3, #255	; 0xff
    331e:	5ceb      	ldrb	r3, [r5, r3]
    3320:	065b      	lsls	r3, r3, #25
    3322:	d515      	bpl.n	3350 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3324:	2240      	movs	r2, #64	; 0x40
    3326:	2308      	movs	r3, #8
    3328:	33ff      	adds	r3, #255	; 0xff
    332a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    332c:	3b88      	subs	r3, #136	; 0x88
    332e:	3bff      	subs	r3, #255	; 0xff
    3330:	4642      	mov	r2, r8
    3332:	4313      	orrs	r3, r2
    3334:	4a54      	ldr	r2, [pc, #336]	; (3488 <USB_Handler+0x618>)
    3336:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3338:	2360      	movs	r3, #96	; 0x60
    333a:	420b      	tst	r3, r1
    333c:	d096      	beq.n	326c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    333e:	9b01      	ldr	r3, [sp, #4]
    3340:	011b      	lsls	r3, r3, #4
    3342:	18fb      	adds	r3, r7, r3
    3344:	33e0      	adds	r3, #224	; 0xe0
    3346:	681b      	ldr	r3, [r3, #0]
    3348:	494f      	ldr	r1, [pc, #316]	; (3488 <USB_Handler+0x618>)
    334a:	0038      	movs	r0, r7
    334c:	4798      	blx	r3
    334e:	e78d      	b.n	326c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3350:	2308      	movs	r3, #8
    3352:	33ff      	adds	r3, #255	; 0xff
    3354:	5ceb      	ldrb	r3, [r5, r3]
    3356:	069b      	lsls	r3, r3, #26
    3358:	d5ee      	bpl.n	3338 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    335a:	2220      	movs	r2, #32
    335c:	2308      	movs	r3, #8
    335e:	33ff      	adds	r3, #255	; 0xff
    3360:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3362:	4b49      	ldr	r3, [pc, #292]	; (3488 <USB_Handler+0x618>)
    3364:	4642      	mov	r2, r8
    3366:	719a      	strb	r2, [r3, #6]
    3368:	e7e6      	b.n	3338 <USB_Handler+0x4c8>
    336a:	003d      	movs	r5, r7
    336c:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    336e:	9a01      	ldr	r2, [sp, #4]
    3370:	0013      	movs	r3, r2
    3372:	3308      	adds	r3, #8
    3374:	015b      	lsls	r3, r3, #5
    3376:	18ed      	adds	r5, r5, r3
    3378:	2310      	movs	r3, #16
    337a:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    337c:	18bb      	adds	r3, r7, r2
    337e:	3361      	adds	r3, #97	; 0x61
    3380:	33ff      	adds	r3, #255	; 0xff
    3382:	781b      	ldrb	r3, [r3, #0]
    3384:	06db      	lsls	r3, r3, #27
    3386:	d400      	bmi.n	338a <USB_Handler+0x51a>
    3388:	e770      	b.n	326c <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    338a:	0010      	movs	r0, r2
    338c:	0152      	lsls	r2, r2, #5
    338e:	4b3d      	ldr	r3, [pc, #244]	; (3484 <USB_Handler+0x614>)
    3390:	189b      	adds	r3, r3, r2
    3392:	685b      	ldr	r3, [r3, #4]
    3394:	049b      	lsls	r3, r3, #18
    3396:	0c9b      	lsrs	r3, r3, #18
    3398:	493b      	ldr	r1, [pc, #236]	; (3488 <USB_Handler+0x618>)
    339a:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    339c:	0103      	lsls	r3, r0, #4
    339e:	18fb      	adds	r3, r7, r3
    33a0:	33dc      	adds	r3, #220	; 0xdc
    33a2:	681b      	ldr	r3, [r3, #0]
    33a4:	4640      	mov	r0, r8
    33a6:	4798      	blx	r3
    33a8:	e760      	b.n	326c <USB_Handler+0x3fc>
    33aa:	002a      	movs	r2, r5
    33ac:	003d      	movs	r5, r7
    33ae:	4647      	mov	r7, r8
    33b0:	4690      	mov	r8, r2
    33b2:	015b      	lsls	r3, r3, #5
    33b4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    33b6:	2308      	movs	r3, #8
    33b8:	33ff      	adds	r3, #255	; 0xff
    33ba:	5ceb      	ldrb	r3, [r5, r3]
    33bc:	079b      	lsls	r3, r3, #30
    33be:	d51e      	bpl.n	33fe <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    33c0:	2202      	movs	r2, #2
    33c2:	2308      	movs	r3, #8
    33c4:	33ff      	adds	r3, #255	; 0xff
    33c6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    33c8:	482f      	ldr	r0, [pc, #188]	; (3488 <USB_Handler+0x618>)
    33ca:	3b88      	subs	r3, #136	; 0x88
    33cc:	3bff      	subs	r3, #255	; 0xff
    33ce:	4642      	mov	r2, r8
    33d0:	4313      	orrs	r3, r2
    33d2:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    33d4:	9b01      	ldr	r3, [sp, #4]
    33d6:	015a      	lsls	r2, r3, #5
    33d8:	4b2a      	ldr	r3, [pc, #168]	; (3484 <USB_Handler+0x614>)
    33da:	189b      	adds	r3, r3, r2
    33dc:	3310      	adds	r3, #16
    33de:	685b      	ldr	r3, [r3, #4]
    33e0:	049b      	lsls	r3, r3, #18
    33e2:	0c9b      	lsrs	r3, r3, #18
    33e4:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    33e6:	078b      	lsls	r3, r1, #30
    33e8:	d100      	bne.n	33ec <USB_Handler+0x57c>
    33ea:	e73f      	b.n	326c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    33ec:	9b01      	ldr	r3, [sp, #4]
    33ee:	330d      	adds	r3, #13
    33f0:	011b      	lsls	r3, r3, #4
    33f2:	18fb      	adds	r3, r7, r3
    33f4:	685b      	ldr	r3, [r3, #4]
    33f6:	4924      	ldr	r1, [pc, #144]	; (3488 <USB_Handler+0x618>)
    33f8:	0038      	movs	r0, r7
    33fa:	4798      	blx	r3
    33fc:	e736      	b.n	326c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    33fe:	2308      	movs	r3, #8
    3400:	33ff      	adds	r3, #255	; 0xff
    3402:	5ceb      	ldrb	r3, [r5, r3]
    3404:	07db      	lsls	r3, r3, #31
    3406:	d5ee      	bpl.n	33e6 <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3408:	2201      	movs	r2, #1
    340a:	2308      	movs	r3, #8
    340c:	33ff      	adds	r3, #255	; 0xff
    340e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3410:	481d      	ldr	r0, [pc, #116]	; (3488 <USB_Handler+0x618>)
    3412:	4643      	mov	r3, r8
    3414:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3416:	9b01      	ldr	r3, [sp, #4]
    3418:	015b      	lsls	r3, r3, #5
    341a:	4a1a      	ldr	r2, [pc, #104]	; (3484 <USB_Handler+0x614>)
    341c:	18d2      	adds	r2, r2, r3
    341e:	6853      	ldr	r3, [r2, #4]
    3420:	049b      	lsls	r3, r3, #18
    3422:	0c9b      	lsrs	r3, r3, #18
    3424:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3426:	6853      	ldr	r3, [r2, #4]
    3428:	011b      	lsls	r3, r3, #4
    342a:	0c9b      	lsrs	r3, r3, #18
    342c:	8083      	strh	r3, [r0, #4]
    342e:	e7da      	b.n	33e6 <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3430:	2208      	movs	r2, #8
    3432:	32ff      	adds	r2, #255	; 0xff
    3434:	5c9a      	ldrb	r2, [r3, r2]
    3436:	0752      	lsls	r2, r2, #29
    3438:	d579      	bpl.n	352e <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    343a:	2004      	movs	r0, #4
    343c:	2208      	movs	r2, #8
    343e:	32ff      	adds	r2, #255	; 0xff
    3440:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3442:	9801      	ldr	r0, [sp, #4]
    3444:	0142      	lsls	r2, r0, #5
    3446:	4b0f      	ldr	r3, [pc, #60]	; (3484 <USB_Handler+0x614>)
    3448:	189b      	adds	r3, r3, r2
    344a:	7a9b      	ldrb	r3, [r3, #10]
    344c:	079b      	lsls	r3, r3, #30
    344e:	d505      	bpl.n	345c <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3450:	4b0c      	ldr	r3, [pc, #48]	; (3484 <USB_Handler+0x614>)
    3452:	189b      	adds	r3, r3, r2
    3454:	7a9a      	ldrb	r2, [r3, #10]
    3456:	2002      	movs	r0, #2
    3458:	4382      	bics	r2, r0
    345a:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    345c:	4b0a      	ldr	r3, [pc, #40]	; (3488 <USB_Handler+0x618>)
    345e:	4642      	mov	r2, r8
    3460:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3462:	9b01      	ldr	r3, [sp, #4]
    3464:	3308      	adds	r3, #8
    3466:	015b      	lsls	r3, r3, #5
    3468:	683a      	ldr	r2, [r7, #0]
    346a:	4694      	mov	ip, r2
    346c:	4463      	add	r3, ip
    346e:	79db      	ldrb	r3, [r3, #7]
    3470:	07db      	lsls	r3, r3, #31
    3472:	d55c      	bpl.n	352e <USB_Handler+0x6be>
    3474:	e6fa      	b.n	326c <USB_Handler+0x3fc>
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	200001a0 	.word	0x200001a0
    347c:	20000190 	.word	0x20000190
    3480:	20000194 	.word	0x20000194
    3484:	20000560 	.word	0x20000560
    3488:	20000198 	.word	0x20000198
    348c:	3301      	adds	r3, #1
    348e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3490:	2b08      	cmp	r3, #8
    3492:	d100      	bne.n	3496 <USB_Handler+0x626>
    3494:	e6ea      	b.n	326c <USB_Handler+0x3fc>
    3496:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3498:	9301      	str	r3, [sp, #4]
    349a:	0032      	movs	r2, r6
    349c:	411a      	asrs	r2, r3
    349e:	4661      	mov	r1, ip
    34a0:	4211      	tst	r1, r2
    34a2:	d0f3      	beq.n	348c <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    34a4:	001a      	movs	r2, r3
    34a6:	3208      	adds	r2, #8
    34a8:	0152      	lsls	r2, r2, #5
    34aa:	18ba      	adds	r2, r7, r2
    34ac:	79d2      	ldrb	r2, [r2, #7]
    34ae:	b2d2      	uxtb	r2, r2
    34b0:	7a21      	ldrb	r1, [r4, #8]
    34b2:	4011      	ands	r1, r2
    34b4:	7820      	ldrb	r0, [r4, #0]
    34b6:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    34b8:	4648      	mov	r0, r9
    34ba:	4210      	tst	r0, r2
    34bc:	d000      	beq.n	34c0 <USB_Handler+0x650>
    34be:	e726      	b.n	330e <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    34c0:	4650      	mov	r0, sl
    34c2:	4210      	tst	r0, r2
    34c4:	d000      	beq.n	34c8 <USB_Handler+0x658>
    34c6:	e750      	b.n	336a <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    34c8:	4658      	mov	r0, fp
    34ca:	4210      	tst	r0, r2
    34cc:	d000      	beq.n	34d0 <USB_Handler+0x660>
    34ce:	e76c      	b.n	33aa <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    34d0:	200c      	movs	r0, #12
    34d2:	4210      	tst	r0, r2
    34d4:	d0da      	beq.n	348c <USB_Handler+0x61c>
    34d6:	002a      	movs	r2, r5
    34d8:	003d      	movs	r5, r7
    34da:	4647      	mov	r7, r8
    34dc:	4690      	mov	r8, r2
    34de:	015b      	lsls	r3, r3, #5
    34e0:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    34e2:	2208      	movs	r2, #8
    34e4:	32ff      	adds	r2, #255	; 0xff
    34e6:	5c9a      	ldrb	r2, [r3, r2]
    34e8:	0712      	lsls	r2, r2, #28
    34ea:	d5a1      	bpl.n	3430 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    34ec:	3804      	subs	r0, #4
    34ee:	2208      	movs	r2, #8
    34f0:	32ff      	adds	r2, #255	; 0xff
    34f2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    34f4:	9801      	ldr	r0, [sp, #4]
    34f6:	0142      	lsls	r2, r0, #5
    34f8:	4b13      	ldr	r3, [pc, #76]	; (3548 <USB_Handler+0x6d8>)
    34fa:	189b      	adds	r3, r3, r2
    34fc:	7e9b      	ldrb	r3, [r3, #26]
    34fe:	079b      	lsls	r3, r3, #30
    3500:	d505      	bpl.n	350e <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3502:	4b11      	ldr	r3, [pc, #68]	; (3548 <USB_Handler+0x6d8>)
    3504:	189b      	adds	r3, r3, r2
    3506:	7e9a      	ldrb	r2, [r3, #26]
    3508:	2002      	movs	r0, #2
    350a:	4382      	bics	r2, r0
    350c:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    350e:	2380      	movs	r3, #128	; 0x80
    3510:	425b      	negs	r3, r3
    3512:	4642      	mov	r2, r8
    3514:	4313      	orrs	r3, r2
    3516:	4a0d      	ldr	r2, [pc, #52]	; (354c <USB_Handler+0x6dc>)
    3518:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    351a:	9b01      	ldr	r3, [sp, #4]
    351c:	3308      	adds	r3, #8
    351e:	015b      	lsls	r3, r3, #5
    3520:	683a      	ldr	r2, [r7, #0]
    3522:	4694      	mov	ip, r2
    3524:	4463      	add	r3, ip
    3526:	79db      	ldrb	r3, [r3, #7]
    3528:	079b      	lsls	r3, r3, #30
    352a:	d500      	bpl.n	352e <USB_Handler+0x6be>
    352c:	e69e      	b.n	326c <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    352e:	230c      	movs	r3, #12
    3530:	420b      	tst	r3, r1
    3532:	d100      	bne.n	3536 <USB_Handler+0x6c6>
    3534:	e69a      	b.n	326c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3536:	9b01      	ldr	r3, [sp, #4]
    3538:	011b      	lsls	r3, r3, #4
    353a:	18fb      	adds	r3, r7, r3
    353c:	33d8      	adds	r3, #216	; 0xd8
    353e:	681b      	ldr	r3, [r3, #0]
    3540:	4902      	ldr	r1, [pc, #8]	; (354c <USB_Handler+0x6dc>)
    3542:	0038      	movs	r0, r7
    3544:	4798      	blx	r3
    3546:	e691      	b.n	326c <USB_Handler+0x3fc>
    3548:	20000560 	.word	0x20000560
    354c:	20000198 	.word	0x20000198

00003550 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    3550:	2300      	movs	r3, #0
    3552:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    3554:	3301      	adds	r3, #1
    3556:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    3558:	2203      	movs	r2, #3
    355a:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    355c:	70c3      	strb	r3, [r0, #3]
}
    355e:	4770      	bx	lr

00003560 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    3560:	b5f0      	push	{r4, r5, r6, r7, lr}
    3562:	46ce      	mov	lr, r9
    3564:	4647      	mov	r7, r8
    3566:	b580      	push	{r7, lr}
    3568:	b083      	sub	sp, #12
    356a:	0004      	movs	r4, r0
    356c:	000d      	movs	r5, r1
    356e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    3570:	2300      	movs	r3, #0
    3572:	4a67      	ldr	r2, [pc, #412]	; (3710 <usb_init+0x1b0>)
    3574:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    3576:	4a67      	ldr	r2, [pc, #412]	; (3714 <usb_init+0x1b4>)
    3578:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    357a:	6021      	str	r1, [r4, #0]
			MCLK->APBBMASK.reg |= mask;
    357c:	4866      	ldr	r0, [pc, #408]	; (3718 <usb_init+0x1b8>)
    357e:	6982      	ldr	r2, [r0, #24]
    3580:	2101      	movs	r1, #1
    3582:	430a      	orrs	r2, r1
    3584:	6182      	str	r2, [r0, #24]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3586:	af01      	add	r7, sp, #4
    3588:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    358a:	70b9      	strb	r1, [r7, #2]
	config->powersave    = false;
    358c:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    358e:	3306      	adds	r3, #6
    3590:	4699      	mov	r9, r3
    3592:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3594:	0039      	movs	r1, r7
    3596:	2018      	movs	r0, #24
    3598:	4b60      	ldr	r3, [pc, #384]	; (371c <usb_init+0x1bc>)
    359a:	4698      	mov	r8, r3
    359c:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    359e:	464b      	mov	r3, r9
    35a0:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    35a2:	0039      	movs	r1, r7
    35a4:	2019      	movs	r0, #25
    35a6:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    35a8:	78b3      	ldrb	r3, [r6, #2]
    35aa:	466a      	mov	r2, sp
    35ac:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    35ae:	4669      	mov	r1, sp
    35b0:	2004      	movs	r0, #4
    35b2:	4b5b      	ldr	r3, [pc, #364]	; (3720 <usb_init+0x1c0>)
    35b4:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    35b6:	2004      	movs	r0, #4
    35b8:	4b5a      	ldr	r3, [pc, #360]	; (3724 <usb_init+0x1c4>)
    35ba:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    35bc:	782b      	ldrb	r3, [r5, #0]
    35be:	2201      	movs	r2, #1
    35c0:	4313      	orrs	r3, r2
    35c2:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    35c4:	78ab      	ldrb	r3, [r5, #2]
    35c6:	07db      	lsls	r3, r3, #31
    35c8:	d4fc      	bmi.n	35c4 <usb_init+0x64>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    35ca:	4b57      	ldr	r3, [pc, #348]	; (3728 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    35cc:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    35ce:	039b      	lsls	r3, r3, #14
    35d0:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    35d2:	2b1f      	cmp	r3, #31
    35d4:	d100      	bne.n	35d8 <usb_init+0x78>
    35d6:	e08f      	b.n	36f8 <usb_init+0x198>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    35d8:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    35da:	019b      	lsls	r3, r3, #6
    35dc:	4953      	ldr	r1, [pc, #332]	; (372c <usb_init+0x1cc>)
    35de:	400a      	ands	r2, r1
    35e0:	4313      	orrs	r3, r2
    35e2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    35e4:	4b50      	ldr	r3, [pc, #320]	; (3728 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    35ea:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    35ec:	2b1f      	cmp	r3, #31
    35ee:	d100      	bne.n	35f2 <usb_init+0x92>
    35f0:	e084      	b.n	36fc <usb_init+0x19c>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    35f2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    35f4:	211f      	movs	r1, #31
    35f6:	438a      	bics	r2, r1
    35f8:	4313      	orrs	r3, r2
    35fa:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    35fc:	4b4a      	ldr	r3, [pc, #296]	; (3728 <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    35fe:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3600:	019b      	lsls	r3, r3, #6
    3602:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    3604:	2b07      	cmp	r3, #7
    3606:	d100      	bne.n	360a <usb_init+0xaa>
    3608:	e07a      	b.n	3700 <usb_init+0x1a0>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    360a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    360c:	031b      	lsls	r3, r3, #12
    360e:	4948      	ldr	r1, [pc, #288]	; (3730 <usb_init+0x1d0>)
    3610:	400a      	ands	r2, r1
    3612:	4313      	orrs	r3, r2
    3614:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    3616:	7832      	ldrb	r2, [r6, #0]
    3618:	7829      	ldrb	r1, [r5, #0]
    361a:	01d2      	lsls	r2, r2, #7
    361c:	237f      	movs	r3, #127	; 0x7f
    361e:	400b      	ands	r3, r1
    3620:	4313      	orrs	r3, r2
    3622:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    3624:	7871      	ldrb	r1, [r6, #1]
    3626:	782b      	ldrb	r3, [r5, #0]
    3628:	2201      	movs	r2, #1
    362a:	400a      	ands	r2, r1
    362c:	0092      	lsls	r2, r2, #2
    362e:	2104      	movs	r1, #4
    3630:	438b      	bics	r3, r1
    3632:	4313      	orrs	r3, r2
    3634:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    3636:	4b3f      	ldr	r3, [pc, #252]	; (3734 <usb_init+0x1d4>)
    3638:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    363a:	78f3      	ldrb	r3, [r6, #3]
    363c:	2b01      	cmp	r3, #1
    363e:	d061      	beq.n	3704 <usb_init+0x1a4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    3640:	2b00      	cmp	r3, #0
    3642:	d106      	bne.n	3652 <usb_init+0xf2>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    3644:	6822      	ldr	r2, [r4, #0]
    3646:	8913      	ldrh	r3, [r2, #8]
    3648:	210c      	movs	r1, #12
    364a:	438b      	bics	r3, r1
    364c:	2104      	movs	r1, #4
    364e:	430b      	orrs	r3, r1
    3650:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    3652:	2280      	movs	r2, #128	; 0x80
    3654:	0052      	lsls	r2, r2, #1
    3656:	2100      	movs	r1, #0
    3658:	4836      	ldr	r0, [pc, #216]	; (3734 <usb_init+0x1d4>)
    365a:	4b37      	ldr	r3, [pc, #220]	; (3738 <usb_init+0x1d8>)
    365c:	4798      	blx	r3
    365e:	1d23      	adds	r3, r4, #4
    3660:	0021      	movs	r1, r4
    3662:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    3664:	2200      	movs	r2, #0
    3666:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    3668:	428b      	cmp	r3, r1
    366a:	d1fc      	bne.n	3666 <usb_init+0x106>
    366c:	0021      	movs	r1, r4
    366e:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    3670:	2200      	movs	r2, #0
    3672:	601a      	str	r2, [r3, #0]
    3674:	605a      	str	r2, [r3, #4]
    3676:	609a      	str	r2, [r3, #8]
    3678:	60da      	str	r2, [r3, #12]
    367a:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    367c:	428b      	cmp	r3, r1
    367e:	d1f8      	bne.n	3672 <usb_init+0x112>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    3680:	2300      	movs	r3, #0
    3682:	22a4      	movs	r2, #164	; 0xa4
    3684:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    3686:	3201      	adds	r2, #1
    3688:	54a3      	strb	r3, [r4, r2]
    368a:	0023      	movs	r3, r4
    368c:	33a6      	adds	r3, #166	; 0xa6
    368e:	0021      	movs	r1, r4
    3690:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    3692:	2200      	movs	r2, #0
    3694:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    3696:	721a      	strb	r2, [r3, #8]
    3698:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    369a:	4299      	cmp	r1, r3
    369c:	d1fa      	bne.n	3694 <usb_init+0x134>
    369e:	0023      	movs	r3, r4
    36a0:	33b8      	adds	r3, #184	; 0xb8
    36a2:	0021      	movs	r1, r4
    36a4:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    36a6:	2200      	movs	r2, #0
    36a8:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    36aa:	428b      	cmp	r3, r1
    36ac:	d1fc      	bne.n	36a8 <usb_init+0x148>
    36ae:	0021      	movs	r1, r4
    36b0:	3155      	adds	r1, #85	; 0x55
    36b2:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    36b4:	2200      	movs	r2, #0
    36b6:	601a      	str	r2, [r3, #0]
    36b8:	605a      	str	r2, [r3, #4]
    36ba:	609a      	str	r2, [r3, #8]
    36bc:	60da      	str	r2, [r3, #12]
    36be:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    36c0:	428b      	cmp	r3, r1
    36c2:	d1f8      	bne.n	36b6 <usb_init+0x156>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    36c4:	2300      	movs	r3, #0
    36c6:	22aa      	movs	r2, #170	; 0xaa
    36c8:	0052      	lsls	r2, r2, #1
    36ca:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    36cc:	3202      	adds	r2, #2
    36ce:	52a3      	strh	r3, [r4, r2]
    36d0:	0023      	movs	r3, r4
    36d2:	3359      	adds	r3, #89	; 0x59
    36d4:	33ff      	adds	r3, #255	; 0xff
    36d6:	3461      	adds	r4, #97	; 0x61
    36d8:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    36da:	2200      	movs	r2, #0
    36dc:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    36de:	721a      	strb	r2, [r3, #8]
    36e0:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    36e2:	42a3      	cmp	r3, r4
    36e4:	d1fa      	bne.n	36dc <usb_init+0x17c>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    36e6:	2240      	movs	r2, #64	; 0x40
    36e8:	4b14      	ldr	r3, [pc, #80]	; (373c <usb_init+0x1dc>)
    36ea:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    36ec:	2000      	movs	r0, #0
    36ee:	b003      	add	sp, #12
    36f0:	bc0c      	pop	{r2, r3}
    36f2:	4690      	mov	r8, r2
    36f4:	4699      	mov	r9, r3
    36f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    36f8:	3b1a      	subs	r3, #26
    36fa:	e76d      	b.n	35d8 <usb_init+0x78>
		pad_transp = 29;
    36fc:	3b02      	subs	r3, #2
    36fe:	e778      	b.n	35f2 <usb_init+0x92>
		pad_trim = 3;
    3700:	3b04      	subs	r3, #4
    3702:	e782      	b.n	360a <usb_init+0xaa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    3704:	6822      	ldr	r2, [r4, #0]
    3706:	8913      	ldrh	r3, [r2, #8]
    3708:	3108      	adds	r1, #8
    370a:	438b      	bics	r3, r1
    370c:	8113      	strh	r3, [r2, #8]
    370e:	e7a0      	b.n	3652 <usb_init+0xf2>
    3710:	200001a0 	.word	0x200001a0
    3714:	20000190 	.word	0x20000190
    3718:	40000400 	.word	0x40000400
    371c:	00001ac9 	.word	0x00001ac9
    3720:	000019cd 	.word	0x000019cd
    3724:	0000195d 	.word	0x0000195d
    3728:	0080601c 	.word	0x0080601c
    372c:	fffff83f 	.word	0xfffff83f
    3730:	ffff8fff 	.word	0xffff8fff
    3734:	20000560 	.word	0x20000560
    3738:	00003c07 	.word	0x00003c07
    373c:	e000e100 	.word	0xe000e100

00003740 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3740:	e7fe      	b.n	3740 <Dummy_Handler>
	...

00003744 <Reset_Handler>:
{
    3744:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    3746:	4a1a      	ldr	r2, [pc, #104]	; (37b0 <Reset_Handler+0x6c>)
    3748:	4b1a      	ldr	r3, [pc, #104]	; (37b4 <Reset_Handler+0x70>)
    374a:	429a      	cmp	r2, r3
    374c:	d011      	beq.n	3772 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    374e:	001a      	movs	r2, r3
    3750:	4b19      	ldr	r3, [pc, #100]	; (37b8 <Reset_Handler+0x74>)
    3752:	429a      	cmp	r2, r3
    3754:	d20d      	bcs.n	3772 <Reset_Handler+0x2e>
    3756:	4a19      	ldr	r2, [pc, #100]	; (37bc <Reset_Handler+0x78>)
    3758:	3303      	adds	r3, #3
    375a:	1a9b      	subs	r3, r3, r2
    375c:	089b      	lsrs	r3, r3, #2
    375e:	3301      	adds	r3, #1
    3760:	009b      	lsls	r3, r3, #2
    3762:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3764:	4813      	ldr	r0, [pc, #76]	; (37b4 <Reset_Handler+0x70>)
    3766:	4912      	ldr	r1, [pc, #72]	; (37b0 <Reset_Handler+0x6c>)
    3768:	588c      	ldr	r4, [r1, r2]
    376a:	5084      	str	r4, [r0, r2]
    376c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    376e:	429a      	cmp	r2, r3
    3770:	d1fa      	bne.n	3768 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3772:	4a13      	ldr	r2, [pc, #76]	; (37c0 <Reset_Handler+0x7c>)
    3774:	4b13      	ldr	r3, [pc, #76]	; (37c4 <Reset_Handler+0x80>)
    3776:	429a      	cmp	r2, r3
    3778:	d20a      	bcs.n	3790 <Reset_Handler+0x4c>
    377a:	43d3      	mvns	r3, r2
    377c:	4911      	ldr	r1, [pc, #68]	; (37c4 <Reset_Handler+0x80>)
    377e:	185b      	adds	r3, r3, r1
    3780:	2103      	movs	r1, #3
    3782:	438b      	bics	r3, r1
    3784:	3304      	adds	r3, #4
    3786:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3788:	2100      	movs	r1, #0
    378a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    378c:	4293      	cmp	r3, r2
    378e:	d1fc      	bne.n	378a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3790:	4a0d      	ldr	r2, [pc, #52]	; (37c8 <Reset_Handler+0x84>)
    3792:	21ff      	movs	r1, #255	; 0xff
    3794:	4b0d      	ldr	r3, [pc, #52]	; (37cc <Reset_Handler+0x88>)
    3796:	438b      	bics	r3, r1
    3798:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    379a:	4a0d      	ldr	r2, [pc, #52]	; (37d0 <Reset_Handler+0x8c>)
    379c:	6853      	ldr	r3, [r2, #4]
    379e:	397f      	subs	r1, #127	; 0x7f
    37a0:	430b      	orrs	r3, r1
    37a2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    37a4:	4b0b      	ldr	r3, [pc, #44]	; (37d4 <Reset_Handler+0x90>)
    37a6:	4798      	blx	r3
        main();
    37a8:	4b0b      	ldr	r3, [pc, #44]	; (37d8 <Reset_Handler+0x94>)
    37aa:	4798      	blx	r3
    37ac:	e7fe      	b.n	37ac <Reset_Handler+0x68>
    37ae:	46c0      	nop			; (mov r8, r8)
    37b0:	00004068 	.word	0x00004068
    37b4:	20000000 	.word	0x20000000
    37b8:	200000e0 	.word	0x200000e0
    37bc:	20000004 	.word	0x20000004
    37c0:	200000e0 	.word	0x200000e0
    37c4:	20000660 	.word	0x20000660
    37c8:	e000ed00 	.word	0xe000ed00
    37cc:	00000000 	.word	0x00000000
    37d0:	41004000 	.word	0x41004000
    37d4:	00003bad 	.word	0x00003bad
    37d8:	000037dd 	.word	0x000037dd

000037dc <main>:
#define EVER (;;)

#define PIN_LED_CAPS PIN_PB09

int main (void)
{
    37dc:	b510      	push	{r4, lr}
    37de:	b082      	sub	sp, #8
	irq_initialize_vectors();
	cpu_irq_enable();
    37e0:	2401      	movs	r4, #1
    37e2:	4b10      	ldr	r3, [pc, #64]	; (3824 <main+0x48>)
    37e4:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    37e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    37ea:	b662      	cpsie	i
		
	board_init();
    37ec:	4b0e      	ldr	r3, [pc, #56]	; (3828 <main+0x4c>)
    37ee:	4798      	blx	r3
	system_init();
    37f0:	4b0e      	ldr	r3, [pc, #56]	; (382c <main+0x50>)
    37f2:	4798      	blx	r3
	
	delay_init();
    37f4:	4b0e      	ldr	r3, [pc, #56]	; (3830 <main+0x54>)
    37f6:	4798      	blx	r3
	
	init_timing();
    37f8:	4b0e      	ldr	r3, [pc, #56]	; (3834 <main+0x58>)
    37fa:	4798      	blx	r3
	
	/* Insert application code here, after the board has been initialized. */
	keyboard_init();
    37fc:	4b0e      	ldr	r3, [pc, #56]	; (3838 <main+0x5c>)
    37fe:	4798      	blx	r3
	
	udc_start();
    3800:	4b0e      	ldr	r3, [pc, #56]	; (383c <main+0x60>)
    3802:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    3804:	a901      	add	r1, sp, #4
    3806:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
    3808:	2300      	movs	r3, #0
    380a:	708b      	strb	r3, [r1, #2]
	
	// Setup Caps Lock LED
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    380c:	700c      	strb	r4, [r1, #0]
	port_pin_set_config(PIN_LED_CAPS, &config_port_pin);
    380e:	2029      	movs	r0, #41	; 0x29
    3810:	4b0b      	ldr	r3, [pc, #44]	; (3840 <main+0x64>)
    3812:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3814:	2280      	movs	r2, #128	; 0x80
    3816:	0092      	lsls	r2, r2, #2
    3818:	4b0a      	ldr	r3, [pc, #40]	; (3844 <main+0x68>)
    381a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_LED_CAPS, true);
	
	for EVER {
		 keyboard_update();
    381c:	4c0a      	ldr	r4, [pc, #40]	; (3848 <main+0x6c>)
    381e:	47a0      	blx	r4
    3820:	e7fd      	b.n	381e <main+0x42>
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	200000dc 	.word	0x200000dc
    3828:	000012f9 	.word	0x000012f9
    382c:	00001afd 	.word	0x00001afd
    3830:	000006dd 	.word	0x000006dd
    3834:	00000685 	.word	0x00000685
    3838:	00000175 	.word	0x00000175
    383c:	00000d01 	.word	0x00000d01
    3840:	000012d5 	.word	0x000012d5
    3844:	40002880 	.word	0x40002880
    3848:	000001d9 	.word	0x000001d9

0000384c <main_kbd_enable>:
	}
	
}

bool main_kbd_enable(void)
{
    384c:	b510      	push	{r4, lr}
	return keyboard_set_kbd_enabled();
    384e:	4b01      	ldr	r3, [pc, #4]	; (3854 <main_kbd_enable+0x8>)
    3850:	4798      	blx	r3
}
    3852:	bd10      	pop	{r4, pc}
    3854:	000003d1 	.word	0x000003d1

00003858 <main_kbd_disable>:

void main_kbd_disable(void)
{
    3858:	b510      	push	{r4, lr}
	keyboard_set_kbd_disabled();
    385a:	4b01      	ldr	r3, [pc, #4]	; (3860 <main_kbd_disable+0x8>)
    385c:	4798      	blx	r3
}
    385e:	bd10      	pop	{r4, pc}
    3860:	000003e1 	.word	0x000003e1

00003864 <main_kbd_led_change>:

void main_kbd_led_change(uint8_t report)
{
	if (report & HID_LED_CAPS_LOCK) {
    3864:	0783      	lsls	r3, r0, #30
    3866:	d404      	bmi.n	3872 <main_kbd_led_change+0xe>
    3868:	2280      	movs	r2, #128	; 0x80
    386a:	0092      	lsls	r2, r2, #2
    386c:	4b03      	ldr	r3, [pc, #12]	; (387c <main_kbd_led_change+0x18>)
    386e:	619a      	str	r2, [r3, #24]
	}
	else
	{
		port_pin_set_output_level(PIN_LED_CAPS, true);
	}
    3870:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
    3872:	2280      	movs	r2, #128	; 0x80
    3874:	0092      	lsls	r2, r2, #2
    3876:	4b01      	ldr	r3, [pc, #4]	; (387c <main_kbd_led_change+0x18>)
    3878:	615a      	str	r2, [r3, #20]
    387a:	e7f9      	b.n	3870 <main_kbd_led_change+0xc>
    387c:	40002880 	.word	0x40002880

00003880 <__udivsi3>:
    3880:	2200      	movs	r2, #0
    3882:	0843      	lsrs	r3, r0, #1
    3884:	428b      	cmp	r3, r1
    3886:	d374      	bcc.n	3972 <__udivsi3+0xf2>
    3888:	0903      	lsrs	r3, r0, #4
    388a:	428b      	cmp	r3, r1
    388c:	d35f      	bcc.n	394e <__udivsi3+0xce>
    388e:	0a03      	lsrs	r3, r0, #8
    3890:	428b      	cmp	r3, r1
    3892:	d344      	bcc.n	391e <__udivsi3+0x9e>
    3894:	0b03      	lsrs	r3, r0, #12
    3896:	428b      	cmp	r3, r1
    3898:	d328      	bcc.n	38ec <__udivsi3+0x6c>
    389a:	0c03      	lsrs	r3, r0, #16
    389c:	428b      	cmp	r3, r1
    389e:	d30d      	bcc.n	38bc <__udivsi3+0x3c>
    38a0:	22ff      	movs	r2, #255	; 0xff
    38a2:	0209      	lsls	r1, r1, #8
    38a4:	ba12      	rev	r2, r2
    38a6:	0c03      	lsrs	r3, r0, #16
    38a8:	428b      	cmp	r3, r1
    38aa:	d302      	bcc.n	38b2 <__udivsi3+0x32>
    38ac:	1212      	asrs	r2, r2, #8
    38ae:	0209      	lsls	r1, r1, #8
    38b0:	d065      	beq.n	397e <__udivsi3+0xfe>
    38b2:	0b03      	lsrs	r3, r0, #12
    38b4:	428b      	cmp	r3, r1
    38b6:	d319      	bcc.n	38ec <__udivsi3+0x6c>
    38b8:	e000      	b.n	38bc <__udivsi3+0x3c>
    38ba:	0a09      	lsrs	r1, r1, #8
    38bc:	0bc3      	lsrs	r3, r0, #15
    38be:	428b      	cmp	r3, r1
    38c0:	d301      	bcc.n	38c6 <__udivsi3+0x46>
    38c2:	03cb      	lsls	r3, r1, #15
    38c4:	1ac0      	subs	r0, r0, r3
    38c6:	4152      	adcs	r2, r2
    38c8:	0b83      	lsrs	r3, r0, #14
    38ca:	428b      	cmp	r3, r1
    38cc:	d301      	bcc.n	38d2 <__udivsi3+0x52>
    38ce:	038b      	lsls	r3, r1, #14
    38d0:	1ac0      	subs	r0, r0, r3
    38d2:	4152      	adcs	r2, r2
    38d4:	0b43      	lsrs	r3, r0, #13
    38d6:	428b      	cmp	r3, r1
    38d8:	d301      	bcc.n	38de <__udivsi3+0x5e>
    38da:	034b      	lsls	r3, r1, #13
    38dc:	1ac0      	subs	r0, r0, r3
    38de:	4152      	adcs	r2, r2
    38e0:	0b03      	lsrs	r3, r0, #12
    38e2:	428b      	cmp	r3, r1
    38e4:	d301      	bcc.n	38ea <__udivsi3+0x6a>
    38e6:	030b      	lsls	r3, r1, #12
    38e8:	1ac0      	subs	r0, r0, r3
    38ea:	4152      	adcs	r2, r2
    38ec:	0ac3      	lsrs	r3, r0, #11
    38ee:	428b      	cmp	r3, r1
    38f0:	d301      	bcc.n	38f6 <__udivsi3+0x76>
    38f2:	02cb      	lsls	r3, r1, #11
    38f4:	1ac0      	subs	r0, r0, r3
    38f6:	4152      	adcs	r2, r2
    38f8:	0a83      	lsrs	r3, r0, #10
    38fa:	428b      	cmp	r3, r1
    38fc:	d301      	bcc.n	3902 <__udivsi3+0x82>
    38fe:	028b      	lsls	r3, r1, #10
    3900:	1ac0      	subs	r0, r0, r3
    3902:	4152      	adcs	r2, r2
    3904:	0a43      	lsrs	r3, r0, #9
    3906:	428b      	cmp	r3, r1
    3908:	d301      	bcc.n	390e <__udivsi3+0x8e>
    390a:	024b      	lsls	r3, r1, #9
    390c:	1ac0      	subs	r0, r0, r3
    390e:	4152      	adcs	r2, r2
    3910:	0a03      	lsrs	r3, r0, #8
    3912:	428b      	cmp	r3, r1
    3914:	d301      	bcc.n	391a <__udivsi3+0x9a>
    3916:	020b      	lsls	r3, r1, #8
    3918:	1ac0      	subs	r0, r0, r3
    391a:	4152      	adcs	r2, r2
    391c:	d2cd      	bcs.n	38ba <__udivsi3+0x3a>
    391e:	09c3      	lsrs	r3, r0, #7
    3920:	428b      	cmp	r3, r1
    3922:	d301      	bcc.n	3928 <__udivsi3+0xa8>
    3924:	01cb      	lsls	r3, r1, #7
    3926:	1ac0      	subs	r0, r0, r3
    3928:	4152      	adcs	r2, r2
    392a:	0983      	lsrs	r3, r0, #6
    392c:	428b      	cmp	r3, r1
    392e:	d301      	bcc.n	3934 <__udivsi3+0xb4>
    3930:	018b      	lsls	r3, r1, #6
    3932:	1ac0      	subs	r0, r0, r3
    3934:	4152      	adcs	r2, r2
    3936:	0943      	lsrs	r3, r0, #5
    3938:	428b      	cmp	r3, r1
    393a:	d301      	bcc.n	3940 <__udivsi3+0xc0>
    393c:	014b      	lsls	r3, r1, #5
    393e:	1ac0      	subs	r0, r0, r3
    3940:	4152      	adcs	r2, r2
    3942:	0903      	lsrs	r3, r0, #4
    3944:	428b      	cmp	r3, r1
    3946:	d301      	bcc.n	394c <__udivsi3+0xcc>
    3948:	010b      	lsls	r3, r1, #4
    394a:	1ac0      	subs	r0, r0, r3
    394c:	4152      	adcs	r2, r2
    394e:	08c3      	lsrs	r3, r0, #3
    3950:	428b      	cmp	r3, r1
    3952:	d301      	bcc.n	3958 <__udivsi3+0xd8>
    3954:	00cb      	lsls	r3, r1, #3
    3956:	1ac0      	subs	r0, r0, r3
    3958:	4152      	adcs	r2, r2
    395a:	0883      	lsrs	r3, r0, #2
    395c:	428b      	cmp	r3, r1
    395e:	d301      	bcc.n	3964 <__udivsi3+0xe4>
    3960:	008b      	lsls	r3, r1, #2
    3962:	1ac0      	subs	r0, r0, r3
    3964:	4152      	adcs	r2, r2
    3966:	0843      	lsrs	r3, r0, #1
    3968:	428b      	cmp	r3, r1
    396a:	d301      	bcc.n	3970 <__udivsi3+0xf0>
    396c:	004b      	lsls	r3, r1, #1
    396e:	1ac0      	subs	r0, r0, r3
    3970:	4152      	adcs	r2, r2
    3972:	1a41      	subs	r1, r0, r1
    3974:	d200      	bcs.n	3978 <__udivsi3+0xf8>
    3976:	4601      	mov	r1, r0
    3978:	4152      	adcs	r2, r2
    397a:	4610      	mov	r0, r2
    397c:	4770      	bx	lr
    397e:	e7ff      	b.n	3980 <__udivsi3+0x100>
    3980:	b501      	push	{r0, lr}
    3982:	2000      	movs	r0, #0
    3984:	f000 f8f0 	bl	3b68 <__aeabi_idiv0>
    3988:	bd02      	pop	{r1, pc}
    398a:	46c0      	nop			; (mov r8, r8)

0000398c <__aeabi_uidivmod>:
    398c:	2900      	cmp	r1, #0
    398e:	d0f7      	beq.n	3980 <__udivsi3+0x100>
    3990:	e776      	b.n	3880 <__udivsi3>
    3992:	4770      	bx	lr

00003994 <__divsi3>:
    3994:	4603      	mov	r3, r0
    3996:	430b      	orrs	r3, r1
    3998:	d47f      	bmi.n	3a9a <__divsi3+0x106>
    399a:	2200      	movs	r2, #0
    399c:	0843      	lsrs	r3, r0, #1
    399e:	428b      	cmp	r3, r1
    39a0:	d374      	bcc.n	3a8c <__divsi3+0xf8>
    39a2:	0903      	lsrs	r3, r0, #4
    39a4:	428b      	cmp	r3, r1
    39a6:	d35f      	bcc.n	3a68 <__divsi3+0xd4>
    39a8:	0a03      	lsrs	r3, r0, #8
    39aa:	428b      	cmp	r3, r1
    39ac:	d344      	bcc.n	3a38 <__divsi3+0xa4>
    39ae:	0b03      	lsrs	r3, r0, #12
    39b0:	428b      	cmp	r3, r1
    39b2:	d328      	bcc.n	3a06 <__divsi3+0x72>
    39b4:	0c03      	lsrs	r3, r0, #16
    39b6:	428b      	cmp	r3, r1
    39b8:	d30d      	bcc.n	39d6 <__divsi3+0x42>
    39ba:	22ff      	movs	r2, #255	; 0xff
    39bc:	0209      	lsls	r1, r1, #8
    39be:	ba12      	rev	r2, r2
    39c0:	0c03      	lsrs	r3, r0, #16
    39c2:	428b      	cmp	r3, r1
    39c4:	d302      	bcc.n	39cc <__divsi3+0x38>
    39c6:	1212      	asrs	r2, r2, #8
    39c8:	0209      	lsls	r1, r1, #8
    39ca:	d065      	beq.n	3a98 <__divsi3+0x104>
    39cc:	0b03      	lsrs	r3, r0, #12
    39ce:	428b      	cmp	r3, r1
    39d0:	d319      	bcc.n	3a06 <__divsi3+0x72>
    39d2:	e000      	b.n	39d6 <__divsi3+0x42>
    39d4:	0a09      	lsrs	r1, r1, #8
    39d6:	0bc3      	lsrs	r3, r0, #15
    39d8:	428b      	cmp	r3, r1
    39da:	d301      	bcc.n	39e0 <__divsi3+0x4c>
    39dc:	03cb      	lsls	r3, r1, #15
    39de:	1ac0      	subs	r0, r0, r3
    39e0:	4152      	adcs	r2, r2
    39e2:	0b83      	lsrs	r3, r0, #14
    39e4:	428b      	cmp	r3, r1
    39e6:	d301      	bcc.n	39ec <__divsi3+0x58>
    39e8:	038b      	lsls	r3, r1, #14
    39ea:	1ac0      	subs	r0, r0, r3
    39ec:	4152      	adcs	r2, r2
    39ee:	0b43      	lsrs	r3, r0, #13
    39f0:	428b      	cmp	r3, r1
    39f2:	d301      	bcc.n	39f8 <__divsi3+0x64>
    39f4:	034b      	lsls	r3, r1, #13
    39f6:	1ac0      	subs	r0, r0, r3
    39f8:	4152      	adcs	r2, r2
    39fa:	0b03      	lsrs	r3, r0, #12
    39fc:	428b      	cmp	r3, r1
    39fe:	d301      	bcc.n	3a04 <__divsi3+0x70>
    3a00:	030b      	lsls	r3, r1, #12
    3a02:	1ac0      	subs	r0, r0, r3
    3a04:	4152      	adcs	r2, r2
    3a06:	0ac3      	lsrs	r3, r0, #11
    3a08:	428b      	cmp	r3, r1
    3a0a:	d301      	bcc.n	3a10 <__divsi3+0x7c>
    3a0c:	02cb      	lsls	r3, r1, #11
    3a0e:	1ac0      	subs	r0, r0, r3
    3a10:	4152      	adcs	r2, r2
    3a12:	0a83      	lsrs	r3, r0, #10
    3a14:	428b      	cmp	r3, r1
    3a16:	d301      	bcc.n	3a1c <__divsi3+0x88>
    3a18:	028b      	lsls	r3, r1, #10
    3a1a:	1ac0      	subs	r0, r0, r3
    3a1c:	4152      	adcs	r2, r2
    3a1e:	0a43      	lsrs	r3, r0, #9
    3a20:	428b      	cmp	r3, r1
    3a22:	d301      	bcc.n	3a28 <__divsi3+0x94>
    3a24:	024b      	lsls	r3, r1, #9
    3a26:	1ac0      	subs	r0, r0, r3
    3a28:	4152      	adcs	r2, r2
    3a2a:	0a03      	lsrs	r3, r0, #8
    3a2c:	428b      	cmp	r3, r1
    3a2e:	d301      	bcc.n	3a34 <__divsi3+0xa0>
    3a30:	020b      	lsls	r3, r1, #8
    3a32:	1ac0      	subs	r0, r0, r3
    3a34:	4152      	adcs	r2, r2
    3a36:	d2cd      	bcs.n	39d4 <__divsi3+0x40>
    3a38:	09c3      	lsrs	r3, r0, #7
    3a3a:	428b      	cmp	r3, r1
    3a3c:	d301      	bcc.n	3a42 <__divsi3+0xae>
    3a3e:	01cb      	lsls	r3, r1, #7
    3a40:	1ac0      	subs	r0, r0, r3
    3a42:	4152      	adcs	r2, r2
    3a44:	0983      	lsrs	r3, r0, #6
    3a46:	428b      	cmp	r3, r1
    3a48:	d301      	bcc.n	3a4e <__divsi3+0xba>
    3a4a:	018b      	lsls	r3, r1, #6
    3a4c:	1ac0      	subs	r0, r0, r3
    3a4e:	4152      	adcs	r2, r2
    3a50:	0943      	lsrs	r3, r0, #5
    3a52:	428b      	cmp	r3, r1
    3a54:	d301      	bcc.n	3a5a <__divsi3+0xc6>
    3a56:	014b      	lsls	r3, r1, #5
    3a58:	1ac0      	subs	r0, r0, r3
    3a5a:	4152      	adcs	r2, r2
    3a5c:	0903      	lsrs	r3, r0, #4
    3a5e:	428b      	cmp	r3, r1
    3a60:	d301      	bcc.n	3a66 <__divsi3+0xd2>
    3a62:	010b      	lsls	r3, r1, #4
    3a64:	1ac0      	subs	r0, r0, r3
    3a66:	4152      	adcs	r2, r2
    3a68:	08c3      	lsrs	r3, r0, #3
    3a6a:	428b      	cmp	r3, r1
    3a6c:	d301      	bcc.n	3a72 <__divsi3+0xde>
    3a6e:	00cb      	lsls	r3, r1, #3
    3a70:	1ac0      	subs	r0, r0, r3
    3a72:	4152      	adcs	r2, r2
    3a74:	0883      	lsrs	r3, r0, #2
    3a76:	428b      	cmp	r3, r1
    3a78:	d301      	bcc.n	3a7e <__divsi3+0xea>
    3a7a:	008b      	lsls	r3, r1, #2
    3a7c:	1ac0      	subs	r0, r0, r3
    3a7e:	4152      	adcs	r2, r2
    3a80:	0843      	lsrs	r3, r0, #1
    3a82:	428b      	cmp	r3, r1
    3a84:	d301      	bcc.n	3a8a <__divsi3+0xf6>
    3a86:	004b      	lsls	r3, r1, #1
    3a88:	1ac0      	subs	r0, r0, r3
    3a8a:	4152      	adcs	r2, r2
    3a8c:	1a41      	subs	r1, r0, r1
    3a8e:	d200      	bcs.n	3a92 <__divsi3+0xfe>
    3a90:	4601      	mov	r1, r0
    3a92:	4152      	adcs	r2, r2
    3a94:	4610      	mov	r0, r2
    3a96:	4770      	bx	lr
    3a98:	e05d      	b.n	3b56 <__divsi3+0x1c2>
    3a9a:	0fca      	lsrs	r2, r1, #31
    3a9c:	d000      	beq.n	3aa0 <__divsi3+0x10c>
    3a9e:	4249      	negs	r1, r1
    3aa0:	1003      	asrs	r3, r0, #32
    3aa2:	d300      	bcc.n	3aa6 <__divsi3+0x112>
    3aa4:	4240      	negs	r0, r0
    3aa6:	4053      	eors	r3, r2
    3aa8:	2200      	movs	r2, #0
    3aaa:	469c      	mov	ip, r3
    3aac:	0903      	lsrs	r3, r0, #4
    3aae:	428b      	cmp	r3, r1
    3ab0:	d32d      	bcc.n	3b0e <__divsi3+0x17a>
    3ab2:	0a03      	lsrs	r3, r0, #8
    3ab4:	428b      	cmp	r3, r1
    3ab6:	d312      	bcc.n	3ade <__divsi3+0x14a>
    3ab8:	22fc      	movs	r2, #252	; 0xfc
    3aba:	0189      	lsls	r1, r1, #6
    3abc:	ba12      	rev	r2, r2
    3abe:	0a03      	lsrs	r3, r0, #8
    3ac0:	428b      	cmp	r3, r1
    3ac2:	d30c      	bcc.n	3ade <__divsi3+0x14a>
    3ac4:	0189      	lsls	r1, r1, #6
    3ac6:	1192      	asrs	r2, r2, #6
    3ac8:	428b      	cmp	r3, r1
    3aca:	d308      	bcc.n	3ade <__divsi3+0x14a>
    3acc:	0189      	lsls	r1, r1, #6
    3ace:	1192      	asrs	r2, r2, #6
    3ad0:	428b      	cmp	r3, r1
    3ad2:	d304      	bcc.n	3ade <__divsi3+0x14a>
    3ad4:	0189      	lsls	r1, r1, #6
    3ad6:	d03a      	beq.n	3b4e <__divsi3+0x1ba>
    3ad8:	1192      	asrs	r2, r2, #6
    3ada:	e000      	b.n	3ade <__divsi3+0x14a>
    3adc:	0989      	lsrs	r1, r1, #6
    3ade:	09c3      	lsrs	r3, r0, #7
    3ae0:	428b      	cmp	r3, r1
    3ae2:	d301      	bcc.n	3ae8 <__divsi3+0x154>
    3ae4:	01cb      	lsls	r3, r1, #7
    3ae6:	1ac0      	subs	r0, r0, r3
    3ae8:	4152      	adcs	r2, r2
    3aea:	0983      	lsrs	r3, r0, #6
    3aec:	428b      	cmp	r3, r1
    3aee:	d301      	bcc.n	3af4 <__divsi3+0x160>
    3af0:	018b      	lsls	r3, r1, #6
    3af2:	1ac0      	subs	r0, r0, r3
    3af4:	4152      	adcs	r2, r2
    3af6:	0943      	lsrs	r3, r0, #5
    3af8:	428b      	cmp	r3, r1
    3afa:	d301      	bcc.n	3b00 <__divsi3+0x16c>
    3afc:	014b      	lsls	r3, r1, #5
    3afe:	1ac0      	subs	r0, r0, r3
    3b00:	4152      	adcs	r2, r2
    3b02:	0903      	lsrs	r3, r0, #4
    3b04:	428b      	cmp	r3, r1
    3b06:	d301      	bcc.n	3b0c <__divsi3+0x178>
    3b08:	010b      	lsls	r3, r1, #4
    3b0a:	1ac0      	subs	r0, r0, r3
    3b0c:	4152      	adcs	r2, r2
    3b0e:	08c3      	lsrs	r3, r0, #3
    3b10:	428b      	cmp	r3, r1
    3b12:	d301      	bcc.n	3b18 <__divsi3+0x184>
    3b14:	00cb      	lsls	r3, r1, #3
    3b16:	1ac0      	subs	r0, r0, r3
    3b18:	4152      	adcs	r2, r2
    3b1a:	0883      	lsrs	r3, r0, #2
    3b1c:	428b      	cmp	r3, r1
    3b1e:	d301      	bcc.n	3b24 <__divsi3+0x190>
    3b20:	008b      	lsls	r3, r1, #2
    3b22:	1ac0      	subs	r0, r0, r3
    3b24:	4152      	adcs	r2, r2
    3b26:	d2d9      	bcs.n	3adc <__divsi3+0x148>
    3b28:	0843      	lsrs	r3, r0, #1
    3b2a:	428b      	cmp	r3, r1
    3b2c:	d301      	bcc.n	3b32 <__divsi3+0x19e>
    3b2e:	004b      	lsls	r3, r1, #1
    3b30:	1ac0      	subs	r0, r0, r3
    3b32:	4152      	adcs	r2, r2
    3b34:	1a41      	subs	r1, r0, r1
    3b36:	d200      	bcs.n	3b3a <__divsi3+0x1a6>
    3b38:	4601      	mov	r1, r0
    3b3a:	4663      	mov	r3, ip
    3b3c:	4152      	adcs	r2, r2
    3b3e:	105b      	asrs	r3, r3, #1
    3b40:	4610      	mov	r0, r2
    3b42:	d301      	bcc.n	3b48 <__divsi3+0x1b4>
    3b44:	4240      	negs	r0, r0
    3b46:	2b00      	cmp	r3, #0
    3b48:	d500      	bpl.n	3b4c <__divsi3+0x1b8>
    3b4a:	4249      	negs	r1, r1
    3b4c:	4770      	bx	lr
    3b4e:	4663      	mov	r3, ip
    3b50:	105b      	asrs	r3, r3, #1
    3b52:	d300      	bcc.n	3b56 <__divsi3+0x1c2>
    3b54:	4240      	negs	r0, r0
    3b56:	b501      	push	{r0, lr}
    3b58:	2000      	movs	r0, #0
    3b5a:	f000 f805 	bl	3b68 <__aeabi_idiv0>
    3b5e:	bd02      	pop	{r1, pc}

00003b60 <__aeabi_idivmod>:
    3b60:	2900      	cmp	r1, #0
    3b62:	d0f8      	beq.n	3b56 <__divsi3+0x1c2>
    3b64:	e716      	b.n	3994 <__divsi3>
    3b66:	4770      	bx	lr

00003b68 <__aeabi_idiv0>:
    3b68:	4770      	bx	lr
    3b6a:	46c0      	nop			; (mov r8, r8)

00003b6c <__ctzsi2>:
    3b6c:	4241      	negs	r1, r0
    3b6e:	4008      	ands	r0, r1
    3b70:	211c      	movs	r1, #28
    3b72:	2301      	movs	r3, #1
    3b74:	041b      	lsls	r3, r3, #16
    3b76:	4298      	cmp	r0, r3
    3b78:	d301      	bcc.n	3b7e <__ctzsi2+0x12>
    3b7a:	0c00      	lsrs	r0, r0, #16
    3b7c:	3910      	subs	r1, #16
    3b7e:	0a1b      	lsrs	r3, r3, #8
    3b80:	4298      	cmp	r0, r3
    3b82:	d301      	bcc.n	3b88 <__ctzsi2+0x1c>
    3b84:	0a00      	lsrs	r0, r0, #8
    3b86:	3908      	subs	r1, #8
    3b88:	091b      	lsrs	r3, r3, #4
    3b8a:	4298      	cmp	r0, r3
    3b8c:	d301      	bcc.n	3b92 <__ctzsi2+0x26>
    3b8e:	0900      	lsrs	r0, r0, #4
    3b90:	3904      	subs	r1, #4
    3b92:	a202      	add	r2, pc, #8	; (adr r2, 3b9c <__ctzsi2+0x30>)
    3b94:	5c10      	ldrb	r0, [r2, r0]
    3b96:	1a40      	subs	r0, r0, r1
    3b98:	4770      	bx	lr
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	1d1d1c1b 	.word	0x1d1d1c1b
    3ba0:	1e1e1e1e 	.word	0x1e1e1e1e
    3ba4:	1f1f1f1f 	.word	0x1f1f1f1f
    3ba8:	1f1f1f1f 	.word	0x1f1f1f1f

00003bac <__libc_init_array>:
    3bac:	b570      	push	{r4, r5, r6, lr}
    3bae:	2600      	movs	r6, #0
    3bb0:	4d0c      	ldr	r5, [pc, #48]	; (3be4 <__libc_init_array+0x38>)
    3bb2:	4c0d      	ldr	r4, [pc, #52]	; (3be8 <__libc_init_array+0x3c>)
    3bb4:	1b64      	subs	r4, r4, r5
    3bb6:	10a4      	asrs	r4, r4, #2
    3bb8:	42a6      	cmp	r6, r4
    3bba:	d109      	bne.n	3bd0 <__libc_init_array+0x24>
    3bbc:	2600      	movs	r6, #0
    3bbe:	f000 fa43 	bl	4048 <_init>
    3bc2:	4d0a      	ldr	r5, [pc, #40]	; (3bec <__libc_init_array+0x40>)
    3bc4:	4c0a      	ldr	r4, [pc, #40]	; (3bf0 <__libc_init_array+0x44>)
    3bc6:	1b64      	subs	r4, r4, r5
    3bc8:	10a4      	asrs	r4, r4, #2
    3bca:	42a6      	cmp	r6, r4
    3bcc:	d105      	bne.n	3bda <__libc_init_array+0x2e>
    3bce:	bd70      	pop	{r4, r5, r6, pc}
    3bd0:	00b3      	lsls	r3, r6, #2
    3bd2:	58eb      	ldr	r3, [r5, r3]
    3bd4:	4798      	blx	r3
    3bd6:	3601      	adds	r6, #1
    3bd8:	e7ee      	b.n	3bb8 <__libc_init_array+0xc>
    3bda:	00b3      	lsls	r3, r6, #2
    3bdc:	58eb      	ldr	r3, [r5, r3]
    3bde:	4798      	blx	r3
    3be0:	3601      	adds	r6, #1
    3be2:	e7f2      	b.n	3bca <__libc_init_array+0x1e>
    3be4:	00004054 	.word	0x00004054
    3be8:	00004054 	.word	0x00004054
    3bec:	00004054 	.word	0x00004054
    3bf0:	00004058 	.word	0x00004058

00003bf4 <memcpy>:
    3bf4:	2300      	movs	r3, #0
    3bf6:	b510      	push	{r4, lr}
    3bf8:	429a      	cmp	r2, r3
    3bfa:	d100      	bne.n	3bfe <memcpy+0xa>
    3bfc:	bd10      	pop	{r4, pc}
    3bfe:	5ccc      	ldrb	r4, [r1, r3]
    3c00:	54c4      	strb	r4, [r0, r3]
    3c02:	3301      	adds	r3, #1
    3c04:	e7f8      	b.n	3bf8 <memcpy+0x4>

00003c06 <memset>:
    3c06:	0003      	movs	r3, r0
    3c08:	1882      	adds	r2, r0, r2
    3c0a:	4293      	cmp	r3, r2
    3c0c:	d100      	bne.n	3c10 <memset+0xa>
    3c0e:	4770      	bx	lr
    3c10:	7019      	strb	r1, [r3, #0]
    3c12:	3301      	adds	r3, #1
    3c14:	e7f9      	b.n	3c0a <memset+0x4>
	...

00003c18 <keys>:
	...
    3c20:	0029 0000 0035 0000 0001 0000 0000 0000     )...5...........
    3c30:	001e 0000 003a 0000 0002 0000 0000 0000     ....:...........
    3c40:	001f 0000 003b 0000 0003 0000 0000 0000     ....;...........
    3c50:	0020 0000 003c 0000 0004 0000 0000 0000      ...<...........
    3c60:	0021 0000 003d 0000 0005 0000 0000 0000     !...=...........
    3c70:	0022 0000 003e 0000 0006 0000 0000 0000     "...>...........
    3c80:	0023 0000 003f 0000 0007 0000 0000 0000     #...?...........
    3c90:	0024 0000 0040 0000 0008 0000 0000 0000     $...@...........
    3ca0:	0025 0000 0041 0000 0009 0000 0000 0000     %...A...........
    3cb0:	0026 0000 0042 0000 000a 0000 0000 0000     &...B...........
    3cc0:	0027 0000 0043 0000 000b 0000 0000 0000     '...C...........
    3cd0:	004c 0000 ffff ffff 0000 0000 0001 0000     L...............
    3ce0:	002b 0000 ffff ffff 0001 0000 0001 0000     +...............
    3cf0:	0014 0000 0044 0000 0002 0000 0001 0000     ....D...........
    3d00:	001a 0000 0045 0000 0003 0000 0001 0000     ....E...........
    3d10:	0008 0000 ffff ffff 0004 0000 0001 0000     ................
    3d20:	0015 0000 ffff ffff 0005 0000 0001 0000     ................
    3d30:	0017 0000 ffff ffff 0006 0000 0001 0000     ................
    3d40:	001c 0000 ffff ffff 0007 0000 0001 0000     ................
    3d50:	0018 0000 002f 0000 0008 0000 0001 0000     ..../...........
    3d60:	000c 0000 ffff ffff 0009 0000 0001 0000     ................
    3d70:	0012 0000 0033 0000 000a 0000 0001 0000     ....3...........
    3d80:	0013 0000 ffff ffff 000b 0000 0001 0000     ................
    3d90:	002d 0000 ffff ffff 0000 0000 0002 0000     -...............
    3da0:	ffff ffff ffff ffff 0001 0000 0002 0000     ................
    3db0:	0004 0000 0034 0000 0002 0000 0002 0000     ....4...........
    3dc0:	0016 0000 ffff ffff 0003 0000 0002 0000     ................
    3dd0:	0007 0000 ffff ffff 0004 0000 0002 0000     ................
    3de0:	0009 0000 ffff ffff 0005 0000 0002 0000     ................
    3df0:	000a 0000 ffff ffff 0006 0000 0002 0000     ................
    3e00:	000b 0000 ffff ffff 0007 0000 0002 0000     ................
    3e10:	000d 0000 ffff ffff 0008 0000 0002 0000     ................
    3e20:	000e 0000 ffff ffff 0009 0000 0002 0000     ................
    3e30:	000f 0000 ffff ffff 000a 0000 0002 0000     ................
    3e40:	0031 0000 002e 0000 000b 0000 0002 0000     1...............
    3e50:	002a 0000 ffff ffff 0000 0000 0003 0000     *...............
    3e60:	ffff ffff ffff ffff 0001 0000 0003 0000     ................
    3e70:	001d 0000 ffff ffff 0002 0000 0003 0000     ................
    3e80:	001b 0000 ffff ffff 0003 0000 0003 0000     ................
    3e90:	0006 0000 ffff ffff 0004 0000 0003 0000     ................
    3ea0:	0019 0000 ffff ffff 0005 0000 0003 0000     ................
    3eb0:	0005 0000 ffff ffff 0006 0000 0003 0000     ................
    3ec0:	0011 0000 ffff ffff 0007 0000 0003 0000     ................
    3ed0:	0010 0000 ffff ffff 0008 0000 0003 0000     ................
    3ee0:	0036 0000 ffff ffff 0009 0000 0003 0000     6...............
    3ef0:	0037 0000 ffff ffff 000a 0000 0003 0000     7...............
    3f00:	0052 0000 004b 0000 000b 0000 0003 0000     R...K...........
    3f10:	0028 0000 ffff ffff 0000 0000 0004 0000     (...............
    3f20:	ffff ffff ffff ffff 0001 0000 0004 0000     ................
    3f30:	ffff ffff ffff ffff 0002 0000 0004 0000     ................
    3f40:	ffff ffff ffff ffff 0003 0000 0004 0000     ................
    3f50:	ffff ffff ffff ffff 0004 0000 0004 0000     ................
    3f60:	002c 0000 ffff ffff 0005 0000 0004 0000     ,...............
    3f70:	ffff ffff ffff ffff 0006 0000 0004 0000     ................
    3f80:	ffff ffff ffff ffff 0007 0000 0004 0000     ................
    3f90:	0030 0000 ffff ffff 0008 0000 0004 0000     0...............
    3fa0:	0038 0000 ffff ffff 0009 0000 0004 0000     8...............
    3fb0:	0050 0000 ffff ffff 000a 0000 0004 0000     P...............
    3fc0:	0051 0000 004e 0000 000b 0000 0004 0000     Q...N...........
    3fd0:	004f 0000 ffff ffff 137e 0000 137a 0000     O.......~...z...
    3fe0:	137a 0000 13e4 0000 13e4 0000 1394 0000     z...............
    3ff0:	1384 0000 139a 0000 13d2 0000 1554 0000     ............T...
    4000:	1534 0000 1534 0000 15e0 0000 1546 0000     4...4.......F...
    4010:	1562 0000 1538 0000 1570 0000 15c4 0000     b...8...p.......
    4020:	2a50 0000 2a5e 0000 2af8 0000 2b98 0000     P*..^*...*...+..
    4030:	2bfc 0000                                   .+..

00004034 <_usb_device_irq_bits>:
    4034:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

00004044 <_usb_endpoint_irq_bits>:
    4044:	0c03 6010                                   ...`

00004048 <_init>:
    4048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    404a:	46c0      	nop			; (mov r8, r8)
    404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    404e:	bc08      	pop	{r3}
    4050:	469e      	mov	lr, r3
    4052:	4770      	bx	lr

00004054 <__init_array_start>:
    4054:	000000dd 	.word	0x000000dd

00004058 <_fini>:
    4058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    405e:	bc08      	pop	{r3}
    4060:	469e      	mov	lr, r3
    4062:	4770      	bx	lr

00004064 <__fini_array_start>:
    4064:	000000b5 	.word	0x000000b5
